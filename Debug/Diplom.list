
Diplom.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a024  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  0800a1c8  0800a1c8  0001a1c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a5f4  0800a5f4  000203fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800a5f4  0800a5f4  0001a5f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a5fc  0800a5fc  000203fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a5fc  0800a5fc  0001a5fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a600  0800a600  0001a600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003fc  20000000  0800a604  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004010  200003fc  0800aa00  000203fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000440c  0800aa00  0002440c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000203fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e6cb  00000000  00000000  0002042c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000022b3  00000000  00000000  0002eaf7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d70  00000000  00000000  00030db0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c78  00000000  00000000  00031b20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017425  00000000  00000000  00032798  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ac97  00000000  00000000  00049bbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008e2a1  00000000  00000000  00054854  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e2af5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004864  00000000  00000000  000e2b70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200003fc 	.word	0x200003fc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a1ac 	.word	0x0800a1ac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000400 	.word	0x20000400
 80001dc:	0800a1ac 	.word	0x0800a1ac

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b972 	b.w	8000f94 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	4688      	mov	r8, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14b      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4615      	mov	r5, r2
 8000cda:	d967      	bls.n	8000dac <__udivmoddi4+0xe4>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0720 	rsb	r7, r2, #32
 8000ce6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cea:	fa20 f707 	lsr.w	r7, r0, r7
 8000cee:	4095      	lsls	r5, r2
 8000cf0:	ea47 0803 	orr.w	r8, r7, r3
 8000cf4:	4094      	lsls	r4, r2
 8000cf6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d00:	fa1f fc85 	uxth.w	ip, r5
 8000d04:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d08:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d0c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x60>
 8000d14:	18eb      	adds	r3, r5, r3
 8000d16:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d1a:	f080 811b 	bcs.w	8000f54 <__udivmoddi4+0x28c>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 8118 	bls.w	8000f54 <__udivmoddi4+0x28c>
 8000d24:	3f02      	subs	r7, #2
 8000d26:	442b      	add	r3, r5
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d3c:	45a4      	cmp	ip, r4
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x8c>
 8000d40:	192c      	adds	r4, r5, r4
 8000d42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d46:	f080 8107 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d4a:	45a4      	cmp	ip, r4
 8000d4c:	f240 8104 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d50:	3802      	subs	r0, #2
 8000d52:	442c      	add	r4, r5
 8000d54:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d58:	eba4 040c 	sub.w	r4, r4, ip
 8000d5c:	2700      	movs	r7, #0
 8000d5e:	b11e      	cbz	r6, 8000d68 <__udivmoddi4+0xa0>
 8000d60:	40d4      	lsrs	r4, r2
 8000d62:	2300      	movs	r3, #0
 8000d64:	e9c6 4300 	strd	r4, r3, [r6]
 8000d68:	4639      	mov	r1, r7
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0xbe>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80eb 	beq.w	8000f4e <__udivmoddi4+0x286>
 8000d78:	2700      	movs	r7, #0
 8000d7a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d7e:	4638      	mov	r0, r7
 8000d80:	4639      	mov	r1, r7
 8000d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d86:	fab3 f783 	clz	r7, r3
 8000d8a:	2f00      	cmp	r7, #0
 8000d8c:	d147      	bne.n	8000e1e <__udivmoddi4+0x156>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d302      	bcc.n	8000d98 <__udivmoddi4+0xd0>
 8000d92:	4282      	cmp	r2, r0
 8000d94:	f200 80fa 	bhi.w	8000f8c <__udivmoddi4+0x2c4>
 8000d98:	1a84      	subs	r4, r0, r2
 8000d9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d9e:	2001      	movs	r0, #1
 8000da0:	4698      	mov	r8, r3
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	d0e0      	beq.n	8000d68 <__udivmoddi4+0xa0>
 8000da6:	e9c6 4800 	strd	r4, r8, [r6]
 8000daa:	e7dd      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000dac:	b902      	cbnz	r2, 8000db0 <__udivmoddi4+0xe8>
 8000dae:	deff      	udf	#255	; 0xff
 8000db0:	fab2 f282 	clz	r2, r2
 8000db4:	2a00      	cmp	r2, #0
 8000db6:	f040 808f 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000dba:	1b49      	subs	r1, r1, r5
 8000dbc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dc0:	fa1f f885 	uxth.w	r8, r5
 8000dc4:	2701      	movs	r7, #1
 8000dc6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dca:	0c23      	lsrs	r3, r4, #16
 8000dcc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dd0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dd4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dd8:	4299      	cmp	r1, r3
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x124>
 8000ddc:	18eb      	adds	r3, r5, r3
 8000dde:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4299      	cmp	r1, r3
 8000de6:	f200 80cd 	bhi.w	8000f84 <__udivmoddi4+0x2bc>
 8000dea:	4684      	mov	ip, r0
 8000dec:	1a59      	subs	r1, r3, r1
 8000dee:	b2a3      	uxth	r3, r4
 8000df0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000df8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dfc:	fb08 f800 	mul.w	r8, r8, r0
 8000e00:	45a0      	cmp	r8, r4
 8000e02:	d907      	bls.n	8000e14 <__udivmoddi4+0x14c>
 8000e04:	192c      	adds	r4, r5, r4
 8000e06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x14a>
 8000e0c:	45a0      	cmp	r8, r4
 8000e0e:	f200 80b6 	bhi.w	8000f7e <__udivmoddi4+0x2b6>
 8000e12:	4618      	mov	r0, r3
 8000e14:	eba4 0408 	sub.w	r4, r4, r8
 8000e18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e1c:	e79f      	b.n	8000d5e <__udivmoddi4+0x96>
 8000e1e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e22:	40bb      	lsls	r3, r7
 8000e24:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e28:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e2c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e30:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e34:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e38:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e3c:	4325      	orrs	r5, r4
 8000e3e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e42:	0c2c      	lsrs	r4, r5, #16
 8000e44:	fb08 3319 	mls	r3, r8, r9, r3
 8000e48:	fa1f fa8e 	uxth.w	sl, lr
 8000e4c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e50:	fb09 f40a 	mul.w	r4, r9, sl
 8000e54:	429c      	cmp	r4, r3
 8000e56:	fa02 f207 	lsl.w	r2, r2, r7
 8000e5a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1e 0303 	adds.w	r3, lr, r3
 8000e64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e68:	f080 8087 	bcs.w	8000f7a <__udivmoddi4+0x2b2>
 8000e6c:	429c      	cmp	r4, r3
 8000e6e:	f240 8084 	bls.w	8000f7a <__udivmoddi4+0x2b2>
 8000e72:	f1a9 0902 	sub.w	r9, r9, #2
 8000e76:	4473      	add	r3, lr
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	b2ad      	uxth	r5, r5
 8000e7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e80:	fb08 3310 	mls	r3, r8, r0, r3
 8000e84:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e88:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e8c:	45a2      	cmp	sl, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1e 0404 	adds.w	r4, lr, r4
 8000e94:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e98:	d26b      	bcs.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9a:	45a2      	cmp	sl, r4
 8000e9c:	d969      	bls.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	4474      	add	r4, lr
 8000ea2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ea6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eaa:	eba4 040a 	sub.w	r4, r4, sl
 8000eae:	454c      	cmp	r4, r9
 8000eb0:	46c2      	mov	sl, r8
 8000eb2:	464b      	mov	r3, r9
 8000eb4:	d354      	bcc.n	8000f60 <__udivmoddi4+0x298>
 8000eb6:	d051      	beq.n	8000f5c <__udivmoddi4+0x294>
 8000eb8:	2e00      	cmp	r6, #0
 8000eba:	d069      	beq.n	8000f90 <__udivmoddi4+0x2c8>
 8000ebc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ec0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ec4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ec8:	40fd      	lsrs	r5, r7
 8000eca:	40fc      	lsrs	r4, r7
 8000ecc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ed0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ed4:	2700      	movs	r7, #0
 8000ed6:	e747      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000ed8:	f1c2 0320 	rsb	r3, r2, #32
 8000edc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ee0:	4095      	lsls	r5, r2
 8000ee2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ee6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eee:	4338      	orrs	r0, r7
 8000ef0:	0c01      	lsrs	r1, r0, #16
 8000ef2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ef6:	fa1f f885 	uxth.w	r8, r5
 8000efa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000efe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f02:	fb07 f308 	mul.w	r3, r7, r8
 8000f06:	428b      	cmp	r3, r1
 8000f08:	fa04 f402 	lsl.w	r4, r4, r2
 8000f0c:	d907      	bls.n	8000f1e <__udivmoddi4+0x256>
 8000f0e:	1869      	adds	r1, r5, r1
 8000f10:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f14:	d22f      	bcs.n	8000f76 <__udivmoddi4+0x2ae>
 8000f16:	428b      	cmp	r3, r1
 8000f18:	d92d      	bls.n	8000f76 <__udivmoddi4+0x2ae>
 8000f1a:	3f02      	subs	r7, #2
 8000f1c:	4429      	add	r1, r5
 8000f1e:	1acb      	subs	r3, r1, r3
 8000f20:	b281      	uxth	r1, r0
 8000f22:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f26:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f2e:	fb00 f308 	mul.w	r3, r0, r8
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x27e>
 8000f36:	1869      	adds	r1, r5, r1
 8000f38:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f3c:	d217      	bcs.n	8000f6e <__udivmoddi4+0x2a6>
 8000f3e:	428b      	cmp	r3, r1
 8000f40:	d915      	bls.n	8000f6e <__udivmoddi4+0x2a6>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4429      	add	r1, r5
 8000f46:	1ac9      	subs	r1, r1, r3
 8000f48:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f4c:	e73b      	b.n	8000dc6 <__udivmoddi4+0xfe>
 8000f4e:	4637      	mov	r7, r6
 8000f50:	4630      	mov	r0, r6
 8000f52:	e709      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000f54:	4607      	mov	r7, r0
 8000f56:	e6e7      	b.n	8000d28 <__udivmoddi4+0x60>
 8000f58:	4618      	mov	r0, r3
 8000f5a:	e6fb      	b.n	8000d54 <__udivmoddi4+0x8c>
 8000f5c:	4541      	cmp	r1, r8
 8000f5e:	d2ab      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f60:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f64:	eb69 020e 	sbc.w	r2, r9, lr
 8000f68:	3801      	subs	r0, #1
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	e7a4      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f6e:	4660      	mov	r0, ip
 8000f70:	e7e9      	b.n	8000f46 <__udivmoddi4+0x27e>
 8000f72:	4618      	mov	r0, r3
 8000f74:	e795      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f76:	4667      	mov	r7, ip
 8000f78:	e7d1      	b.n	8000f1e <__udivmoddi4+0x256>
 8000f7a:	4681      	mov	r9, r0
 8000f7c:	e77c      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f7e:	3802      	subs	r0, #2
 8000f80:	442c      	add	r4, r5
 8000f82:	e747      	b.n	8000e14 <__udivmoddi4+0x14c>
 8000f84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f88:	442b      	add	r3, r5
 8000f8a:	e72f      	b.n	8000dec <__udivmoddi4+0x124>
 8000f8c:	4638      	mov	r0, r7
 8000f8e:	e708      	b.n	8000da2 <__udivmoddi4+0xda>
 8000f90:	4637      	mov	r7, r6
 8000f92:	e6e9      	b.n	8000d68 <__udivmoddi4+0xa0>

08000f94 <__aeabi_idiv0>:
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f9c:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <HAL_Init+0x40>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a0d      	ldr	r2, [pc, #52]	; (8000fd8 <HAL_Init+0x40>)
 8000fa2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fa6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fa8:	4b0b      	ldr	r3, [pc, #44]	; (8000fd8 <HAL_Init+0x40>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a0a      	ldr	r2, [pc, #40]	; (8000fd8 <HAL_Init+0x40>)
 8000fae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fb4:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <HAL_Init+0x40>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a07      	ldr	r2, [pc, #28]	; (8000fd8 <HAL_Init+0x40>)
 8000fba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc0:	2003      	movs	r0, #3
 8000fc2:	f000 f94d 	bl	8001260 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fc6:	2000      	movs	r0, #0
 8000fc8:	f000 f808 	bl	8000fdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fcc:	f004 fda4 	bl	8005b18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fd0:	2300      	movs	r3, #0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40023c00 	.word	0x40023c00

08000fdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fe4:	4b12      	ldr	r3, [pc, #72]	; (8001030 <HAL_InitTick+0x54>)
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	4b12      	ldr	r3, [pc, #72]	; (8001034 <HAL_InitTick+0x58>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	4619      	mov	r1, r3
 8000fee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ff2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ff6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f000 f965 	bl	80012ca <HAL_SYSTICK_Config>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	e00e      	b.n	8001028 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2b0f      	cmp	r3, #15
 800100e:	d80a      	bhi.n	8001026 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001010:	2200      	movs	r2, #0
 8001012:	6879      	ldr	r1, [r7, #4]
 8001014:	f04f 30ff 	mov.w	r0, #4294967295
 8001018:	f000 f92d 	bl	8001276 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800101c:	4a06      	ldr	r2, [pc, #24]	; (8001038 <HAL_InitTick+0x5c>)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001022:	2300      	movs	r3, #0
 8001024:	e000      	b.n	8001028 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
}
 8001028:	4618      	mov	r0, r3
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	20000228 	.word	0x20000228
 8001034:	20000004 	.word	0x20000004
 8001038:	20000000 	.word	0x20000000

0800103c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001040:	4b06      	ldr	r3, [pc, #24]	; (800105c <HAL_IncTick+0x20>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	461a      	mov	r2, r3
 8001046:	4b06      	ldr	r3, [pc, #24]	; (8001060 <HAL_IncTick+0x24>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4413      	add	r3, r2
 800104c:	4a04      	ldr	r2, [pc, #16]	; (8001060 <HAL_IncTick+0x24>)
 800104e:	6013      	str	r3, [r2, #0]
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	20000004 	.word	0x20000004
 8001060:	2000043c 	.word	0x2000043c

08001064 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  return uwTick;
 8001068:	4b03      	ldr	r3, [pc, #12]	; (8001078 <HAL_GetTick+0x14>)
 800106a:	681b      	ldr	r3, [r3, #0]
}
 800106c:	4618      	mov	r0, r3
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	2000043c 	.word	0x2000043c

0800107c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001084:	f7ff ffee 	bl	8001064 <HAL_GetTick>
 8001088:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001094:	d005      	beq.n	80010a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001096:	4b09      	ldr	r3, [pc, #36]	; (80010bc <HAL_Delay+0x40>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	461a      	mov	r2, r3
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	4413      	add	r3, r2
 80010a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010a2:	bf00      	nop
 80010a4:	f7ff ffde 	bl	8001064 <HAL_GetTick>
 80010a8:	4602      	mov	r2, r0
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	68fa      	ldr	r2, [r7, #12]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d8f7      	bhi.n	80010a4 <HAL_Delay+0x28>
  {
  }
}
 80010b4:	bf00      	nop
 80010b6:	3710      	adds	r7, #16
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20000004 	.word	0x20000004

080010c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f003 0307 	and.w	r3, r3, #7
 80010ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010d0:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <__NVIC_SetPriorityGrouping+0x44>)
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010d6:	68ba      	ldr	r2, [r7, #8]
 80010d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010dc:	4013      	ands	r3, r2
 80010de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010f2:	4a04      	ldr	r2, [pc, #16]	; (8001104 <__NVIC_SetPriorityGrouping+0x44>)
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	60d3      	str	r3, [r2, #12]
}
 80010f8:	bf00      	nop
 80010fa:	3714      	adds	r7, #20
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800110c:	4b04      	ldr	r3, [pc, #16]	; (8001120 <__NVIC_GetPriorityGrouping+0x18>)
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	0a1b      	lsrs	r3, r3, #8
 8001112:	f003 0307 	and.w	r3, r3, #7
}
 8001116:	4618      	mov	r0, r3
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800112e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001132:	2b00      	cmp	r3, #0
 8001134:	db0b      	blt.n	800114e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	f003 021f 	and.w	r2, r3, #31
 800113c:	4907      	ldr	r1, [pc, #28]	; (800115c <__NVIC_EnableIRQ+0x38>)
 800113e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001142:	095b      	lsrs	r3, r3, #5
 8001144:	2001      	movs	r0, #1
 8001146:	fa00 f202 	lsl.w	r2, r0, r2
 800114a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800114e:	bf00      	nop
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	e000e100 	.word	0xe000e100

08001160 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	6039      	str	r1, [r7, #0]
 800116a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800116c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001170:	2b00      	cmp	r3, #0
 8001172:	db0a      	blt.n	800118a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	b2da      	uxtb	r2, r3
 8001178:	490c      	ldr	r1, [pc, #48]	; (80011ac <__NVIC_SetPriority+0x4c>)
 800117a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117e:	0112      	lsls	r2, r2, #4
 8001180:	b2d2      	uxtb	r2, r2
 8001182:	440b      	add	r3, r1
 8001184:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001188:	e00a      	b.n	80011a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	b2da      	uxtb	r2, r3
 800118e:	4908      	ldr	r1, [pc, #32]	; (80011b0 <__NVIC_SetPriority+0x50>)
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	f003 030f 	and.w	r3, r3, #15
 8001196:	3b04      	subs	r3, #4
 8001198:	0112      	lsls	r2, r2, #4
 800119a:	b2d2      	uxtb	r2, r2
 800119c:	440b      	add	r3, r1
 800119e:	761a      	strb	r2, [r3, #24]
}
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	e000e100 	.word	0xe000e100
 80011b0:	e000ed00 	.word	0xe000ed00

080011b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b089      	sub	sp, #36	; 0x24
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	60f8      	str	r0, [r7, #12]
 80011bc:	60b9      	str	r1, [r7, #8]
 80011be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	f003 0307 	and.w	r3, r3, #7
 80011c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	f1c3 0307 	rsb	r3, r3, #7
 80011ce:	2b04      	cmp	r3, #4
 80011d0:	bf28      	it	cs
 80011d2:	2304      	movcs	r3, #4
 80011d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	3304      	adds	r3, #4
 80011da:	2b06      	cmp	r3, #6
 80011dc:	d902      	bls.n	80011e4 <NVIC_EncodePriority+0x30>
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	3b03      	subs	r3, #3
 80011e2:	e000      	b.n	80011e6 <NVIC_EncodePriority+0x32>
 80011e4:	2300      	movs	r3, #0
 80011e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e8:	f04f 32ff 	mov.w	r2, #4294967295
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	43da      	mvns	r2, r3
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	401a      	ands	r2, r3
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	fa01 f303 	lsl.w	r3, r1, r3
 8001206:	43d9      	mvns	r1, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800120c:	4313      	orrs	r3, r2
         );
}
 800120e:	4618      	mov	r0, r3
 8001210:	3724      	adds	r7, #36	; 0x24
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
	...

0800121c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	3b01      	subs	r3, #1
 8001228:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800122c:	d301      	bcc.n	8001232 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800122e:	2301      	movs	r3, #1
 8001230:	e00f      	b.n	8001252 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001232:	4a0a      	ldr	r2, [pc, #40]	; (800125c <SysTick_Config+0x40>)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	3b01      	subs	r3, #1
 8001238:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800123a:	210f      	movs	r1, #15
 800123c:	f04f 30ff 	mov.w	r0, #4294967295
 8001240:	f7ff ff8e 	bl	8001160 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001244:	4b05      	ldr	r3, [pc, #20]	; (800125c <SysTick_Config+0x40>)
 8001246:	2200      	movs	r2, #0
 8001248:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800124a:	4b04      	ldr	r3, [pc, #16]	; (800125c <SysTick_Config+0x40>)
 800124c:	2207      	movs	r2, #7
 800124e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001250:	2300      	movs	r3, #0
}
 8001252:	4618      	mov	r0, r3
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	e000e010 	.word	0xe000e010

08001260 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f7ff ff29 	bl	80010c0 <__NVIC_SetPriorityGrouping>
}
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001276:	b580      	push	{r7, lr}
 8001278:	b086      	sub	sp, #24
 800127a:	af00      	add	r7, sp, #0
 800127c:	4603      	mov	r3, r0
 800127e:	60b9      	str	r1, [r7, #8]
 8001280:	607a      	str	r2, [r7, #4]
 8001282:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001284:	2300      	movs	r3, #0
 8001286:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001288:	f7ff ff3e 	bl	8001108 <__NVIC_GetPriorityGrouping>
 800128c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800128e:	687a      	ldr	r2, [r7, #4]
 8001290:	68b9      	ldr	r1, [r7, #8]
 8001292:	6978      	ldr	r0, [r7, #20]
 8001294:	f7ff ff8e 	bl	80011b4 <NVIC_EncodePriority>
 8001298:	4602      	mov	r2, r0
 800129a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800129e:	4611      	mov	r1, r2
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff ff5d 	bl	8001160 <__NVIC_SetPriority>
}
 80012a6:	bf00      	nop
 80012a8:	3718      	adds	r7, #24
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b082      	sub	sp, #8
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	4603      	mov	r3, r0
 80012b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff ff31 	bl	8001124 <__NVIC_EnableIRQ>
}
 80012c2:	bf00      	nop
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b082      	sub	sp, #8
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f7ff ffa2 	bl	800121c <SysTick_Config>
 80012d8:	4603      	mov	r3, r0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012e2:	b480      	push	{r7}
 80012e4:	b083      	sub	sp, #12
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d004      	beq.n	8001300 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2280      	movs	r2, #128	; 0x80
 80012fa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80012fc:	2301      	movs	r3, #1
 80012fe:	e00c      	b.n	800131a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2205      	movs	r2, #5
 8001304:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f022 0201 	bic.w	r2, r2, #1
 8001316:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001318:	2300      	movs	r3, #0
}
 800131a:	4618      	mov	r0, r3
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
	...

08001328 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001328:	b480      	push	{r7}
 800132a:	b089      	sub	sp, #36	; 0x24
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001332:	2300      	movs	r3, #0
 8001334:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001336:	2300      	movs	r3, #0
 8001338:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800133a:	2300      	movs	r3, #0
 800133c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800133e:	2300      	movs	r3, #0
 8001340:	61fb      	str	r3, [r7, #28]
 8001342:	e159      	b.n	80015f8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001344:	2201      	movs	r2, #1
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	697a      	ldr	r2, [r7, #20]
 8001354:	4013      	ands	r3, r2
 8001356:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001358:	693a      	ldr	r2, [r7, #16]
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	429a      	cmp	r2, r3
 800135e:	f040 8148 	bne.w	80015f2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	2b01      	cmp	r3, #1
 8001368:	d00b      	beq.n	8001382 <HAL_GPIO_Init+0x5a>
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	2b02      	cmp	r3, #2
 8001370:	d007      	beq.n	8001382 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001376:	2b11      	cmp	r3, #17
 8001378:	d003      	beq.n	8001382 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	2b12      	cmp	r3, #18
 8001380:	d130      	bne.n	80013e4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	2203      	movs	r2, #3
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	43db      	mvns	r3, r3
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	4013      	ands	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	68da      	ldr	r2, [r3, #12]
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013b8:	2201      	movs	r2, #1
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	43db      	mvns	r3, r3
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	4013      	ands	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	091b      	lsrs	r3, r3, #4
 80013ce:	f003 0201 	and.w	r2, r3, #1
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	4313      	orrs	r3, r2
 80013dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	2203      	movs	r2, #3
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	43db      	mvns	r3, r3
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	4013      	ands	r3, r2
 80013fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	689a      	ldr	r2, [r3, #8]
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	4313      	orrs	r3, r2
 800140c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	2b02      	cmp	r3, #2
 800141a:	d003      	beq.n	8001424 <HAL_GPIO_Init+0xfc>
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	2b12      	cmp	r3, #18
 8001422:	d123      	bne.n	800146c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	08da      	lsrs	r2, r3, #3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	3208      	adds	r2, #8
 800142c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001430:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	f003 0307 	and.w	r3, r3, #7
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	220f      	movs	r2, #15
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	43db      	mvns	r3, r3
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	4013      	ands	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	691a      	ldr	r2, [r3, #16]
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	f003 0307 	and.w	r3, r3, #7
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	fa02 f303 	lsl.w	r3, r2, r3
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	4313      	orrs	r3, r2
 800145c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	08da      	lsrs	r2, r3, #3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	3208      	adds	r2, #8
 8001466:	69b9      	ldr	r1, [r7, #24]
 8001468:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	2203      	movs	r2, #3
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	43db      	mvns	r3, r3
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	4013      	ands	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f003 0203 	and.w	r2, r3, #3
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	4313      	orrs	r3, r2
 8001498:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	f000 80a2 	beq.w	80015f2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	60fb      	str	r3, [r7, #12]
 80014b2:	4b56      	ldr	r3, [pc, #344]	; (800160c <HAL_GPIO_Init+0x2e4>)
 80014b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b6:	4a55      	ldr	r2, [pc, #340]	; (800160c <HAL_GPIO_Init+0x2e4>)
 80014b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014bc:	6453      	str	r3, [r2, #68]	; 0x44
 80014be:	4b53      	ldr	r3, [pc, #332]	; (800160c <HAL_GPIO_Init+0x2e4>)
 80014c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014c6:	60fb      	str	r3, [r7, #12]
 80014c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014ca:	4a51      	ldr	r2, [pc, #324]	; (8001610 <HAL_GPIO_Init+0x2e8>)
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	089b      	lsrs	r3, r3, #2
 80014d0:	3302      	adds	r3, #2
 80014d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	f003 0303 	and.w	r3, r3, #3
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	220f      	movs	r2, #15
 80014e2:	fa02 f303 	lsl.w	r3, r2, r3
 80014e6:	43db      	mvns	r3, r3
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	4013      	ands	r3, r2
 80014ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4a48      	ldr	r2, [pc, #288]	; (8001614 <HAL_GPIO_Init+0x2ec>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d019      	beq.n	800152a <HAL_GPIO_Init+0x202>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4a47      	ldr	r2, [pc, #284]	; (8001618 <HAL_GPIO_Init+0x2f0>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d013      	beq.n	8001526 <HAL_GPIO_Init+0x1fe>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4a46      	ldr	r2, [pc, #280]	; (800161c <HAL_GPIO_Init+0x2f4>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d00d      	beq.n	8001522 <HAL_GPIO_Init+0x1fa>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4a45      	ldr	r2, [pc, #276]	; (8001620 <HAL_GPIO_Init+0x2f8>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d007      	beq.n	800151e <HAL_GPIO_Init+0x1f6>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4a44      	ldr	r2, [pc, #272]	; (8001624 <HAL_GPIO_Init+0x2fc>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d101      	bne.n	800151a <HAL_GPIO_Init+0x1f2>
 8001516:	2304      	movs	r3, #4
 8001518:	e008      	b.n	800152c <HAL_GPIO_Init+0x204>
 800151a:	2307      	movs	r3, #7
 800151c:	e006      	b.n	800152c <HAL_GPIO_Init+0x204>
 800151e:	2303      	movs	r3, #3
 8001520:	e004      	b.n	800152c <HAL_GPIO_Init+0x204>
 8001522:	2302      	movs	r3, #2
 8001524:	e002      	b.n	800152c <HAL_GPIO_Init+0x204>
 8001526:	2301      	movs	r3, #1
 8001528:	e000      	b.n	800152c <HAL_GPIO_Init+0x204>
 800152a:	2300      	movs	r3, #0
 800152c:	69fa      	ldr	r2, [r7, #28]
 800152e:	f002 0203 	and.w	r2, r2, #3
 8001532:	0092      	lsls	r2, r2, #2
 8001534:	4093      	lsls	r3, r2
 8001536:	69ba      	ldr	r2, [r7, #24]
 8001538:	4313      	orrs	r3, r2
 800153a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800153c:	4934      	ldr	r1, [pc, #208]	; (8001610 <HAL_GPIO_Init+0x2e8>)
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	089b      	lsrs	r3, r3, #2
 8001542:	3302      	adds	r3, #2
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800154a:	4b37      	ldr	r3, [pc, #220]	; (8001628 <HAL_GPIO_Init+0x300>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	43db      	mvns	r3, r3
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	4013      	ands	r3, r2
 8001558:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d003      	beq.n	800156e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001566:	69ba      	ldr	r2, [r7, #24]
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	4313      	orrs	r3, r2
 800156c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800156e:	4a2e      	ldr	r2, [pc, #184]	; (8001628 <HAL_GPIO_Init+0x300>)
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001574:	4b2c      	ldr	r3, [pc, #176]	; (8001628 <HAL_GPIO_Init+0x300>)
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	43db      	mvns	r3, r3
 800157e:	69ba      	ldr	r2, [r7, #24]
 8001580:	4013      	ands	r3, r2
 8001582:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800158c:	2b00      	cmp	r3, #0
 800158e:	d003      	beq.n	8001598 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	4313      	orrs	r3, r2
 8001596:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001598:	4a23      	ldr	r2, [pc, #140]	; (8001628 <HAL_GPIO_Init+0x300>)
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800159e:	4b22      	ldr	r3, [pc, #136]	; (8001628 <HAL_GPIO_Init+0x300>)
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	43db      	mvns	r3, r3
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	4013      	ands	r3, r2
 80015ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d003      	beq.n	80015c2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80015ba:	69ba      	ldr	r2, [r7, #24]
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	4313      	orrs	r3, r2
 80015c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015c2:	4a19      	ldr	r2, [pc, #100]	; (8001628 <HAL_GPIO_Init+0x300>)
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015c8:	4b17      	ldr	r3, [pc, #92]	; (8001628 <HAL_GPIO_Init+0x300>)
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	43db      	mvns	r3, r3
 80015d2:	69ba      	ldr	r2, [r7, #24]
 80015d4:	4013      	ands	r3, r2
 80015d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d003      	beq.n	80015ec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015ec:	4a0e      	ldr	r2, [pc, #56]	; (8001628 <HAL_GPIO_Init+0x300>)
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	3301      	adds	r3, #1
 80015f6:	61fb      	str	r3, [r7, #28]
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	2b0f      	cmp	r3, #15
 80015fc:	f67f aea2 	bls.w	8001344 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001600:	bf00      	nop
 8001602:	3724      	adds	r7, #36	; 0x24
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr
 800160c:	40023800 	.word	0x40023800
 8001610:	40013800 	.word	0x40013800
 8001614:	40020000 	.word	0x40020000
 8001618:	40020400 	.word	0x40020400
 800161c:	40020800 	.word	0x40020800
 8001620:	40020c00 	.word	0x40020c00
 8001624:	40021000 	.word	0x40021000
 8001628:	40013c00 	.word	0x40013c00

0800162c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800162c:	b480      	push	{r7}
 800162e:	b085      	sub	sp, #20
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	460b      	mov	r3, r1
 8001636:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	691a      	ldr	r2, [r3, #16]
 800163c:	887b      	ldrh	r3, [r7, #2]
 800163e:	4013      	ands	r3, r2
 8001640:	2b00      	cmp	r3, #0
 8001642:	d002      	beq.n	800164a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001644:	2301      	movs	r3, #1
 8001646:	73fb      	strb	r3, [r7, #15]
 8001648:	e001      	b.n	800164e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800164a:	2300      	movs	r3, #0
 800164c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800164e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001650:	4618      	mov	r0, r3
 8001652:	3714      	adds	r7, #20
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	460b      	mov	r3, r1
 8001666:	807b      	strh	r3, [r7, #2]
 8001668:	4613      	mov	r3, r2
 800166a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800166c:	787b      	ldrb	r3, [r7, #1]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d003      	beq.n	800167a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001672:	887a      	ldrh	r2, [r7, #2]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001678:	e003      	b.n	8001682 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800167a:	887b      	ldrh	r3, [r7, #2]
 800167c:	041a      	lsls	r2, r3, #16
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	619a      	str	r2, [r3, #24]
}
 8001682:	bf00      	nop
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
	...

08001690 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800169a:	4b08      	ldr	r3, [pc, #32]	; (80016bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800169c:	695a      	ldr	r2, [r3, #20]
 800169e:	88fb      	ldrh	r3, [r7, #6]
 80016a0:	4013      	ands	r3, r2
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d006      	beq.n	80016b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80016a6:	4a05      	ldr	r2, [pc, #20]	; (80016bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016a8:	88fb      	ldrh	r3, [r7, #6]
 80016aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80016ac:	88fb      	ldrh	r3, [r7, #6]
 80016ae:	4618      	mov	r0, r3
 80016b0:	f003 fe4e 	bl	8005350 <HAL_GPIO_EXTI_Callback>
  }
}
 80016b4:	bf00      	nop
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40013c00 	.word	0x40013c00

080016c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d101      	bne.n	80016d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e25b      	b.n	8001b8a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d075      	beq.n	80017ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016de:	4ba3      	ldr	r3, [pc, #652]	; (800196c <HAL_RCC_OscConfig+0x2ac>)
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	f003 030c 	and.w	r3, r3, #12
 80016e6:	2b04      	cmp	r3, #4
 80016e8:	d00c      	beq.n	8001704 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016ea:	4ba0      	ldr	r3, [pc, #640]	; (800196c <HAL_RCC_OscConfig+0x2ac>)
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016f2:	2b08      	cmp	r3, #8
 80016f4:	d112      	bne.n	800171c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016f6:	4b9d      	ldr	r3, [pc, #628]	; (800196c <HAL_RCC_OscConfig+0x2ac>)
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001702:	d10b      	bne.n	800171c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001704:	4b99      	ldr	r3, [pc, #612]	; (800196c <HAL_RCC_OscConfig+0x2ac>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800170c:	2b00      	cmp	r3, #0
 800170e:	d05b      	beq.n	80017c8 <HAL_RCC_OscConfig+0x108>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d157      	bne.n	80017c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e236      	b.n	8001b8a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001724:	d106      	bne.n	8001734 <HAL_RCC_OscConfig+0x74>
 8001726:	4b91      	ldr	r3, [pc, #580]	; (800196c <HAL_RCC_OscConfig+0x2ac>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a90      	ldr	r2, [pc, #576]	; (800196c <HAL_RCC_OscConfig+0x2ac>)
 800172c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001730:	6013      	str	r3, [r2, #0]
 8001732:	e01d      	b.n	8001770 <HAL_RCC_OscConfig+0xb0>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800173c:	d10c      	bne.n	8001758 <HAL_RCC_OscConfig+0x98>
 800173e:	4b8b      	ldr	r3, [pc, #556]	; (800196c <HAL_RCC_OscConfig+0x2ac>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a8a      	ldr	r2, [pc, #552]	; (800196c <HAL_RCC_OscConfig+0x2ac>)
 8001744:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001748:	6013      	str	r3, [r2, #0]
 800174a:	4b88      	ldr	r3, [pc, #544]	; (800196c <HAL_RCC_OscConfig+0x2ac>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a87      	ldr	r2, [pc, #540]	; (800196c <HAL_RCC_OscConfig+0x2ac>)
 8001750:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001754:	6013      	str	r3, [r2, #0]
 8001756:	e00b      	b.n	8001770 <HAL_RCC_OscConfig+0xb0>
 8001758:	4b84      	ldr	r3, [pc, #528]	; (800196c <HAL_RCC_OscConfig+0x2ac>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a83      	ldr	r2, [pc, #524]	; (800196c <HAL_RCC_OscConfig+0x2ac>)
 800175e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001762:	6013      	str	r3, [r2, #0]
 8001764:	4b81      	ldr	r3, [pc, #516]	; (800196c <HAL_RCC_OscConfig+0x2ac>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a80      	ldr	r2, [pc, #512]	; (800196c <HAL_RCC_OscConfig+0x2ac>)
 800176a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800176e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d013      	beq.n	80017a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001778:	f7ff fc74 	bl	8001064 <HAL_GetTick>
 800177c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800177e:	e008      	b.n	8001792 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001780:	f7ff fc70 	bl	8001064 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b64      	cmp	r3, #100	; 0x64
 800178c:	d901      	bls.n	8001792 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e1fb      	b.n	8001b8a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001792:	4b76      	ldr	r3, [pc, #472]	; (800196c <HAL_RCC_OscConfig+0x2ac>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d0f0      	beq.n	8001780 <HAL_RCC_OscConfig+0xc0>
 800179e:	e014      	b.n	80017ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a0:	f7ff fc60 	bl	8001064 <HAL_GetTick>
 80017a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017a6:	e008      	b.n	80017ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017a8:	f7ff fc5c 	bl	8001064 <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	2b64      	cmp	r3, #100	; 0x64
 80017b4:	d901      	bls.n	80017ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e1e7      	b.n	8001b8a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ba:	4b6c      	ldr	r3, [pc, #432]	; (800196c <HAL_RCC_OscConfig+0x2ac>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d1f0      	bne.n	80017a8 <HAL_RCC_OscConfig+0xe8>
 80017c6:	e000      	b.n	80017ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d063      	beq.n	800189e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017d6:	4b65      	ldr	r3, [pc, #404]	; (800196c <HAL_RCC_OscConfig+0x2ac>)
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	f003 030c 	and.w	r3, r3, #12
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d00b      	beq.n	80017fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017e2:	4b62      	ldr	r3, [pc, #392]	; (800196c <HAL_RCC_OscConfig+0x2ac>)
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017ea:	2b08      	cmp	r3, #8
 80017ec:	d11c      	bne.n	8001828 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017ee:	4b5f      	ldr	r3, [pc, #380]	; (800196c <HAL_RCC_OscConfig+0x2ac>)
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d116      	bne.n	8001828 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017fa:	4b5c      	ldr	r3, [pc, #368]	; (800196c <HAL_RCC_OscConfig+0x2ac>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	2b00      	cmp	r3, #0
 8001804:	d005      	beq.n	8001812 <HAL_RCC_OscConfig+0x152>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	68db      	ldr	r3, [r3, #12]
 800180a:	2b01      	cmp	r3, #1
 800180c:	d001      	beq.n	8001812 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e1bb      	b.n	8001b8a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001812:	4b56      	ldr	r3, [pc, #344]	; (800196c <HAL_RCC_OscConfig+0x2ac>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	691b      	ldr	r3, [r3, #16]
 800181e:	00db      	lsls	r3, r3, #3
 8001820:	4952      	ldr	r1, [pc, #328]	; (800196c <HAL_RCC_OscConfig+0x2ac>)
 8001822:	4313      	orrs	r3, r2
 8001824:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001826:	e03a      	b.n	800189e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d020      	beq.n	8001872 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001830:	4b4f      	ldr	r3, [pc, #316]	; (8001970 <HAL_RCC_OscConfig+0x2b0>)
 8001832:	2201      	movs	r2, #1
 8001834:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001836:	f7ff fc15 	bl	8001064 <HAL_GetTick>
 800183a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800183c:	e008      	b.n	8001850 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800183e:	f7ff fc11 	bl	8001064 <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	2b02      	cmp	r3, #2
 800184a:	d901      	bls.n	8001850 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e19c      	b.n	8001b8a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001850:	4b46      	ldr	r3, [pc, #280]	; (800196c <HAL_RCC_OscConfig+0x2ac>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0302 	and.w	r3, r3, #2
 8001858:	2b00      	cmp	r3, #0
 800185a:	d0f0      	beq.n	800183e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800185c:	4b43      	ldr	r3, [pc, #268]	; (800196c <HAL_RCC_OscConfig+0x2ac>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	691b      	ldr	r3, [r3, #16]
 8001868:	00db      	lsls	r3, r3, #3
 800186a:	4940      	ldr	r1, [pc, #256]	; (800196c <HAL_RCC_OscConfig+0x2ac>)
 800186c:	4313      	orrs	r3, r2
 800186e:	600b      	str	r3, [r1, #0]
 8001870:	e015      	b.n	800189e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001872:	4b3f      	ldr	r3, [pc, #252]	; (8001970 <HAL_RCC_OscConfig+0x2b0>)
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001878:	f7ff fbf4 	bl	8001064 <HAL_GetTick>
 800187c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800187e:	e008      	b.n	8001892 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001880:	f7ff fbf0 	bl	8001064 <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	2b02      	cmp	r3, #2
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e17b      	b.n	8001b8a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001892:	4b36      	ldr	r3, [pc, #216]	; (800196c <HAL_RCC_OscConfig+0x2ac>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d1f0      	bne.n	8001880 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0308 	and.w	r3, r3, #8
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d030      	beq.n	800190c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	695b      	ldr	r3, [r3, #20]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d016      	beq.n	80018e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018b2:	4b30      	ldr	r3, [pc, #192]	; (8001974 <HAL_RCC_OscConfig+0x2b4>)
 80018b4:	2201      	movs	r2, #1
 80018b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018b8:	f7ff fbd4 	bl	8001064 <HAL_GetTick>
 80018bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018be:	e008      	b.n	80018d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018c0:	f7ff fbd0 	bl	8001064 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e15b      	b.n	8001b8a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018d2:	4b26      	ldr	r3, [pc, #152]	; (800196c <HAL_RCC_OscConfig+0x2ac>)
 80018d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018d6:	f003 0302 	and.w	r3, r3, #2
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d0f0      	beq.n	80018c0 <HAL_RCC_OscConfig+0x200>
 80018de:	e015      	b.n	800190c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018e0:	4b24      	ldr	r3, [pc, #144]	; (8001974 <HAL_RCC_OscConfig+0x2b4>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018e6:	f7ff fbbd 	bl	8001064 <HAL_GetTick>
 80018ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018ec:	e008      	b.n	8001900 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018ee:	f7ff fbb9 	bl	8001064 <HAL_GetTick>
 80018f2:	4602      	mov	r2, r0
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d901      	bls.n	8001900 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80018fc:	2303      	movs	r3, #3
 80018fe:	e144      	b.n	8001b8a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001900:	4b1a      	ldr	r3, [pc, #104]	; (800196c <HAL_RCC_OscConfig+0x2ac>)
 8001902:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001904:	f003 0302 	and.w	r3, r3, #2
 8001908:	2b00      	cmp	r3, #0
 800190a:	d1f0      	bne.n	80018ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 0304 	and.w	r3, r3, #4
 8001914:	2b00      	cmp	r3, #0
 8001916:	f000 80a0 	beq.w	8001a5a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800191a:	2300      	movs	r3, #0
 800191c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800191e:	4b13      	ldr	r3, [pc, #76]	; (800196c <HAL_RCC_OscConfig+0x2ac>)
 8001920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d10f      	bne.n	800194a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800192a:	2300      	movs	r3, #0
 800192c:	60bb      	str	r3, [r7, #8]
 800192e:	4b0f      	ldr	r3, [pc, #60]	; (800196c <HAL_RCC_OscConfig+0x2ac>)
 8001930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001932:	4a0e      	ldr	r2, [pc, #56]	; (800196c <HAL_RCC_OscConfig+0x2ac>)
 8001934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001938:	6413      	str	r3, [r2, #64]	; 0x40
 800193a:	4b0c      	ldr	r3, [pc, #48]	; (800196c <HAL_RCC_OscConfig+0x2ac>)
 800193c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001942:	60bb      	str	r3, [r7, #8]
 8001944:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001946:	2301      	movs	r3, #1
 8001948:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800194a:	4b0b      	ldr	r3, [pc, #44]	; (8001978 <HAL_RCC_OscConfig+0x2b8>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001952:	2b00      	cmp	r3, #0
 8001954:	d121      	bne.n	800199a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001956:	4b08      	ldr	r3, [pc, #32]	; (8001978 <HAL_RCC_OscConfig+0x2b8>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a07      	ldr	r2, [pc, #28]	; (8001978 <HAL_RCC_OscConfig+0x2b8>)
 800195c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001960:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001962:	f7ff fb7f 	bl	8001064 <HAL_GetTick>
 8001966:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001968:	e011      	b.n	800198e <HAL_RCC_OscConfig+0x2ce>
 800196a:	bf00      	nop
 800196c:	40023800 	.word	0x40023800
 8001970:	42470000 	.word	0x42470000
 8001974:	42470e80 	.word	0x42470e80
 8001978:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800197c:	f7ff fb72 	bl	8001064 <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	2b02      	cmp	r3, #2
 8001988:	d901      	bls.n	800198e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e0fd      	b.n	8001b8a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800198e:	4b81      	ldr	r3, [pc, #516]	; (8001b94 <HAL_RCC_OscConfig+0x4d4>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001996:	2b00      	cmp	r3, #0
 8001998:	d0f0      	beq.n	800197c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d106      	bne.n	80019b0 <HAL_RCC_OscConfig+0x2f0>
 80019a2:	4b7d      	ldr	r3, [pc, #500]	; (8001b98 <HAL_RCC_OscConfig+0x4d8>)
 80019a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019a6:	4a7c      	ldr	r2, [pc, #496]	; (8001b98 <HAL_RCC_OscConfig+0x4d8>)
 80019a8:	f043 0301 	orr.w	r3, r3, #1
 80019ac:	6713      	str	r3, [r2, #112]	; 0x70
 80019ae:	e01c      	b.n	80019ea <HAL_RCC_OscConfig+0x32a>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	2b05      	cmp	r3, #5
 80019b6:	d10c      	bne.n	80019d2 <HAL_RCC_OscConfig+0x312>
 80019b8:	4b77      	ldr	r3, [pc, #476]	; (8001b98 <HAL_RCC_OscConfig+0x4d8>)
 80019ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019bc:	4a76      	ldr	r2, [pc, #472]	; (8001b98 <HAL_RCC_OscConfig+0x4d8>)
 80019be:	f043 0304 	orr.w	r3, r3, #4
 80019c2:	6713      	str	r3, [r2, #112]	; 0x70
 80019c4:	4b74      	ldr	r3, [pc, #464]	; (8001b98 <HAL_RCC_OscConfig+0x4d8>)
 80019c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019c8:	4a73      	ldr	r2, [pc, #460]	; (8001b98 <HAL_RCC_OscConfig+0x4d8>)
 80019ca:	f043 0301 	orr.w	r3, r3, #1
 80019ce:	6713      	str	r3, [r2, #112]	; 0x70
 80019d0:	e00b      	b.n	80019ea <HAL_RCC_OscConfig+0x32a>
 80019d2:	4b71      	ldr	r3, [pc, #452]	; (8001b98 <HAL_RCC_OscConfig+0x4d8>)
 80019d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019d6:	4a70      	ldr	r2, [pc, #448]	; (8001b98 <HAL_RCC_OscConfig+0x4d8>)
 80019d8:	f023 0301 	bic.w	r3, r3, #1
 80019dc:	6713      	str	r3, [r2, #112]	; 0x70
 80019de:	4b6e      	ldr	r3, [pc, #440]	; (8001b98 <HAL_RCC_OscConfig+0x4d8>)
 80019e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019e2:	4a6d      	ldr	r2, [pc, #436]	; (8001b98 <HAL_RCC_OscConfig+0x4d8>)
 80019e4:	f023 0304 	bic.w	r3, r3, #4
 80019e8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d015      	beq.n	8001a1e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019f2:	f7ff fb37 	bl	8001064 <HAL_GetTick>
 80019f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019f8:	e00a      	b.n	8001a10 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019fa:	f7ff fb33 	bl	8001064 <HAL_GetTick>
 80019fe:	4602      	mov	r2, r0
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d901      	bls.n	8001a10 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	e0bc      	b.n	8001b8a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a10:	4b61      	ldr	r3, [pc, #388]	; (8001b98 <HAL_RCC_OscConfig+0x4d8>)
 8001a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a14:	f003 0302 	and.w	r3, r3, #2
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d0ee      	beq.n	80019fa <HAL_RCC_OscConfig+0x33a>
 8001a1c:	e014      	b.n	8001a48 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a1e:	f7ff fb21 	bl	8001064 <HAL_GetTick>
 8001a22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a24:	e00a      	b.n	8001a3c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a26:	f7ff fb1d 	bl	8001064 <HAL_GetTick>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d901      	bls.n	8001a3c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e0a6      	b.n	8001b8a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a3c:	4b56      	ldr	r3, [pc, #344]	; (8001b98 <HAL_RCC_OscConfig+0x4d8>)
 8001a3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a40:	f003 0302 	and.w	r3, r3, #2
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d1ee      	bne.n	8001a26 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a48:	7dfb      	ldrb	r3, [r7, #23]
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d105      	bne.n	8001a5a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a4e:	4b52      	ldr	r3, [pc, #328]	; (8001b98 <HAL_RCC_OscConfig+0x4d8>)
 8001a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a52:	4a51      	ldr	r2, [pc, #324]	; (8001b98 <HAL_RCC_OscConfig+0x4d8>)
 8001a54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a58:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	699b      	ldr	r3, [r3, #24]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	f000 8092 	beq.w	8001b88 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a64:	4b4c      	ldr	r3, [pc, #304]	; (8001b98 <HAL_RCC_OscConfig+0x4d8>)
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f003 030c 	and.w	r3, r3, #12
 8001a6c:	2b08      	cmp	r3, #8
 8001a6e:	d05c      	beq.n	8001b2a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d141      	bne.n	8001afc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a78:	4b48      	ldr	r3, [pc, #288]	; (8001b9c <HAL_RCC_OscConfig+0x4dc>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a7e:	f7ff faf1 	bl	8001064 <HAL_GetTick>
 8001a82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a84:	e008      	b.n	8001a98 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a86:	f7ff faed 	bl	8001064 <HAL_GetTick>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d901      	bls.n	8001a98 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e078      	b.n	8001b8a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a98:	4b3f      	ldr	r3, [pc, #252]	; (8001b98 <HAL_RCC_OscConfig+0x4d8>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d1f0      	bne.n	8001a86 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	69da      	ldr	r2, [r3, #28]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6a1b      	ldr	r3, [r3, #32]
 8001aac:	431a      	orrs	r2, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab2:	019b      	lsls	r3, r3, #6
 8001ab4:	431a      	orrs	r2, r3
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aba:	085b      	lsrs	r3, r3, #1
 8001abc:	3b01      	subs	r3, #1
 8001abe:	041b      	lsls	r3, r3, #16
 8001ac0:	431a      	orrs	r2, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac6:	061b      	lsls	r3, r3, #24
 8001ac8:	4933      	ldr	r1, [pc, #204]	; (8001b98 <HAL_RCC_OscConfig+0x4d8>)
 8001aca:	4313      	orrs	r3, r2
 8001acc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ace:	4b33      	ldr	r3, [pc, #204]	; (8001b9c <HAL_RCC_OscConfig+0x4dc>)
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad4:	f7ff fac6 	bl	8001064 <HAL_GetTick>
 8001ad8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ada:	e008      	b.n	8001aee <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001adc:	f7ff fac2 	bl	8001064 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e04d      	b.n	8001b8a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aee:	4b2a      	ldr	r3, [pc, #168]	; (8001b98 <HAL_RCC_OscConfig+0x4d8>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d0f0      	beq.n	8001adc <HAL_RCC_OscConfig+0x41c>
 8001afa:	e045      	b.n	8001b88 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001afc:	4b27      	ldr	r3, [pc, #156]	; (8001b9c <HAL_RCC_OscConfig+0x4dc>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b02:	f7ff faaf 	bl	8001064 <HAL_GetTick>
 8001b06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b08:	e008      	b.n	8001b1c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b0a:	f7ff faab 	bl	8001064 <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d901      	bls.n	8001b1c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e036      	b.n	8001b8a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b1c:	4b1e      	ldr	r3, [pc, #120]	; (8001b98 <HAL_RCC_OscConfig+0x4d8>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d1f0      	bne.n	8001b0a <HAL_RCC_OscConfig+0x44a>
 8001b28:	e02e      	b.n	8001b88 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	699b      	ldr	r3, [r3, #24]
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d101      	bne.n	8001b36 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e029      	b.n	8001b8a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b36:	4b18      	ldr	r3, [pc, #96]	; (8001b98 <HAL_RCC_OscConfig+0x4d8>)
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	69db      	ldr	r3, [r3, #28]
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d11c      	bne.n	8001b84 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d115      	bne.n	8001b84 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001b58:	68fa      	ldr	r2, [r7, #12]
 8001b5a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b5e:	4013      	ands	r3, r2
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d10d      	bne.n	8001b84 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d106      	bne.n	8001b84 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d001      	beq.n	8001b88 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e000      	b.n	8001b8a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3718      	adds	r7, #24
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	40007000 	.word	0x40007000
 8001b98:	40023800 	.word	0x40023800
 8001b9c:	42470060 	.word	0x42470060

08001ba0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d101      	bne.n	8001bb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e0cc      	b.n	8001d4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bb4:	4b68      	ldr	r3, [pc, #416]	; (8001d58 <HAL_RCC_ClockConfig+0x1b8>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 030f 	and.w	r3, r3, #15
 8001bbc:	683a      	ldr	r2, [r7, #0]
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d90c      	bls.n	8001bdc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bc2:	4b65      	ldr	r3, [pc, #404]	; (8001d58 <HAL_RCC_ClockConfig+0x1b8>)
 8001bc4:	683a      	ldr	r2, [r7, #0]
 8001bc6:	b2d2      	uxtb	r2, r2
 8001bc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bca:	4b63      	ldr	r3, [pc, #396]	; (8001d58 <HAL_RCC_ClockConfig+0x1b8>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 030f 	and.w	r3, r3, #15
 8001bd2:	683a      	ldr	r2, [r7, #0]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d001      	beq.n	8001bdc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e0b8      	b.n	8001d4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0302 	and.w	r3, r3, #2
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d020      	beq.n	8001c2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0304 	and.w	r3, r3, #4
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d005      	beq.n	8001c00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bf4:	4b59      	ldr	r3, [pc, #356]	; (8001d5c <HAL_RCC_ClockConfig+0x1bc>)
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	4a58      	ldr	r2, [pc, #352]	; (8001d5c <HAL_RCC_ClockConfig+0x1bc>)
 8001bfa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001bfe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0308 	and.w	r3, r3, #8
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d005      	beq.n	8001c18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c0c:	4b53      	ldr	r3, [pc, #332]	; (8001d5c <HAL_RCC_ClockConfig+0x1bc>)
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	4a52      	ldr	r2, [pc, #328]	; (8001d5c <HAL_RCC_ClockConfig+0x1bc>)
 8001c12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c18:	4b50      	ldr	r3, [pc, #320]	; (8001d5c <HAL_RCC_ClockConfig+0x1bc>)
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	494d      	ldr	r1, [pc, #308]	; (8001d5c <HAL_RCC_ClockConfig+0x1bc>)
 8001c26:	4313      	orrs	r3, r2
 8001c28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0301 	and.w	r3, r3, #1
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d044      	beq.n	8001cc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d107      	bne.n	8001c4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c3e:	4b47      	ldr	r3, [pc, #284]	; (8001d5c <HAL_RCC_ClockConfig+0x1bc>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d119      	bne.n	8001c7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e07f      	b.n	8001d4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d003      	beq.n	8001c5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c5a:	2b03      	cmp	r3, #3
 8001c5c:	d107      	bne.n	8001c6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c5e:	4b3f      	ldr	r3, [pc, #252]	; (8001d5c <HAL_RCC_ClockConfig+0x1bc>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d109      	bne.n	8001c7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e06f      	b.n	8001d4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c6e:	4b3b      	ldr	r3, [pc, #236]	; (8001d5c <HAL_RCC_ClockConfig+0x1bc>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d101      	bne.n	8001c7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e067      	b.n	8001d4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c7e:	4b37      	ldr	r3, [pc, #220]	; (8001d5c <HAL_RCC_ClockConfig+0x1bc>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f023 0203 	bic.w	r2, r3, #3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	4934      	ldr	r1, [pc, #208]	; (8001d5c <HAL_RCC_ClockConfig+0x1bc>)
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c90:	f7ff f9e8 	bl	8001064 <HAL_GetTick>
 8001c94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c96:	e00a      	b.n	8001cae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c98:	f7ff f9e4 	bl	8001064 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e04f      	b.n	8001d4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cae:	4b2b      	ldr	r3, [pc, #172]	; (8001d5c <HAL_RCC_ClockConfig+0x1bc>)
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	f003 020c 	and.w	r2, r3, #12
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d1eb      	bne.n	8001c98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cc0:	4b25      	ldr	r3, [pc, #148]	; (8001d58 <HAL_RCC_ClockConfig+0x1b8>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 030f 	and.w	r3, r3, #15
 8001cc8:	683a      	ldr	r2, [r7, #0]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d20c      	bcs.n	8001ce8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cce:	4b22      	ldr	r3, [pc, #136]	; (8001d58 <HAL_RCC_ClockConfig+0x1b8>)
 8001cd0:	683a      	ldr	r2, [r7, #0]
 8001cd2:	b2d2      	uxtb	r2, r2
 8001cd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cd6:	4b20      	ldr	r3, [pc, #128]	; (8001d58 <HAL_RCC_ClockConfig+0x1b8>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 030f 	and.w	r3, r3, #15
 8001cde:	683a      	ldr	r2, [r7, #0]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d001      	beq.n	8001ce8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e032      	b.n	8001d4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0304 	and.w	r3, r3, #4
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d008      	beq.n	8001d06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cf4:	4b19      	ldr	r3, [pc, #100]	; (8001d5c <HAL_RCC_ClockConfig+0x1bc>)
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	4916      	ldr	r1, [pc, #88]	; (8001d5c <HAL_RCC_ClockConfig+0x1bc>)
 8001d02:	4313      	orrs	r3, r2
 8001d04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0308 	and.w	r3, r3, #8
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d009      	beq.n	8001d26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d12:	4b12      	ldr	r3, [pc, #72]	; (8001d5c <HAL_RCC_ClockConfig+0x1bc>)
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	691b      	ldr	r3, [r3, #16]
 8001d1e:	00db      	lsls	r3, r3, #3
 8001d20:	490e      	ldr	r1, [pc, #56]	; (8001d5c <HAL_RCC_ClockConfig+0x1bc>)
 8001d22:	4313      	orrs	r3, r2
 8001d24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d26:	f000 f821 	bl	8001d6c <HAL_RCC_GetSysClockFreq>
 8001d2a:	4601      	mov	r1, r0
 8001d2c:	4b0b      	ldr	r3, [pc, #44]	; (8001d5c <HAL_RCC_ClockConfig+0x1bc>)
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	091b      	lsrs	r3, r3, #4
 8001d32:	f003 030f 	and.w	r3, r3, #15
 8001d36:	4a0a      	ldr	r2, [pc, #40]	; (8001d60 <HAL_RCC_ClockConfig+0x1c0>)
 8001d38:	5cd3      	ldrb	r3, [r2, r3]
 8001d3a:	fa21 f303 	lsr.w	r3, r1, r3
 8001d3e:	4a09      	ldr	r2, [pc, #36]	; (8001d64 <HAL_RCC_ClockConfig+0x1c4>)
 8001d40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d42:	4b09      	ldr	r3, [pc, #36]	; (8001d68 <HAL_RCC_ClockConfig+0x1c8>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7ff f948 	bl	8000fdc <HAL_InitTick>

  return HAL_OK;
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3710      	adds	r7, #16
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	40023c00 	.word	0x40023c00
 8001d5c:	40023800 	.word	0x40023800
 8001d60:	0800a2b0 	.word	0x0800a2b0
 8001d64:	20000228 	.word	0x20000228
 8001d68:	20000000 	.word	0x20000000

08001d6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001d72:	2300      	movs	r3, #0
 8001d74:	607b      	str	r3, [r7, #4]
 8001d76:	2300      	movs	r3, #0
 8001d78:	60fb      	str	r3, [r7, #12]
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d82:	4b50      	ldr	r3, [pc, #320]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0x158>)
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f003 030c 	and.w	r3, r3, #12
 8001d8a:	2b04      	cmp	r3, #4
 8001d8c:	d007      	beq.n	8001d9e <HAL_RCC_GetSysClockFreq+0x32>
 8001d8e:	2b08      	cmp	r3, #8
 8001d90:	d008      	beq.n	8001da4 <HAL_RCC_GetSysClockFreq+0x38>
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	f040 808d 	bne.w	8001eb2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d98:	4b4b      	ldr	r3, [pc, #300]	; (8001ec8 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001d9a:	60bb      	str	r3, [r7, #8]
       break;
 8001d9c:	e08c      	b.n	8001eb8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d9e:	4b4b      	ldr	r3, [pc, #300]	; (8001ecc <HAL_RCC_GetSysClockFreq+0x160>)
 8001da0:	60bb      	str	r3, [r7, #8]
      break;
 8001da2:	e089      	b.n	8001eb8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001da4:	4b47      	ldr	r3, [pc, #284]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0x158>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001dac:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001dae:	4b45      	ldr	r3, [pc, #276]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0x158>)
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d023      	beq.n	8001e02 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dba:	4b42      	ldr	r3, [pc, #264]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0x158>)
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	099b      	lsrs	r3, r3, #6
 8001dc0:	f04f 0400 	mov.w	r4, #0
 8001dc4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001dc8:	f04f 0200 	mov.w	r2, #0
 8001dcc:	ea03 0501 	and.w	r5, r3, r1
 8001dd0:	ea04 0602 	and.w	r6, r4, r2
 8001dd4:	4a3d      	ldr	r2, [pc, #244]	; (8001ecc <HAL_RCC_GetSysClockFreq+0x160>)
 8001dd6:	fb02 f106 	mul.w	r1, r2, r6
 8001dda:	2200      	movs	r2, #0
 8001ddc:	fb02 f205 	mul.w	r2, r2, r5
 8001de0:	440a      	add	r2, r1
 8001de2:	493a      	ldr	r1, [pc, #232]	; (8001ecc <HAL_RCC_GetSysClockFreq+0x160>)
 8001de4:	fba5 0101 	umull	r0, r1, r5, r1
 8001de8:	1853      	adds	r3, r2, r1
 8001dea:	4619      	mov	r1, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f04f 0400 	mov.w	r4, #0
 8001df2:	461a      	mov	r2, r3
 8001df4:	4623      	mov	r3, r4
 8001df6:	f7fe ff4f 	bl	8000c98 <__aeabi_uldivmod>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	460c      	mov	r4, r1
 8001dfe:	60fb      	str	r3, [r7, #12]
 8001e00:	e049      	b.n	8001e96 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e02:	4b30      	ldr	r3, [pc, #192]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0x158>)
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	099b      	lsrs	r3, r3, #6
 8001e08:	f04f 0400 	mov.w	r4, #0
 8001e0c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001e10:	f04f 0200 	mov.w	r2, #0
 8001e14:	ea03 0501 	and.w	r5, r3, r1
 8001e18:	ea04 0602 	and.w	r6, r4, r2
 8001e1c:	4629      	mov	r1, r5
 8001e1e:	4632      	mov	r2, r6
 8001e20:	f04f 0300 	mov.w	r3, #0
 8001e24:	f04f 0400 	mov.w	r4, #0
 8001e28:	0154      	lsls	r4, r2, #5
 8001e2a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001e2e:	014b      	lsls	r3, r1, #5
 8001e30:	4619      	mov	r1, r3
 8001e32:	4622      	mov	r2, r4
 8001e34:	1b49      	subs	r1, r1, r5
 8001e36:	eb62 0206 	sbc.w	r2, r2, r6
 8001e3a:	f04f 0300 	mov.w	r3, #0
 8001e3e:	f04f 0400 	mov.w	r4, #0
 8001e42:	0194      	lsls	r4, r2, #6
 8001e44:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001e48:	018b      	lsls	r3, r1, #6
 8001e4a:	1a5b      	subs	r3, r3, r1
 8001e4c:	eb64 0402 	sbc.w	r4, r4, r2
 8001e50:	f04f 0100 	mov.w	r1, #0
 8001e54:	f04f 0200 	mov.w	r2, #0
 8001e58:	00e2      	lsls	r2, r4, #3
 8001e5a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001e5e:	00d9      	lsls	r1, r3, #3
 8001e60:	460b      	mov	r3, r1
 8001e62:	4614      	mov	r4, r2
 8001e64:	195b      	adds	r3, r3, r5
 8001e66:	eb44 0406 	adc.w	r4, r4, r6
 8001e6a:	f04f 0100 	mov.w	r1, #0
 8001e6e:	f04f 0200 	mov.w	r2, #0
 8001e72:	02a2      	lsls	r2, r4, #10
 8001e74:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001e78:	0299      	lsls	r1, r3, #10
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	4614      	mov	r4, r2
 8001e7e:	4618      	mov	r0, r3
 8001e80:	4621      	mov	r1, r4
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f04f 0400 	mov.w	r4, #0
 8001e88:	461a      	mov	r2, r3
 8001e8a:	4623      	mov	r3, r4
 8001e8c:	f7fe ff04 	bl	8000c98 <__aeabi_uldivmod>
 8001e90:	4603      	mov	r3, r0
 8001e92:	460c      	mov	r4, r1
 8001e94:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e96:	4b0b      	ldr	r3, [pc, #44]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0x158>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	0c1b      	lsrs	r3, r3, #16
 8001e9c:	f003 0303 	and.w	r3, r3, #3
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001ea6:	68fa      	ldr	r2, [r7, #12]
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eae:	60bb      	str	r3, [r7, #8]
      break;
 8001eb0:	e002      	b.n	8001eb8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001eb2:	4b05      	ldr	r3, [pc, #20]	; (8001ec8 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001eb4:	60bb      	str	r3, [r7, #8]
      break;
 8001eb6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001eb8:	68bb      	ldr	r3, [r7, #8]
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3714      	adds	r7, #20
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	40023800 	.word	0x40023800
 8001ec8:	00f42400 	.word	0x00f42400
 8001ecc:	017d7840 	.word	0x017d7840

08001ed0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ed4:	4b03      	ldr	r3, [pc, #12]	; (8001ee4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	20000228 	.word	0x20000228

08001ee8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001eec:	f7ff fff0 	bl	8001ed0 <HAL_RCC_GetHCLKFreq>
 8001ef0:	4601      	mov	r1, r0
 8001ef2:	4b05      	ldr	r3, [pc, #20]	; (8001f08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	0a9b      	lsrs	r3, r3, #10
 8001ef8:	f003 0307 	and.w	r3, r3, #7
 8001efc:	4a03      	ldr	r2, [pc, #12]	; (8001f0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001efe:	5cd3      	ldrb	r3, [r2, r3]
 8001f00:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	40023800 	.word	0x40023800
 8001f0c:	0800a2c0 	.word	0x0800a2c0

08001f10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001f14:	f7ff ffdc 	bl	8001ed0 <HAL_RCC_GetHCLKFreq>
 8001f18:	4601      	mov	r1, r0
 8001f1a:	4b05      	ldr	r3, [pc, #20]	; (8001f30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	0b5b      	lsrs	r3, r3, #13
 8001f20:	f003 0307 	and.w	r3, r3, #7
 8001f24:	4a03      	ldr	r2, [pc, #12]	; (8001f34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f26:	5cd3      	ldrb	r3, [r2, r3]
 8001f28:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	40023800 	.word	0x40023800
 8001f34:	0800a2c0 	.word	0x0800a2c0

08001f38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d101      	bne.n	8001f4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e01d      	b.n	8001f86 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d106      	bne.n	8001f64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f003 fe02 	bl	8005b68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2202      	movs	r2, #2
 8001f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	3304      	adds	r3, #4
 8001f74:	4619      	mov	r1, r3
 8001f76:	4610      	mov	r0, r2
 8001f78:	f000 fa64 	bl	8002444 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}

08001f8e <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	b085      	sub	sp, #20
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2202      	movs	r2, #2
 8001f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	f003 0307 	and.w	r3, r3, #7
 8001fa8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2b06      	cmp	r3, #6
 8001fae:	d007      	beq.n	8001fc0 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f042 0201 	orr.w	r2, r2, #1
 8001fbe:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3714      	adds	r7, #20
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr

08001fd6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	b085      	sub	sp, #20
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	68da      	ldr	r2, [r3, #12]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f042 0201 	orr.w	r2, r2, #1
 8001fec:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	f003 0307 	and.w	r3, r3, #7
 8001ff8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2b06      	cmp	r3, #6
 8001ffe:	d007      	beq.n	8002010 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f042 0201 	orr.w	r2, r2, #1
 800200e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3714      	adds	r7, #20
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr

0800201e <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800201e:	b480      	push	{r7}
 8002020:	b083      	sub	sp, #12
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	68da      	ldr	r2, [r3, #12]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f022 0201 	bic.w	r2, r2, #1
 8002034:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	6a1a      	ldr	r2, [r3, #32]
 800203c:	f241 1311 	movw	r3, #4369	; 0x1111
 8002040:	4013      	ands	r3, r2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d10f      	bne.n	8002066 <HAL_TIM_Base_Stop_IT+0x48>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	6a1a      	ldr	r2, [r3, #32]
 800204c:	f240 4344 	movw	r3, #1092	; 0x444
 8002050:	4013      	ands	r3, r2
 8002052:	2b00      	cmp	r3, #0
 8002054:	d107      	bne.n	8002066 <HAL_TIM_Base_Stop_IT+0x48>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f022 0201 	bic.w	r2, r2, #1
 8002064:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002066:	2300      	movs	r3, #0
}
 8002068:	4618      	mov	r0, r3
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	691b      	ldr	r3, [r3, #16]
 8002082:	f003 0302 	and.w	r3, r3, #2
 8002086:	2b02      	cmp	r3, #2
 8002088:	d122      	bne.n	80020d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	f003 0302 	and.w	r3, r3, #2
 8002094:	2b02      	cmp	r3, #2
 8002096:	d11b      	bne.n	80020d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f06f 0202 	mvn.w	r2, #2
 80020a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2201      	movs	r2, #1
 80020a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	699b      	ldr	r3, [r3, #24]
 80020ae:	f003 0303 	and.w	r3, r3, #3
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d003      	beq.n	80020be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f000 f9a5 	bl	8002406 <HAL_TIM_IC_CaptureCallback>
 80020bc:	e005      	b.n	80020ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f000 f997 	bl	80023f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f000 f9a8 	bl	800241a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	f003 0304 	and.w	r3, r3, #4
 80020da:	2b04      	cmp	r3, #4
 80020dc:	d122      	bne.n	8002124 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	f003 0304 	and.w	r3, r3, #4
 80020e8:	2b04      	cmp	r3, #4
 80020ea:	d11b      	bne.n	8002124 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f06f 0204 	mvn.w	r2, #4
 80020f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2202      	movs	r2, #2
 80020fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	699b      	ldr	r3, [r3, #24]
 8002102:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002106:	2b00      	cmp	r3, #0
 8002108:	d003      	beq.n	8002112 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f000 f97b 	bl	8002406 <HAL_TIM_IC_CaptureCallback>
 8002110:	e005      	b.n	800211e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f000 f96d 	bl	80023f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f000 f97e 	bl	800241a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	691b      	ldr	r3, [r3, #16]
 800212a:	f003 0308 	and.w	r3, r3, #8
 800212e:	2b08      	cmp	r3, #8
 8002130:	d122      	bne.n	8002178 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	f003 0308 	and.w	r3, r3, #8
 800213c:	2b08      	cmp	r3, #8
 800213e:	d11b      	bne.n	8002178 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f06f 0208 	mvn.w	r2, #8
 8002148:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2204      	movs	r2, #4
 800214e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	69db      	ldr	r3, [r3, #28]
 8002156:	f003 0303 	and.w	r3, r3, #3
 800215a:	2b00      	cmp	r3, #0
 800215c:	d003      	beq.n	8002166 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f000 f951 	bl	8002406 <HAL_TIM_IC_CaptureCallback>
 8002164:	e005      	b.n	8002172 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f000 f943 	bl	80023f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f000 f954 	bl	800241a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	691b      	ldr	r3, [r3, #16]
 800217e:	f003 0310 	and.w	r3, r3, #16
 8002182:	2b10      	cmp	r3, #16
 8002184:	d122      	bne.n	80021cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	f003 0310 	and.w	r3, r3, #16
 8002190:	2b10      	cmp	r3, #16
 8002192:	d11b      	bne.n	80021cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f06f 0210 	mvn.w	r2, #16
 800219c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2208      	movs	r2, #8
 80021a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	69db      	ldr	r3, [r3, #28]
 80021aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d003      	beq.n	80021ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f000 f927 	bl	8002406 <HAL_TIM_IC_CaptureCallback>
 80021b8:	e005      	b.n	80021c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f000 f919 	bl	80023f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f000 f92a 	bl	800241a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d10e      	bne.n	80021f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	f003 0301 	and.w	r3, r3, #1
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d107      	bne.n	80021f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f06f 0201 	mvn.w	r2, #1
 80021f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f002 fe2c 	bl	8004e50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002202:	2b80      	cmp	r3, #128	; 0x80
 8002204:	d10e      	bne.n	8002224 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002210:	2b80      	cmp	r3, #128	; 0x80
 8002212:	d107      	bne.n	8002224 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800221c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f000 faa2 	bl	8002768 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800222e:	2b40      	cmp	r3, #64	; 0x40
 8002230:	d10e      	bne.n	8002250 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800223c:	2b40      	cmp	r3, #64	; 0x40
 800223e:	d107      	bne.n	8002250 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002248:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f000 f8ef 	bl	800242e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	691b      	ldr	r3, [r3, #16]
 8002256:	f003 0320 	and.w	r3, r3, #32
 800225a:	2b20      	cmp	r3, #32
 800225c:	d10e      	bne.n	800227c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	f003 0320 	and.w	r3, r3, #32
 8002268:	2b20      	cmp	r3, #32
 800226a:	d107      	bne.n	800227c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f06f 0220 	mvn.w	r2, #32
 8002274:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f000 fa6c 	bl	8002754 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800227c:	bf00      	nop
 800227e:	3708      	adds	r7, #8
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}

08002284 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002294:	2b01      	cmp	r3, #1
 8002296:	d101      	bne.n	800229c <HAL_TIM_ConfigClockSource+0x18>
 8002298:	2302      	movs	r3, #2
 800229a:	e0a6      	b.n	80023ea <HAL_TIM_ConfigClockSource+0x166>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2202      	movs	r2, #2
 80022a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80022ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80022c2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	68fa      	ldr	r2, [r7, #12]
 80022ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2b40      	cmp	r3, #64	; 0x40
 80022d2:	d067      	beq.n	80023a4 <HAL_TIM_ConfigClockSource+0x120>
 80022d4:	2b40      	cmp	r3, #64	; 0x40
 80022d6:	d80b      	bhi.n	80022f0 <HAL_TIM_ConfigClockSource+0x6c>
 80022d8:	2b10      	cmp	r3, #16
 80022da:	d073      	beq.n	80023c4 <HAL_TIM_ConfigClockSource+0x140>
 80022dc:	2b10      	cmp	r3, #16
 80022de:	d802      	bhi.n	80022e6 <HAL_TIM_ConfigClockSource+0x62>
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d06f      	beq.n	80023c4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80022e4:	e078      	b.n	80023d8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80022e6:	2b20      	cmp	r3, #32
 80022e8:	d06c      	beq.n	80023c4 <HAL_TIM_ConfigClockSource+0x140>
 80022ea:	2b30      	cmp	r3, #48	; 0x30
 80022ec:	d06a      	beq.n	80023c4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80022ee:	e073      	b.n	80023d8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80022f0:	2b70      	cmp	r3, #112	; 0x70
 80022f2:	d00d      	beq.n	8002310 <HAL_TIM_ConfigClockSource+0x8c>
 80022f4:	2b70      	cmp	r3, #112	; 0x70
 80022f6:	d804      	bhi.n	8002302 <HAL_TIM_ConfigClockSource+0x7e>
 80022f8:	2b50      	cmp	r3, #80	; 0x50
 80022fa:	d033      	beq.n	8002364 <HAL_TIM_ConfigClockSource+0xe0>
 80022fc:	2b60      	cmp	r3, #96	; 0x60
 80022fe:	d041      	beq.n	8002384 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002300:	e06a      	b.n	80023d8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002302:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002306:	d066      	beq.n	80023d6 <HAL_TIM_ConfigClockSource+0x152>
 8002308:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800230c:	d017      	beq.n	800233e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800230e:	e063      	b.n	80023d8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6818      	ldr	r0, [r3, #0]
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	6899      	ldr	r1, [r3, #8]
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685a      	ldr	r2, [r3, #4]
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	f000 f98a 	bl	8002638 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002332:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	68fa      	ldr	r2, [r7, #12]
 800233a:	609a      	str	r2, [r3, #8]
      break;
 800233c:	e04c      	b.n	80023d8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6818      	ldr	r0, [r3, #0]
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	6899      	ldr	r1, [r3, #8]
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685a      	ldr	r2, [r3, #4]
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	f000 f973 	bl	8002638 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	689a      	ldr	r2, [r3, #8]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002360:	609a      	str	r2, [r3, #8]
      break;
 8002362:	e039      	b.n	80023d8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6818      	ldr	r0, [r3, #0]
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	6859      	ldr	r1, [r3, #4]
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	461a      	mov	r2, r3
 8002372:	f000 f8e7 	bl	8002544 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2150      	movs	r1, #80	; 0x50
 800237c:	4618      	mov	r0, r3
 800237e:	f000 f940 	bl	8002602 <TIM_ITRx_SetConfig>
      break;
 8002382:	e029      	b.n	80023d8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6818      	ldr	r0, [r3, #0]
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	6859      	ldr	r1, [r3, #4]
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	461a      	mov	r2, r3
 8002392:	f000 f906 	bl	80025a2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2160      	movs	r1, #96	; 0x60
 800239c:	4618      	mov	r0, r3
 800239e:	f000 f930 	bl	8002602 <TIM_ITRx_SetConfig>
      break;
 80023a2:	e019      	b.n	80023d8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6818      	ldr	r0, [r3, #0]
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	6859      	ldr	r1, [r3, #4]
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	461a      	mov	r2, r3
 80023b2:	f000 f8c7 	bl	8002544 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	2140      	movs	r1, #64	; 0x40
 80023bc:	4618      	mov	r0, r3
 80023be:	f000 f920 	bl	8002602 <TIM_ITRx_SetConfig>
      break;
 80023c2:	e009      	b.n	80023d8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4619      	mov	r1, r3
 80023ce:	4610      	mov	r0, r2
 80023d0:	f000 f917 	bl	8002602 <TIM_ITRx_SetConfig>
      break;
 80023d4:	e000      	b.n	80023d8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80023d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2201      	movs	r2, #1
 80023dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3710      	adds	r7, #16
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}

080023f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023f2:	b480      	push	{r7}
 80023f4:	b083      	sub	sp, #12
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80023fa:	bf00      	nop
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr

08002406 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002406:	b480      	push	{r7}
 8002408:	b083      	sub	sp, #12
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800240e:	bf00      	nop
 8002410:	370c      	adds	r7, #12
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr

0800241a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800241a:	b480      	push	{r7}
 800241c:	b083      	sub	sp, #12
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002422:	bf00      	nop
 8002424:	370c      	adds	r7, #12
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr

0800242e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800242e:	b480      	push	{r7}
 8002430:	b083      	sub	sp, #12
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002436:	bf00      	nop
 8002438:	370c      	adds	r7, #12
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
	...

08002444 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002444:	b480      	push	{r7}
 8002446:	b085      	sub	sp, #20
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4a34      	ldr	r2, [pc, #208]	; (8002528 <TIM_Base_SetConfig+0xe4>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d00f      	beq.n	800247c <TIM_Base_SetConfig+0x38>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002462:	d00b      	beq.n	800247c <TIM_Base_SetConfig+0x38>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4a31      	ldr	r2, [pc, #196]	; (800252c <TIM_Base_SetConfig+0xe8>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d007      	beq.n	800247c <TIM_Base_SetConfig+0x38>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	4a30      	ldr	r2, [pc, #192]	; (8002530 <TIM_Base_SetConfig+0xec>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d003      	beq.n	800247c <TIM_Base_SetConfig+0x38>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4a2f      	ldr	r2, [pc, #188]	; (8002534 <TIM_Base_SetConfig+0xf0>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d108      	bne.n	800248e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002482:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	68fa      	ldr	r2, [r7, #12]
 800248a:	4313      	orrs	r3, r2
 800248c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a25      	ldr	r2, [pc, #148]	; (8002528 <TIM_Base_SetConfig+0xe4>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d01b      	beq.n	80024ce <TIM_Base_SetConfig+0x8a>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800249c:	d017      	beq.n	80024ce <TIM_Base_SetConfig+0x8a>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a22      	ldr	r2, [pc, #136]	; (800252c <TIM_Base_SetConfig+0xe8>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d013      	beq.n	80024ce <TIM_Base_SetConfig+0x8a>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a21      	ldr	r2, [pc, #132]	; (8002530 <TIM_Base_SetConfig+0xec>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d00f      	beq.n	80024ce <TIM_Base_SetConfig+0x8a>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a20      	ldr	r2, [pc, #128]	; (8002534 <TIM_Base_SetConfig+0xf0>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d00b      	beq.n	80024ce <TIM_Base_SetConfig+0x8a>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a1f      	ldr	r2, [pc, #124]	; (8002538 <TIM_Base_SetConfig+0xf4>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d007      	beq.n	80024ce <TIM_Base_SetConfig+0x8a>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a1e      	ldr	r2, [pc, #120]	; (800253c <TIM_Base_SetConfig+0xf8>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d003      	beq.n	80024ce <TIM_Base_SetConfig+0x8a>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a1d      	ldr	r2, [pc, #116]	; (8002540 <TIM_Base_SetConfig+0xfc>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d108      	bne.n	80024e0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	68fa      	ldr	r2, [r7, #12]
 80024dc:	4313      	orrs	r3, r2
 80024de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	695b      	ldr	r3, [r3, #20]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	68fa      	ldr	r2, [r7, #12]
 80024f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	689a      	ldr	r2, [r3, #8]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	4a08      	ldr	r2, [pc, #32]	; (8002528 <TIM_Base_SetConfig+0xe4>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d103      	bne.n	8002514 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	691a      	ldr	r2, [r3, #16]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2201      	movs	r2, #1
 8002518:	615a      	str	r2, [r3, #20]
}
 800251a:	bf00      	nop
 800251c:	3714      	adds	r7, #20
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	40010000 	.word	0x40010000
 800252c:	40000400 	.word	0x40000400
 8002530:	40000800 	.word	0x40000800
 8002534:	40000c00 	.word	0x40000c00
 8002538:	40014000 	.word	0x40014000
 800253c:	40014400 	.word	0x40014400
 8002540:	40014800 	.word	0x40014800

08002544 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002544:	b480      	push	{r7}
 8002546:	b087      	sub	sp, #28
 8002548:	af00      	add	r7, sp, #0
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	60b9      	str	r1, [r7, #8]
 800254e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6a1b      	ldr	r3, [r3, #32]
 8002554:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6a1b      	ldr	r3, [r3, #32]
 800255a:	f023 0201 	bic.w	r2, r3, #1
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	699b      	ldr	r3, [r3, #24]
 8002566:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800256e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	011b      	lsls	r3, r3, #4
 8002574:	693a      	ldr	r2, [r7, #16]
 8002576:	4313      	orrs	r3, r2
 8002578:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	f023 030a 	bic.w	r3, r3, #10
 8002580:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002582:	697a      	ldr	r2, [r7, #20]
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	4313      	orrs	r3, r2
 8002588:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	693a      	ldr	r2, [r7, #16]
 800258e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	697a      	ldr	r2, [r7, #20]
 8002594:	621a      	str	r2, [r3, #32]
}
 8002596:	bf00      	nop
 8002598:	371c      	adds	r7, #28
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr

080025a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025a2:	b480      	push	{r7}
 80025a4:	b087      	sub	sp, #28
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	60f8      	str	r0, [r7, #12]
 80025aa:	60b9      	str	r1, [r7, #8]
 80025ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6a1b      	ldr	r3, [r3, #32]
 80025b2:	f023 0210 	bic.w	r2, r3, #16
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	699b      	ldr	r3, [r3, #24]
 80025be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	6a1b      	ldr	r3, [r3, #32]
 80025c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80025cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	031b      	lsls	r3, r3, #12
 80025d2:	697a      	ldr	r2, [r7, #20]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80025de:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	011b      	lsls	r3, r3, #4
 80025e4:	693a      	ldr	r2, [r7, #16]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	697a      	ldr	r2, [r7, #20]
 80025ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	693a      	ldr	r2, [r7, #16]
 80025f4:	621a      	str	r2, [r3, #32]
}
 80025f6:	bf00      	nop
 80025f8:	371c      	adds	r7, #28
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr

08002602 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002602:	b480      	push	{r7}
 8002604:	b085      	sub	sp, #20
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
 800260a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002618:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800261a:	683a      	ldr	r2, [r7, #0]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	4313      	orrs	r3, r2
 8002620:	f043 0307 	orr.w	r3, r3, #7
 8002624:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	68fa      	ldr	r2, [r7, #12]
 800262a:	609a      	str	r2, [r3, #8]
}
 800262c:	bf00      	nop
 800262e:	3714      	adds	r7, #20
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr

08002638 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002638:	b480      	push	{r7}
 800263a:	b087      	sub	sp, #28
 800263c:	af00      	add	r7, sp, #0
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	60b9      	str	r1, [r7, #8]
 8002642:	607a      	str	r2, [r7, #4]
 8002644:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002652:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	021a      	lsls	r2, r3, #8
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	431a      	orrs	r2, r3
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	4313      	orrs	r3, r2
 8002660:	697a      	ldr	r2, [r7, #20]
 8002662:	4313      	orrs	r3, r2
 8002664:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	697a      	ldr	r2, [r7, #20]
 800266a:	609a      	str	r2, [r3, #8]
}
 800266c:	bf00      	nop
 800266e:	371c      	adds	r7, #28
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002678:	b480      	push	{r7}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002688:	2b01      	cmp	r3, #1
 800268a:	d101      	bne.n	8002690 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800268c:	2302      	movs	r3, #2
 800268e:	e050      	b.n	8002732 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2202      	movs	r2, #2
 800269c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	68fa      	ldr	r2, [r7, #12]
 80026be:	4313      	orrs	r3, r2
 80026c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	68fa      	ldr	r2, [r7, #12]
 80026c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a1c      	ldr	r2, [pc, #112]	; (8002740 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d018      	beq.n	8002706 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026dc:	d013      	beq.n	8002706 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a18      	ldr	r2, [pc, #96]	; (8002744 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d00e      	beq.n	8002706 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a16      	ldr	r2, [pc, #88]	; (8002748 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d009      	beq.n	8002706 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a15      	ldr	r2, [pc, #84]	; (800274c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d004      	beq.n	8002706 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a13      	ldr	r2, [pc, #76]	; (8002750 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d10c      	bne.n	8002720 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800270c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	68ba      	ldr	r2, [r7, #8]
 8002714:	4313      	orrs	r3, r2
 8002716:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	68ba      	ldr	r2, [r7, #8]
 800271e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2201      	movs	r2, #1
 8002724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3714      	adds	r7, #20
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	40010000 	.word	0x40010000
 8002744:	40000400 	.word	0x40000400
 8002748:	40000800 	.word	0x40000800
 800274c:	40000c00 	.word	0x40000c00
 8002750:	40014000 	.word	0x40014000

08002754 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800275c:	bf00      	nop
 800275e:	370c      	adds	r7, #12
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr

08002768 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002770:	bf00      	nop
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr

0800277c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d101      	bne.n	800278e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e03f      	b.n	800280e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002794:	b2db      	uxtb	r3, r3
 8002796:	2b00      	cmp	r3, #0
 8002798:	d106      	bne.n	80027a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f003 fa42 	bl	8005c2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2224      	movs	r2, #36	; 0x24
 80027ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	68da      	ldr	r2, [r3, #12]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f000 fb97 	bl	8002ef4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	691a      	ldr	r2, [r3, #16]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80027d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	695a      	ldr	r2, [r3, #20]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	68da      	ldr	r2, [r3, #12]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2220      	movs	r2, #32
 8002800:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2220      	movs	r2, #32
 8002808:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	3708      	adds	r7, #8
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}

08002816 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002816:	b580      	push	{r7, lr}
 8002818:	b088      	sub	sp, #32
 800281a:	af02      	add	r7, sp, #8
 800281c:	60f8      	str	r0, [r7, #12]
 800281e:	60b9      	str	r1, [r7, #8]
 8002820:	603b      	str	r3, [r7, #0]
 8002822:	4613      	mov	r3, r2
 8002824:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002826:	2300      	movs	r3, #0
 8002828:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002830:	b2db      	uxtb	r3, r3
 8002832:	2b20      	cmp	r3, #32
 8002834:	f040 8083 	bne.w	800293e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d002      	beq.n	8002844 <HAL_UART_Transmit+0x2e>
 800283e:	88fb      	ldrh	r3, [r7, #6]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d101      	bne.n	8002848 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e07b      	b.n	8002940 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800284e:	2b01      	cmp	r3, #1
 8002850:	d101      	bne.n	8002856 <HAL_UART_Transmit+0x40>
 8002852:	2302      	movs	r3, #2
 8002854:	e074      	b.n	8002940 <HAL_UART_Transmit+0x12a>
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2201      	movs	r2, #1
 800285a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2200      	movs	r2, #0
 8002862:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2221      	movs	r2, #33	; 0x21
 8002868:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800286c:	f7fe fbfa 	bl	8001064 <HAL_GetTick>
 8002870:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	88fa      	ldrh	r2, [r7, #6]
 8002876:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	88fa      	ldrh	r2, [r7, #6]
 800287c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002886:	e042      	b.n	800290e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800288c:	b29b      	uxth	r3, r3
 800288e:	3b01      	subs	r3, #1
 8002890:	b29a      	uxth	r2, r3
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800289e:	d122      	bne.n	80028e6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	9300      	str	r3, [sp, #0]
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	2200      	movs	r2, #0
 80028a8:	2180      	movs	r1, #128	; 0x80
 80028aa:	68f8      	ldr	r0, [r7, #12]
 80028ac:	f000 f9b6 	bl	8002c1c <UART_WaitOnFlagUntilTimeout>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d001      	beq.n	80028ba <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e042      	b.n	8002940 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	881b      	ldrh	r3, [r3, #0]
 80028c2:	461a      	mov	r2, r3
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028cc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	691b      	ldr	r3, [r3, #16]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d103      	bne.n	80028de <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	3302      	adds	r3, #2
 80028da:	60bb      	str	r3, [r7, #8]
 80028dc:	e017      	b.n	800290e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	3301      	adds	r3, #1
 80028e2:	60bb      	str	r3, [r7, #8]
 80028e4:	e013      	b.n	800290e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	9300      	str	r3, [sp, #0]
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	2200      	movs	r2, #0
 80028ee:	2180      	movs	r1, #128	; 0x80
 80028f0:	68f8      	ldr	r0, [r7, #12]
 80028f2:	f000 f993 	bl	8002c1c <UART_WaitOnFlagUntilTimeout>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d001      	beq.n	8002900 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	e01f      	b.n	8002940 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	1c5a      	adds	r2, r3, #1
 8002904:	60ba      	str	r2, [r7, #8]
 8002906:	781a      	ldrb	r2, [r3, #0]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002912:	b29b      	uxth	r3, r3
 8002914:	2b00      	cmp	r3, #0
 8002916:	d1b7      	bne.n	8002888 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	9300      	str	r3, [sp, #0]
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	2200      	movs	r2, #0
 8002920:	2140      	movs	r1, #64	; 0x40
 8002922:	68f8      	ldr	r0, [r7, #12]
 8002924:	f000 f97a 	bl	8002c1c <UART_WaitOnFlagUntilTimeout>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e006      	b.n	8002940 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2220      	movs	r2, #32
 8002936:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800293a:	2300      	movs	r3, #0
 800293c:	e000      	b.n	8002940 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800293e:	2302      	movs	r3, #2
  }
}
 8002940:	4618      	mov	r0, r3
 8002942:	3718      	adds	r7, #24
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002948:	b480      	push	{r7}
 800294a:	b085      	sub	sp, #20
 800294c:	af00      	add	r7, sp, #0
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	60b9      	str	r1, [r7, #8]
 8002952:	4613      	mov	r3, r2
 8002954:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800295c:	b2db      	uxtb	r3, r3
 800295e:	2b20      	cmp	r3, #32
 8002960:	d140      	bne.n	80029e4 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d002      	beq.n	800296e <HAL_UART_Receive_IT+0x26>
 8002968:	88fb      	ldrh	r3, [r7, #6]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d101      	bne.n	8002972 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e039      	b.n	80029e6 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002978:	2b01      	cmp	r3, #1
 800297a:	d101      	bne.n	8002980 <HAL_UART_Receive_IT+0x38>
 800297c:	2302      	movs	r3, #2
 800297e:	e032      	b.n	80029e6 <HAL_UART_Receive_IT+0x9e>
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	68ba      	ldr	r2, [r7, #8]
 800298c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	88fa      	ldrh	r2, [r7, #6]
 8002992:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	88fa      	ldrh	r2, [r7, #6]
 8002998:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2200      	movs	r2, #0
 800299e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2222      	movs	r2, #34	; 0x22
 80029a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68da      	ldr	r2, [r3, #12]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029be:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	695a      	ldr	r2, [r3, #20]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f042 0201 	orr.w	r2, r2, #1
 80029ce:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	68da      	ldr	r2, [r3, #12]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f042 0220 	orr.w	r2, r2, #32
 80029de:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80029e0:	2300      	movs	r3, #0
 80029e2:	e000      	b.n	80029e6 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80029e4:	2302      	movs	r3, #2
  }
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3714      	adds	r7, #20
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
	...

080029f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b088      	sub	sp, #32
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	695b      	ldr	r3, [r3, #20]
 8002a12:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002a14:	2300      	movs	r3, #0
 8002a16:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	f003 030f 	and.w	r3, r3, #15
 8002a22:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d10d      	bne.n	8002a46 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	f003 0320 	and.w	r3, r3, #32
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d008      	beq.n	8002a46 <HAL_UART_IRQHandler+0x52>
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	f003 0320 	and.w	r3, r3, #32
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d003      	beq.n	8002a46 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 f9d6 	bl	8002df0 <UART_Receive_IT>
      return;
 8002a44:	e0d1      	b.n	8002bea <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	f000 80b0 	beq.w	8002bae <HAL_UART_IRQHandler+0x1ba>
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	f003 0301 	and.w	r3, r3, #1
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d105      	bne.n	8002a64 <HAL_UART_IRQHandler+0x70>
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	f000 80a5 	beq.w	8002bae <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	f003 0301 	and.w	r3, r3, #1
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d00a      	beq.n	8002a84 <HAL_UART_IRQHandler+0x90>
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d005      	beq.n	8002a84 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a7c:	f043 0201 	orr.w	r2, r3, #1
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	f003 0304 	and.w	r3, r3, #4
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d00a      	beq.n	8002aa4 <HAL_UART_IRQHandler+0xb0>
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	f003 0301 	and.w	r3, r3, #1
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d005      	beq.n	8002aa4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a9c:	f043 0202 	orr.w	r2, r3, #2
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	f003 0302 	and.w	r3, r3, #2
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d00a      	beq.n	8002ac4 <HAL_UART_IRQHandler+0xd0>
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	f003 0301 	and.w	r3, r3, #1
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d005      	beq.n	8002ac4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002abc:	f043 0204 	orr.w	r2, r3, #4
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	f003 0308 	and.w	r3, r3, #8
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d00f      	beq.n	8002aee <HAL_UART_IRQHandler+0xfa>
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	f003 0320 	and.w	r3, r3, #32
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d104      	bne.n	8002ae2 <HAL_UART_IRQHandler+0xee>
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d005      	beq.n	8002aee <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ae6:	f043 0208 	orr.w	r2, r3, #8
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d078      	beq.n	8002be8 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	f003 0320 	and.w	r3, r3, #32
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d007      	beq.n	8002b10 <HAL_UART_IRQHandler+0x11c>
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	f003 0320 	and.w	r3, r3, #32
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d002      	beq.n	8002b10 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 f970 	bl	8002df0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	695b      	ldr	r3, [r3, #20]
 8002b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b1a:	2b40      	cmp	r3, #64	; 0x40
 8002b1c:	bf0c      	ite	eq
 8002b1e:	2301      	moveq	r3, #1
 8002b20:	2300      	movne	r3, #0
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b2a:	f003 0308 	and.w	r3, r3, #8
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d102      	bne.n	8002b38 <HAL_UART_IRQHandler+0x144>
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d031      	beq.n	8002b9c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f000 f8b9 	bl	8002cb0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	695b      	ldr	r3, [r3, #20]
 8002b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b48:	2b40      	cmp	r3, #64	; 0x40
 8002b4a:	d123      	bne.n	8002b94 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	695a      	ldr	r2, [r3, #20]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b5a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d013      	beq.n	8002b8c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b68:	4a21      	ldr	r2, [pc, #132]	; (8002bf0 <HAL_UART_IRQHandler+0x1fc>)
 8002b6a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7fe fbb6 	bl	80012e2 <HAL_DMA_Abort_IT>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d016      	beq.n	8002baa <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b86:	4610      	mov	r0, r2
 8002b88:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b8a:	e00e      	b.n	8002baa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f000 f83b 	bl	8002c08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b92:	e00a      	b.n	8002baa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f000 f837 	bl	8002c08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b9a:	e006      	b.n	8002baa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f000 f833 	bl	8002c08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002ba8:	e01e      	b.n	8002be8 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002baa:	bf00      	nop
    return;
 8002bac:	e01c      	b.n	8002be8 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d008      	beq.n	8002bca <HAL_UART_IRQHandler+0x1d6>
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d003      	beq.n	8002bca <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f000 f8a6 	bl	8002d14 <UART_Transmit_IT>
    return;
 8002bc8:	e00f      	b.n	8002bea <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d00a      	beq.n	8002bea <HAL_UART_IRQHandler+0x1f6>
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d005      	beq.n	8002bea <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f000 f8ee 	bl	8002dc0 <UART_EndTransmit_IT>
    return;
 8002be4:	bf00      	nop
 8002be6:	e000      	b.n	8002bea <HAL_UART_IRQHandler+0x1f6>
    return;
 8002be8:	bf00      	nop
  }
}
 8002bea:	3720      	adds	r7, #32
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	08002ced 	.word	0x08002ced

08002bf4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002bfc:	bf00      	nop
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	60b9      	str	r1, [r7, #8]
 8002c26:	603b      	str	r3, [r7, #0]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c2c:	e02c      	b.n	8002c88 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c34:	d028      	beq.n	8002c88 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d007      	beq.n	8002c4c <UART_WaitOnFlagUntilTimeout+0x30>
 8002c3c:	f7fe fa12 	bl	8001064 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	69ba      	ldr	r2, [r7, #24]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d21d      	bcs.n	8002c88 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	68da      	ldr	r2, [r3, #12]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002c5a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	695a      	ldr	r2, [r3, #20]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f022 0201 	bic.w	r2, r2, #1
 8002c6a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2220      	movs	r2, #32
 8002c70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2220      	movs	r2, #32
 8002c78:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e00f      	b.n	8002ca8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	4013      	ands	r3, r2
 8002c92:	68ba      	ldr	r2, [r7, #8]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	bf0c      	ite	eq
 8002c98:	2301      	moveq	r3, #1
 8002c9a:	2300      	movne	r3, #0
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	79fb      	ldrb	r3, [r7, #7]
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d0c3      	beq.n	8002c2e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ca6:	2300      	movs	r3, #0
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3710      	adds	r7, #16
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	68da      	ldr	r2, [r3, #12]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002cc6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	695a      	ldr	r2, [r3, #20]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f022 0201 	bic.w	r2, r2, #1
 8002cd6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2220      	movs	r2, #32
 8002cdc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002ce0:	bf00      	nop
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2200      	movs	r2, #0
 8002d04:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002d06:	68f8      	ldr	r0, [r7, #12]
 8002d08:	f7ff ff7e 	bl	8002c08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d0c:	bf00      	nop
 8002d0e:	3710      	adds	r7, #16
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b085      	sub	sp, #20
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	2b21      	cmp	r3, #33	; 0x21
 8002d26:	d144      	bne.n	8002db2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d30:	d11a      	bne.n	8002d68 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a1b      	ldr	r3, [r3, #32]
 8002d36:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	881b      	ldrh	r3, [r3, #0]
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d46:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	691b      	ldr	r3, [r3, #16]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d105      	bne.n	8002d5c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a1b      	ldr	r3, [r3, #32]
 8002d54:	1c9a      	adds	r2, r3, #2
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	621a      	str	r2, [r3, #32]
 8002d5a:	e00e      	b.n	8002d7a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a1b      	ldr	r3, [r3, #32]
 8002d60:	1c5a      	adds	r2, r3, #1
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	621a      	str	r2, [r3, #32]
 8002d66:	e008      	b.n	8002d7a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6a1b      	ldr	r3, [r3, #32]
 8002d6c:	1c59      	adds	r1, r3, #1
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	6211      	str	r1, [r2, #32]
 8002d72:	781a      	ldrb	r2, [r3, #0]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	3b01      	subs	r3, #1
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	4619      	mov	r1, r3
 8002d88:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d10f      	bne.n	8002dae <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	68da      	ldr	r2, [r3, #12]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d9c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	68da      	ldr	r2, [r3, #12]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002dac:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002dae:	2300      	movs	r3, #0
 8002db0:	e000      	b.n	8002db4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002db2:	2302      	movs	r3, #2
  }
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3714      	adds	r7, #20
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr

08002dc0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	68da      	ldr	r2, [r3, #12]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dd6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2220      	movs	r2, #32
 8002ddc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f7ff ff07 	bl	8002bf4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002de6:	2300      	movs	r3, #0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3708      	adds	r7, #8
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	2b22      	cmp	r3, #34	; 0x22
 8002e02:	d171      	bne.n	8002ee8 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e0c:	d123      	bne.n	8002e56 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e12:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	691b      	ldr	r3, [r3, #16]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d10e      	bne.n	8002e3a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e28:	b29a      	uxth	r2, r3
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e32:	1c9a      	adds	r2, r3, #2
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	629a      	str	r2, [r3, #40]	; 0x28
 8002e38:	e029      	b.n	8002e8e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	b29a      	uxth	r2, r3
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e4e:	1c5a      	adds	r2, r3, #1
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	629a      	str	r2, [r3, #40]	; 0x28
 8002e54:	e01b      	b.n	8002e8e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d10a      	bne.n	8002e74 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	6858      	ldr	r0, [r3, #4]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e68:	1c59      	adds	r1, r3, #1
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	6291      	str	r1, [r2, #40]	; 0x28
 8002e6e:	b2c2      	uxtb	r2, r0
 8002e70:	701a      	strb	r2, [r3, #0]
 8002e72:	e00c      	b.n	8002e8e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	b2da      	uxtb	r2, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e80:	1c58      	adds	r0, r3, #1
 8002e82:	6879      	ldr	r1, [r7, #4]
 8002e84:	6288      	str	r0, [r1, #40]	; 0x28
 8002e86:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002e8a:	b2d2      	uxtb	r2, r2
 8002e8c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	3b01      	subs	r3, #1
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d120      	bne.n	8002ee4 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	68da      	ldr	r2, [r3, #12]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f022 0220 	bic.w	r2, r2, #32
 8002eb0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	68da      	ldr	r2, [r3, #12]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ec0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	695a      	ldr	r2, [r3, #20]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f022 0201 	bic.w	r2, r2, #1
 8002ed0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2220      	movs	r2, #32
 8002ed6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f001 ff7c 	bl	8004dd8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	e002      	b.n	8002eea <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	e000      	b.n	8002eea <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002ee8:	2302      	movs	r3, #2
  }
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3710      	adds	r7, #16
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
	...

08002ef4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ef8:	b085      	sub	sp, #20
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	691b      	ldr	r3, [r3, #16]
 8002f04:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	68da      	ldr	r2, [r3, #12]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	430a      	orrs	r2, r1
 8002f12:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	689a      	ldr	r2, [r3, #8]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	691b      	ldr	r3, [r3, #16]
 8002f1c:	431a      	orrs	r2, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	431a      	orrs	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	69db      	ldr	r3, [r3, #28]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002f36:	f023 030c 	bic.w	r3, r3, #12
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	6812      	ldr	r2, [r2, #0]
 8002f3e:	68f9      	ldr	r1, [r7, #12]
 8002f40:	430b      	orrs	r3, r1
 8002f42:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	695b      	ldr	r3, [r3, #20]
 8002f4a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	699a      	ldr	r2, [r3, #24]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	430a      	orrs	r2, r1
 8002f58:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	69db      	ldr	r3, [r3, #28]
 8002f5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f62:	f040 818b 	bne.w	800327c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4ac1      	ldr	r2, [pc, #772]	; (8003270 <UART_SetConfig+0x37c>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d005      	beq.n	8002f7c <UART_SetConfig+0x88>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4abf      	ldr	r2, [pc, #764]	; (8003274 <UART_SetConfig+0x380>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	f040 80bd 	bne.w	80030f6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f7c:	f7fe ffc8 	bl	8001f10 <HAL_RCC_GetPCLK2Freq>
 8002f80:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	461d      	mov	r5, r3
 8002f86:	f04f 0600 	mov.w	r6, #0
 8002f8a:	46a8      	mov	r8, r5
 8002f8c:	46b1      	mov	r9, r6
 8002f8e:	eb18 0308 	adds.w	r3, r8, r8
 8002f92:	eb49 0409 	adc.w	r4, r9, r9
 8002f96:	4698      	mov	r8, r3
 8002f98:	46a1      	mov	r9, r4
 8002f9a:	eb18 0805 	adds.w	r8, r8, r5
 8002f9e:	eb49 0906 	adc.w	r9, r9, r6
 8002fa2:	f04f 0100 	mov.w	r1, #0
 8002fa6:	f04f 0200 	mov.w	r2, #0
 8002faa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002fae:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002fb2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002fb6:	4688      	mov	r8, r1
 8002fb8:	4691      	mov	r9, r2
 8002fba:	eb18 0005 	adds.w	r0, r8, r5
 8002fbe:	eb49 0106 	adc.w	r1, r9, r6
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	461d      	mov	r5, r3
 8002fc8:	f04f 0600 	mov.w	r6, #0
 8002fcc:	196b      	adds	r3, r5, r5
 8002fce:	eb46 0406 	adc.w	r4, r6, r6
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	4623      	mov	r3, r4
 8002fd6:	f7fd fe5f 	bl	8000c98 <__aeabi_uldivmod>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	460c      	mov	r4, r1
 8002fde:	461a      	mov	r2, r3
 8002fe0:	4ba5      	ldr	r3, [pc, #660]	; (8003278 <UART_SetConfig+0x384>)
 8002fe2:	fba3 2302 	umull	r2, r3, r3, r2
 8002fe6:	095b      	lsrs	r3, r3, #5
 8002fe8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	461d      	mov	r5, r3
 8002ff0:	f04f 0600 	mov.w	r6, #0
 8002ff4:	46a9      	mov	r9, r5
 8002ff6:	46b2      	mov	sl, r6
 8002ff8:	eb19 0309 	adds.w	r3, r9, r9
 8002ffc:	eb4a 040a 	adc.w	r4, sl, sl
 8003000:	4699      	mov	r9, r3
 8003002:	46a2      	mov	sl, r4
 8003004:	eb19 0905 	adds.w	r9, r9, r5
 8003008:	eb4a 0a06 	adc.w	sl, sl, r6
 800300c:	f04f 0100 	mov.w	r1, #0
 8003010:	f04f 0200 	mov.w	r2, #0
 8003014:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003018:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800301c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003020:	4689      	mov	r9, r1
 8003022:	4692      	mov	sl, r2
 8003024:	eb19 0005 	adds.w	r0, r9, r5
 8003028:	eb4a 0106 	adc.w	r1, sl, r6
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	461d      	mov	r5, r3
 8003032:	f04f 0600 	mov.w	r6, #0
 8003036:	196b      	adds	r3, r5, r5
 8003038:	eb46 0406 	adc.w	r4, r6, r6
 800303c:	461a      	mov	r2, r3
 800303e:	4623      	mov	r3, r4
 8003040:	f7fd fe2a 	bl	8000c98 <__aeabi_uldivmod>
 8003044:	4603      	mov	r3, r0
 8003046:	460c      	mov	r4, r1
 8003048:	461a      	mov	r2, r3
 800304a:	4b8b      	ldr	r3, [pc, #556]	; (8003278 <UART_SetConfig+0x384>)
 800304c:	fba3 1302 	umull	r1, r3, r3, r2
 8003050:	095b      	lsrs	r3, r3, #5
 8003052:	2164      	movs	r1, #100	; 0x64
 8003054:	fb01 f303 	mul.w	r3, r1, r3
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	00db      	lsls	r3, r3, #3
 800305c:	3332      	adds	r3, #50	; 0x32
 800305e:	4a86      	ldr	r2, [pc, #536]	; (8003278 <UART_SetConfig+0x384>)
 8003060:	fba2 2303 	umull	r2, r3, r2, r3
 8003064:	095b      	lsrs	r3, r3, #5
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800306c:	4498      	add	r8, r3
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	461d      	mov	r5, r3
 8003072:	f04f 0600 	mov.w	r6, #0
 8003076:	46a9      	mov	r9, r5
 8003078:	46b2      	mov	sl, r6
 800307a:	eb19 0309 	adds.w	r3, r9, r9
 800307e:	eb4a 040a 	adc.w	r4, sl, sl
 8003082:	4699      	mov	r9, r3
 8003084:	46a2      	mov	sl, r4
 8003086:	eb19 0905 	adds.w	r9, r9, r5
 800308a:	eb4a 0a06 	adc.w	sl, sl, r6
 800308e:	f04f 0100 	mov.w	r1, #0
 8003092:	f04f 0200 	mov.w	r2, #0
 8003096:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800309a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800309e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80030a2:	4689      	mov	r9, r1
 80030a4:	4692      	mov	sl, r2
 80030a6:	eb19 0005 	adds.w	r0, r9, r5
 80030aa:	eb4a 0106 	adc.w	r1, sl, r6
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	461d      	mov	r5, r3
 80030b4:	f04f 0600 	mov.w	r6, #0
 80030b8:	196b      	adds	r3, r5, r5
 80030ba:	eb46 0406 	adc.w	r4, r6, r6
 80030be:	461a      	mov	r2, r3
 80030c0:	4623      	mov	r3, r4
 80030c2:	f7fd fde9 	bl	8000c98 <__aeabi_uldivmod>
 80030c6:	4603      	mov	r3, r0
 80030c8:	460c      	mov	r4, r1
 80030ca:	461a      	mov	r2, r3
 80030cc:	4b6a      	ldr	r3, [pc, #424]	; (8003278 <UART_SetConfig+0x384>)
 80030ce:	fba3 1302 	umull	r1, r3, r3, r2
 80030d2:	095b      	lsrs	r3, r3, #5
 80030d4:	2164      	movs	r1, #100	; 0x64
 80030d6:	fb01 f303 	mul.w	r3, r1, r3
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	00db      	lsls	r3, r3, #3
 80030de:	3332      	adds	r3, #50	; 0x32
 80030e0:	4a65      	ldr	r2, [pc, #404]	; (8003278 <UART_SetConfig+0x384>)
 80030e2:	fba2 2303 	umull	r2, r3, r2, r3
 80030e6:	095b      	lsrs	r3, r3, #5
 80030e8:	f003 0207 	and.w	r2, r3, #7
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4442      	add	r2, r8
 80030f2:	609a      	str	r2, [r3, #8]
 80030f4:	e26f      	b.n	80035d6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80030f6:	f7fe fef7 	bl	8001ee8 <HAL_RCC_GetPCLK1Freq>
 80030fa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	461d      	mov	r5, r3
 8003100:	f04f 0600 	mov.w	r6, #0
 8003104:	46a8      	mov	r8, r5
 8003106:	46b1      	mov	r9, r6
 8003108:	eb18 0308 	adds.w	r3, r8, r8
 800310c:	eb49 0409 	adc.w	r4, r9, r9
 8003110:	4698      	mov	r8, r3
 8003112:	46a1      	mov	r9, r4
 8003114:	eb18 0805 	adds.w	r8, r8, r5
 8003118:	eb49 0906 	adc.w	r9, r9, r6
 800311c:	f04f 0100 	mov.w	r1, #0
 8003120:	f04f 0200 	mov.w	r2, #0
 8003124:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003128:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800312c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003130:	4688      	mov	r8, r1
 8003132:	4691      	mov	r9, r2
 8003134:	eb18 0005 	adds.w	r0, r8, r5
 8003138:	eb49 0106 	adc.w	r1, r9, r6
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	461d      	mov	r5, r3
 8003142:	f04f 0600 	mov.w	r6, #0
 8003146:	196b      	adds	r3, r5, r5
 8003148:	eb46 0406 	adc.w	r4, r6, r6
 800314c:	461a      	mov	r2, r3
 800314e:	4623      	mov	r3, r4
 8003150:	f7fd fda2 	bl	8000c98 <__aeabi_uldivmod>
 8003154:	4603      	mov	r3, r0
 8003156:	460c      	mov	r4, r1
 8003158:	461a      	mov	r2, r3
 800315a:	4b47      	ldr	r3, [pc, #284]	; (8003278 <UART_SetConfig+0x384>)
 800315c:	fba3 2302 	umull	r2, r3, r3, r2
 8003160:	095b      	lsrs	r3, r3, #5
 8003162:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	461d      	mov	r5, r3
 800316a:	f04f 0600 	mov.w	r6, #0
 800316e:	46a9      	mov	r9, r5
 8003170:	46b2      	mov	sl, r6
 8003172:	eb19 0309 	adds.w	r3, r9, r9
 8003176:	eb4a 040a 	adc.w	r4, sl, sl
 800317a:	4699      	mov	r9, r3
 800317c:	46a2      	mov	sl, r4
 800317e:	eb19 0905 	adds.w	r9, r9, r5
 8003182:	eb4a 0a06 	adc.w	sl, sl, r6
 8003186:	f04f 0100 	mov.w	r1, #0
 800318a:	f04f 0200 	mov.w	r2, #0
 800318e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003192:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003196:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800319a:	4689      	mov	r9, r1
 800319c:	4692      	mov	sl, r2
 800319e:	eb19 0005 	adds.w	r0, r9, r5
 80031a2:	eb4a 0106 	adc.w	r1, sl, r6
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	461d      	mov	r5, r3
 80031ac:	f04f 0600 	mov.w	r6, #0
 80031b0:	196b      	adds	r3, r5, r5
 80031b2:	eb46 0406 	adc.w	r4, r6, r6
 80031b6:	461a      	mov	r2, r3
 80031b8:	4623      	mov	r3, r4
 80031ba:	f7fd fd6d 	bl	8000c98 <__aeabi_uldivmod>
 80031be:	4603      	mov	r3, r0
 80031c0:	460c      	mov	r4, r1
 80031c2:	461a      	mov	r2, r3
 80031c4:	4b2c      	ldr	r3, [pc, #176]	; (8003278 <UART_SetConfig+0x384>)
 80031c6:	fba3 1302 	umull	r1, r3, r3, r2
 80031ca:	095b      	lsrs	r3, r3, #5
 80031cc:	2164      	movs	r1, #100	; 0x64
 80031ce:	fb01 f303 	mul.w	r3, r1, r3
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	00db      	lsls	r3, r3, #3
 80031d6:	3332      	adds	r3, #50	; 0x32
 80031d8:	4a27      	ldr	r2, [pc, #156]	; (8003278 <UART_SetConfig+0x384>)
 80031da:	fba2 2303 	umull	r2, r3, r2, r3
 80031de:	095b      	lsrs	r3, r3, #5
 80031e0:	005b      	lsls	r3, r3, #1
 80031e2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80031e6:	4498      	add	r8, r3
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	461d      	mov	r5, r3
 80031ec:	f04f 0600 	mov.w	r6, #0
 80031f0:	46a9      	mov	r9, r5
 80031f2:	46b2      	mov	sl, r6
 80031f4:	eb19 0309 	adds.w	r3, r9, r9
 80031f8:	eb4a 040a 	adc.w	r4, sl, sl
 80031fc:	4699      	mov	r9, r3
 80031fe:	46a2      	mov	sl, r4
 8003200:	eb19 0905 	adds.w	r9, r9, r5
 8003204:	eb4a 0a06 	adc.w	sl, sl, r6
 8003208:	f04f 0100 	mov.w	r1, #0
 800320c:	f04f 0200 	mov.w	r2, #0
 8003210:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003214:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003218:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800321c:	4689      	mov	r9, r1
 800321e:	4692      	mov	sl, r2
 8003220:	eb19 0005 	adds.w	r0, r9, r5
 8003224:	eb4a 0106 	adc.w	r1, sl, r6
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	461d      	mov	r5, r3
 800322e:	f04f 0600 	mov.w	r6, #0
 8003232:	196b      	adds	r3, r5, r5
 8003234:	eb46 0406 	adc.w	r4, r6, r6
 8003238:	461a      	mov	r2, r3
 800323a:	4623      	mov	r3, r4
 800323c:	f7fd fd2c 	bl	8000c98 <__aeabi_uldivmod>
 8003240:	4603      	mov	r3, r0
 8003242:	460c      	mov	r4, r1
 8003244:	461a      	mov	r2, r3
 8003246:	4b0c      	ldr	r3, [pc, #48]	; (8003278 <UART_SetConfig+0x384>)
 8003248:	fba3 1302 	umull	r1, r3, r3, r2
 800324c:	095b      	lsrs	r3, r3, #5
 800324e:	2164      	movs	r1, #100	; 0x64
 8003250:	fb01 f303 	mul.w	r3, r1, r3
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	00db      	lsls	r3, r3, #3
 8003258:	3332      	adds	r3, #50	; 0x32
 800325a:	4a07      	ldr	r2, [pc, #28]	; (8003278 <UART_SetConfig+0x384>)
 800325c:	fba2 2303 	umull	r2, r3, r2, r3
 8003260:	095b      	lsrs	r3, r3, #5
 8003262:	f003 0207 	and.w	r2, r3, #7
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4442      	add	r2, r8
 800326c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800326e:	e1b2      	b.n	80035d6 <UART_SetConfig+0x6e2>
 8003270:	40011000 	.word	0x40011000
 8003274:	40011400 	.word	0x40011400
 8003278:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4ad7      	ldr	r2, [pc, #860]	; (80035e0 <UART_SetConfig+0x6ec>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d005      	beq.n	8003292 <UART_SetConfig+0x39e>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4ad6      	ldr	r2, [pc, #856]	; (80035e4 <UART_SetConfig+0x6f0>)
 800328c:	4293      	cmp	r3, r2
 800328e:	f040 80d1 	bne.w	8003434 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003292:	f7fe fe3d 	bl	8001f10 <HAL_RCC_GetPCLK2Freq>
 8003296:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	469a      	mov	sl, r3
 800329c:	f04f 0b00 	mov.w	fp, #0
 80032a0:	46d0      	mov	r8, sl
 80032a2:	46d9      	mov	r9, fp
 80032a4:	eb18 0308 	adds.w	r3, r8, r8
 80032a8:	eb49 0409 	adc.w	r4, r9, r9
 80032ac:	4698      	mov	r8, r3
 80032ae:	46a1      	mov	r9, r4
 80032b0:	eb18 080a 	adds.w	r8, r8, sl
 80032b4:	eb49 090b 	adc.w	r9, r9, fp
 80032b8:	f04f 0100 	mov.w	r1, #0
 80032bc:	f04f 0200 	mov.w	r2, #0
 80032c0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80032c4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80032c8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80032cc:	4688      	mov	r8, r1
 80032ce:	4691      	mov	r9, r2
 80032d0:	eb1a 0508 	adds.w	r5, sl, r8
 80032d4:	eb4b 0609 	adc.w	r6, fp, r9
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	4619      	mov	r1, r3
 80032de:	f04f 0200 	mov.w	r2, #0
 80032e2:	f04f 0300 	mov.w	r3, #0
 80032e6:	f04f 0400 	mov.w	r4, #0
 80032ea:	0094      	lsls	r4, r2, #2
 80032ec:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80032f0:	008b      	lsls	r3, r1, #2
 80032f2:	461a      	mov	r2, r3
 80032f4:	4623      	mov	r3, r4
 80032f6:	4628      	mov	r0, r5
 80032f8:	4631      	mov	r1, r6
 80032fa:	f7fd fccd 	bl	8000c98 <__aeabi_uldivmod>
 80032fe:	4603      	mov	r3, r0
 8003300:	460c      	mov	r4, r1
 8003302:	461a      	mov	r2, r3
 8003304:	4bb8      	ldr	r3, [pc, #736]	; (80035e8 <UART_SetConfig+0x6f4>)
 8003306:	fba3 2302 	umull	r2, r3, r3, r2
 800330a:	095b      	lsrs	r3, r3, #5
 800330c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	469b      	mov	fp, r3
 8003314:	f04f 0c00 	mov.w	ip, #0
 8003318:	46d9      	mov	r9, fp
 800331a:	46e2      	mov	sl, ip
 800331c:	eb19 0309 	adds.w	r3, r9, r9
 8003320:	eb4a 040a 	adc.w	r4, sl, sl
 8003324:	4699      	mov	r9, r3
 8003326:	46a2      	mov	sl, r4
 8003328:	eb19 090b 	adds.w	r9, r9, fp
 800332c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003330:	f04f 0100 	mov.w	r1, #0
 8003334:	f04f 0200 	mov.w	r2, #0
 8003338:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800333c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003340:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003344:	4689      	mov	r9, r1
 8003346:	4692      	mov	sl, r2
 8003348:	eb1b 0509 	adds.w	r5, fp, r9
 800334c:	eb4c 060a 	adc.w	r6, ip, sl
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	4619      	mov	r1, r3
 8003356:	f04f 0200 	mov.w	r2, #0
 800335a:	f04f 0300 	mov.w	r3, #0
 800335e:	f04f 0400 	mov.w	r4, #0
 8003362:	0094      	lsls	r4, r2, #2
 8003364:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003368:	008b      	lsls	r3, r1, #2
 800336a:	461a      	mov	r2, r3
 800336c:	4623      	mov	r3, r4
 800336e:	4628      	mov	r0, r5
 8003370:	4631      	mov	r1, r6
 8003372:	f7fd fc91 	bl	8000c98 <__aeabi_uldivmod>
 8003376:	4603      	mov	r3, r0
 8003378:	460c      	mov	r4, r1
 800337a:	461a      	mov	r2, r3
 800337c:	4b9a      	ldr	r3, [pc, #616]	; (80035e8 <UART_SetConfig+0x6f4>)
 800337e:	fba3 1302 	umull	r1, r3, r3, r2
 8003382:	095b      	lsrs	r3, r3, #5
 8003384:	2164      	movs	r1, #100	; 0x64
 8003386:	fb01 f303 	mul.w	r3, r1, r3
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	011b      	lsls	r3, r3, #4
 800338e:	3332      	adds	r3, #50	; 0x32
 8003390:	4a95      	ldr	r2, [pc, #596]	; (80035e8 <UART_SetConfig+0x6f4>)
 8003392:	fba2 2303 	umull	r2, r3, r2, r3
 8003396:	095b      	lsrs	r3, r3, #5
 8003398:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800339c:	4498      	add	r8, r3
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	469b      	mov	fp, r3
 80033a2:	f04f 0c00 	mov.w	ip, #0
 80033a6:	46d9      	mov	r9, fp
 80033a8:	46e2      	mov	sl, ip
 80033aa:	eb19 0309 	adds.w	r3, r9, r9
 80033ae:	eb4a 040a 	adc.w	r4, sl, sl
 80033b2:	4699      	mov	r9, r3
 80033b4:	46a2      	mov	sl, r4
 80033b6:	eb19 090b 	adds.w	r9, r9, fp
 80033ba:	eb4a 0a0c 	adc.w	sl, sl, ip
 80033be:	f04f 0100 	mov.w	r1, #0
 80033c2:	f04f 0200 	mov.w	r2, #0
 80033c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033ca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80033ce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80033d2:	4689      	mov	r9, r1
 80033d4:	4692      	mov	sl, r2
 80033d6:	eb1b 0509 	adds.w	r5, fp, r9
 80033da:	eb4c 060a 	adc.w	r6, ip, sl
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	4619      	mov	r1, r3
 80033e4:	f04f 0200 	mov.w	r2, #0
 80033e8:	f04f 0300 	mov.w	r3, #0
 80033ec:	f04f 0400 	mov.w	r4, #0
 80033f0:	0094      	lsls	r4, r2, #2
 80033f2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80033f6:	008b      	lsls	r3, r1, #2
 80033f8:	461a      	mov	r2, r3
 80033fa:	4623      	mov	r3, r4
 80033fc:	4628      	mov	r0, r5
 80033fe:	4631      	mov	r1, r6
 8003400:	f7fd fc4a 	bl	8000c98 <__aeabi_uldivmod>
 8003404:	4603      	mov	r3, r0
 8003406:	460c      	mov	r4, r1
 8003408:	461a      	mov	r2, r3
 800340a:	4b77      	ldr	r3, [pc, #476]	; (80035e8 <UART_SetConfig+0x6f4>)
 800340c:	fba3 1302 	umull	r1, r3, r3, r2
 8003410:	095b      	lsrs	r3, r3, #5
 8003412:	2164      	movs	r1, #100	; 0x64
 8003414:	fb01 f303 	mul.w	r3, r1, r3
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	011b      	lsls	r3, r3, #4
 800341c:	3332      	adds	r3, #50	; 0x32
 800341e:	4a72      	ldr	r2, [pc, #456]	; (80035e8 <UART_SetConfig+0x6f4>)
 8003420:	fba2 2303 	umull	r2, r3, r2, r3
 8003424:	095b      	lsrs	r3, r3, #5
 8003426:	f003 020f 	and.w	r2, r3, #15
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4442      	add	r2, r8
 8003430:	609a      	str	r2, [r3, #8]
 8003432:	e0d0      	b.n	80035d6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003434:	f7fe fd58 	bl	8001ee8 <HAL_RCC_GetPCLK1Freq>
 8003438:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	469a      	mov	sl, r3
 800343e:	f04f 0b00 	mov.w	fp, #0
 8003442:	46d0      	mov	r8, sl
 8003444:	46d9      	mov	r9, fp
 8003446:	eb18 0308 	adds.w	r3, r8, r8
 800344a:	eb49 0409 	adc.w	r4, r9, r9
 800344e:	4698      	mov	r8, r3
 8003450:	46a1      	mov	r9, r4
 8003452:	eb18 080a 	adds.w	r8, r8, sl
 8003456:	eb49 090b 	adc.w	r9, r9, fp
 800345a:	f04f 0100 	mov.w	r1, #0
 800345e:	f04f 0200 	mov.w	r2, #0
 8003462:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003466:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800346a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800346e:	4688      	mov	r8, r1
 8003470:	4691      	mov	r9, r2
 8003472:	eb1a 0508 	adds.w	r5, sl, r8
 8003476:	eb4b 0609 	adc.w	r6, fp, r9
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	4619      	mov	r1, r3
 8003480:	f04f 0200 	mov.w	r2, #0
 8003484:	f04f 0300 	mov.w	r3, #0
 8003488:	f04f 0400 	mov.w	r4, #0
 800348c:	0094      	lsls	r4, r2, #2
 800348e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003492:	008b      	lsls	r3, r1, #2
 8003494:	461a      	mov	r2, r3
 8003496:	4623      	mov	r3, r4
 8003498:	4628      	mov	r0, r5
 800349a:	4631      	mov	r1, r6
 800349c:	f7fd fbfc 	bl	8000c98 <__aeabi_uldivmod>
 80034a0:	4603      	mov	r3, r0
 80034a2:	460c      	mov	r4, r1
 80034a4:	461a      	mov	r2, r3
 80034a6:	4b50      	ldr	r3, [pc, #320]	; (80035e8 <UART_SetConfig+0x6f4>)
 80034a8:	fba3 2302 	umull	r2, r3, r3, r2
 80034ac:	095b      	lsrs	r3, r3, #5
 80034ae:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	469b      	mov	fp, r3
 80034b6:	f04f 0c00 	mov.w	ip, #0
 80034ba:	46d9      	mov	r9, fp
 80034bc:	46e2      	mov	sl, ip
 80034be:	eb19 0309 	adds.w	r3, r9, r9
 80034c2:	eb4a 040a 	adc.w	r4, sl, sl
 80034c6:	4699      	mov	r9, r3
 80034c8:	46a2      	mov	sl, r4
 80034ca:	eb19 090b 	adds.w	r9, r9, fp
 80034ce:	eb4a 0a0c 	adc.w	sl, sl, ip
 80034d2:	f04f 0100 	mov.w	r1, #0
 80034d6:	f04f 0200 	mov.w	r2, #0
 80034da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034de:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80034e2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80034e6:	4689      	mov	r9, r1
 80034e8:	4692      	mov	sl, r2
 80034ea:	eb1b 0509 	adds.w	r5, fp, r9
 80034ee:	eb4c 060a 	adc.w	r6, ip, sl
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	4619      	mov	r1, r3
 80034f8:	f04f 0200 	mov.w	r2, #0
 80034fc:	f04f 0300 	mov.w	r3, #0
 8003500:	f04f 0400 	mov.w	r4, #0
 8003504:	0094      	lsls	r4, r2, #2
 8003506:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800350a:	008b      	lsls	r3, r1, #2
 800350c:	461a      	mov	r2, r3
 800350e:	4623      	mov	r3, r4
 8003510:	4628      	mov	r0, r5
 8003512:	4631      	mov	r1, r6
 8003514:	f7fd fbc0 	bl	8000c98 <__aeabi_uldivmod>
 8003518:	4603      	mov	r3, r0
 800351a:	460c      	mov	r4, r1
 800351c:	461a      	mov	r2, r3
 800351e:	4b32      	ldr	r3, [pc, #200]	; (80035e8 <UART_SetConfig+0x6f4>)
 8003520:	fba3 1302 	umull	r1, r3, r3, r2
 8003524:	095b      	lsrs	r3, r3, #5
 8003526:	2164      	movs	r1, #100	; 0x64
 8003528:	fb01 f303 	mul.w	r3, r1, r3
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	011b      	lsls	r3, r3, #4
 8003530:	3332      	adds	r3, #50	; 0x32
 8003532:	4a2d      	ldr	r2, [pc, #180]	; (80035e8 <UART_SetConfig+0x6f4>)
 8003534:	fba2 2303 	umull	r2, r3, r2, r3
 8003538:	095b      	lsrs	r3, r3, #5
 800353a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800353e:	4498      	add	r8, r3
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	469b      	mov	fp, r3
 8003544:	f04f 0c00 	mov.w	ip, #0
 8003548:	46d9      	mov	r9, fp
 800354a:	46e2      	mov	sl, ip
 800354c:	eb19 0309 	adds.w	r3, r9, r9
 8003550:	eb4a 040a 	adc.w	r4, sl, sl
 8003554:	4699      	mov	r9, r3
 8003556:	46a2      	mov	sl, r4
 8003558:	eb19 090b 	adds.w	r9, r9, fp
 800355c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003560:	f04f 0100 	mov.w	r1, #0
 8003564:	f04f 0200 	mov.w	r2, #0
 8003568:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800356c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003570:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003574:	4689      	mov	r9, r1
 8003576:	4692      	mov	sl, r2
 8003578:	eb1b 0509 	adds.w	r5, fp, r9
 800357c:	eb4c 060a 	adc.w	r6, ip, sl
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	4619      	mov	r1, r3
 8003586:	f04f 0200 	mov.w	r2, #0
 800358a:	f04f 0300 	mov.w	r3, #0
 800358e:	f04f 0400 	mov.w	r4, #0
 8003592:	0094      	lsls	r4, r2, #2
 8003594:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003598:	008b      	lsls	r3, r1, #2
 800359a:	461a      	mov	r2, r3
 800359c:	4623      	mov	r3, r4
 800359e:	4628      	mov	r0, r5
 80035a0:	4631      	mov	r1, r6
 80035a2:	f7fd fb79 	bl	8000c98 <__aeabi_uldivmod>
 80035a6:	4603      	mov	r3, r0
 80035a8:	460c      	mov	r4, r1
 80035aa:	461a      	mov	r2, r3
 80035ac:	4b0e      	ldr	r3, [pc, #56]	; (80035e8 <UART_SetConfig+0x6f4>)
 80035ae:	fba3 1302 	umull	r1, r3, r3, r2
 80035b2:	095b      	lsrs	r3, r3, #5
 80035b4:	2164      	movs	r1, #100	; 0x64
 80035b6:	fb01 f303 	mul.w	r3, r1, r3
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	011b      	lsls	r3, r3, #4
 80035be:	3332      	adds	r3, #50	; 0x32
 80035c0:	4a09      	ldr	r2, [pc, #36]	; (80035e8 <UART_SetConfig+0x6f4>)
 80035c2:	fba2 2303 	umull	r2, r3, r2, r3
 80035c6:	095b      	lsrs	r3, r3, #5
 80035c8:	f003 020f 	and.w	r2, r3, #15
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4442      	add	r2, r8
 80035d2:	609a      	str	r2, [r3, #8]
}
 80035d4:	e7ff      	b.n	80035d6 <UART_SetConfig+0x6e2>
 80035d6:	bf00      	nop
 80035d8:	3714      	adds	r7, #20
 80035da:	46bd      	mov	sp, r7
 80035dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035e0:	40011000 	.word	0x40011000
 80035e4:	40011400 	.word	0x40011400
 80035e8:	51eb851f 	.word	0x51eb851f

080035ec <CRC16>:
0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80,
0x40
} ;

unsigned short CRC16 (volatile unsigned char *puchMsg, unsigned short usDataLen ) /* The function returns the CRC as a unsigned short type   */
{
 80035ec:	b480      	push	{r7}
 80035ee:	b085      	sub	sp, #20
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	460b      	mov	r3, r1
 80035f6:	807b      	strh	r3, [r7, #2]
//*puchMsg =  /* message to calculate CRC upon */
//usDataLen =  /* quantity of bytes in message  */

    unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized  */
 80035f8:	23ff      	movs	r3, #255	; 0xff
 80035fa:	73fb      	strb	r3, [r7, #15]
    unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized  */
 80035fc:	23ff      	movs	r3, #255	; 0xff
 80035fe:	73bb      	strb	r3, [r7, #14]
    unsigned uIndex ; /* will index into CRC lookup table  */
    while (usDataLen--) /* pass through message buffer  */
 8003600:	e014      	b.n	800362c <CRC16+0x40>
    {
        uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC  */
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	1c5a      	adds	r2, r3, #1
 8003606:	607a      	str	r2, [r7, #4]
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	b2da      	uxtb	r2, r3
 800360c:	7bbb      	ldrb	r3, [r7, #14]
 800360e:	4053      	eors	r3, r2
 8003610:	b2db      	uxtb	r3, r3
 8003612:	60bb      	str	r3, [r7, #8]
        uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8003614:	4a0f      	ldr	r2, [pc, #60]	; (8003654 <CRC16+0x68>)
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	4413      	add	r3, r2
 800361a:	781a      	ldrb	r2, [r3, #0]
 800361c:	7bfb      	ldrb	r3, [r7, #15]
 800361e:	4053      	eors	r3, r2
 8003620:	73bb      	strb	r3, [r7, #14]
        uchCRCHi = auchCRCLo[uIndex] ;
 8003622:	4a0d      	ldr	r2, [pc, #52]	; (8003658 <CRC16+0x6c>)
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	4413      	add	r3, r2
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	73fb      	strb	r3, [r7, #15]
    while (usDataLen--) /* pass through message buffer  */
 800362c:	887b      	ldrh	r3, [r7, #2]
 800362e:	1e5a      	subs	r2, r3, #1
 8003630:	807a      	strh	r2, [r7, #2]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d1e5      	bne.n	8003602 <CRC16+0x16>
    }
    return (uchCRCHi << 8 | uchCRCLo) ;
 8003636:	7bfb      	ldrb	r3, [r7, #15]
 8003638:	021b      	lsls	r3, r3, #8
 800363a:	b21a      	sxth	r2, r3
 800363c:	7bbb      	ldrb	r3, [r7, #14]
 800363e:	b21b      	sxth	r3, r3
 8003640:	4313      	orrs	r3, r2
 8003642:	b21b      	sxth	r3, r3
 8003644:	b29b      	uxth	r3, r3
}
 8003646:	4618      	mov	r0, r3
 8003648:	3714      	adds	r7, #20
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	20000008 	.word	0x20000008
 8003658:	20000108 	.word	0x20000108

0800365c <KeyPad_Init>:

extern volatile uint16_t MODE;

//#############################################################################################
void	KeyPad_Init(void)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b086      	sub	sp, #24
 8003660:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef	gpio;
  KeyPad.ColumnSize = sizeof(_KEYPAD_COLUMN_GPIO_PIN) / 2;
 8003662:	4b2a      	ldr	r3, [pc, #168]	; (800370c <KeyPad_Init+0xb0>)
 8003664:	2204      	movs	r2, #4
 8003666:	701a      	strb	r2, [r3, #0]
  KeyPad.RowSize = sizeof(_KEYPAD_ROW_GPIO_PIN) / 2;
 8003668:	4b28      	ldr	r3, [pc, #160]	; (800370c <KeyPad_Init+0xb0>)
 800366a:	2204      	movs	r2, #4
 800366c:	705a      	strb	r2, [r3, #1]
  for(uint8_t	i=0 ; i<KeyPad.ColumnSize ; i++)
 800366e:	2300      	movs	r3, #0
 8003670:	75fb      	strb	r3, [r7, #23]
 8003672:	e022      	b.n	80036ba <KeyPad_Init+0x5e>
  {
    gpio.Mode = GPIO_MODE_OUTPUT_PP;
 8003674:	2301      	movs	r3, #1
 8003676:	607b      	str	r3, [r7, #4]
    gpio.Pull = GPIO_NOPULL;
 8003678:	2300      	movs	r3, #0
 800367a:	60bb      	str	r3, [r7, #8]
    gpio.Speed = GPIO_SPEED_FREQ_LOW;
 800367c:	2300      	movs	r3, #0
 800367e:	60fb      	str	r3, [r7, #12]
    gpio.Pin = _KEYPAD_COLUMN_GPIO_PIN[i];
 8003680:	7dfb      	ldrb	r3, [r7, #23]
 8003682:	4a23      	ldr	r2, [pc, #140]	; (8003710 <KeyPad_Init+0xb4>)
 8003684:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003688:	603b      	str	r3, [r7, #0]
    HAL_GPIO_Init((GPIO_TypeDef*)_KEYPAD_COLUMN_GPIO_PORT[i], &gpio);
 800368a:	7dfb      	ldrb	r3, [r7, #23]
 800368c:	4a21      	ldr	r2, [pc, #132]	; (8003714 <KeyPad_Init+0xb8>)
 800368e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003692:	463a      	mov	r2, r7
 8003694:	4611      	mov	r1, r2
 8003696:	4618      	mov	r0, r3
 8003698:	f7fd fe46 	bl	8001328 <HAL_GPIO_Init>
    HAL_GPIO_WritePin((GPIO_TypeDef*)_KEYPAD_COLUMN_GPIO_PORT[i], _KEYPAD_COLUMN_GPIO_PIN[i], GPIO_PIN_SET);
 800369c:	7dfb      	ldrb	r3, [r7, #23]
 800369e:	4a1d      	ldr	r2, [pc, #116]	; (8003714 <KeyPad_Init+0xb8>)
 80036a0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80036a4:	7dfb      	ldrb	r3, [r7, #23]
 80036a6:	4a1a      	ldr	r2, [pc, #104]	; (8003710 <KeyPad_Init+0xb4>)
 80036a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80036ac:	2201      	movs	r2, #1
 80036ae:	4619      	mov	r1, r3
 80036b0:	f7fd ffd4 	bl	800165c <HAL_GPIO_WritePin>
  for(uint8_t	i=0 ; i<KeyPad.ColumnSize ; i++)
 80036b4:	7dfb      	ldrb	r3, [r7, #23]
 80036b6:	3301      	adds	r3, #1
 80036b8:	75fb      	strb	r3, [r7, #23]
 80036ba:	4b14      	ldr	r3, [pc, #80]	; (800370c <KeyPad_Init+0xb0>)
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	7dfa      	ldrb	r2, [r7, #23]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d3d7      	bcc.n	8003674 <KeyPad_Init+0x18>
  }
  for(uint8_t	i=0 ; i<KeyPad.RowSize ; i++)
 80036c4:	2300      	movs	r3, #0
 80036c6:	75bb      	strb	r3, [r7, #22]
 80036c8:	e016      	b.n	80036f8 <KeyPad_Init+0x9c>
  {
    gpio.Mode = GPIO_MODE_INPUT;
 80036ca:	2300      	movs	r3, #0
 80036cc:	607b      	str	r3, [r7, #4]
    gpio.Pull = GPIO_PULLUP;
 80036ce:	2301      	movs	r3, #1
 80036d0:	60bb      	str	r3, [r7, #8]
    gpio.Speed = GPIO_SPEED_FREQ_LOW;
 80036d2:	2300      	movs	r3, #0
 80036d4:	60fb      	str	r3, [r7, #12]
    gpio.Pin = _KEYPAD_ROW_GPIO_PIN[i];
 80036d6:	7dbb      	ldrb	r3, [r7, #22]
 80036d8:	4a0f      	ldr	r2, [pc, #60]	; (8003718 <KeyPad_Init+0xbc>)
 80036da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80036de:	603b      	str	r3, [r7, #0]
    HAL_GPIO_Init((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[i], &gpio);
 80036e0:	7dbb      	ldrb	r3, [r7, #22]
 80036e2:	4a0e      	ldr	r2, [pc, #56]	; (800371c <KeyPad_Init+0xc0>)
 80036e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036e8:	463a      	mov	r2, r7
 80036ea:	4611      	mov	r1, r2
 80036ec:	4618      	mov	r0, r3
 80036ee:	f7fd fe1b 	bl	8001328 <HAL_GPIO_Init>
  for(uint8_t	i=0 ; i<KeyPad.RowSize ; i++)
 80036f2:	7dbb      	ldrb	r3, [r7, #22]
 80036f4:	3301      	adds	r3, #1
 80036f6:	75bb      	strb	r3, [r7, #22]
 80036f8:	4b04      	ldr	r3, [pc, #16]	; (800370c <KeyPad_Init+0xb0>)
 80036fa:	785b      	ldrb	r3, [r3, #1]
 80036fc:	7dba      	ldrb	r2, [r7, #22]
 80036fe:	429a      	cmp	r2, r3
 8003700:	d3e3      	bcc.n	80036ca <KeyPad_Init+0x6e>
  }
}
 8003702:	bf00      	nop
 8003704:	3718      	adds	r7, #24
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	2000199c 	.word	0x2000199c
 8003710:	0800a29c 	.word	0x0800a29c
 8003714:	20000208 	.word	0x20000208
 8003718:	0800a2a4 	.word	0x0800a2a4
 800371c:	20000218 	.word	0x20000218

08003720 <KeyPad_Scan>:
//#############################################################################################
uint16_t	KeyPad_Scan(void)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
  uint16_t  key=0;
 8003726:	2300      	movs	r3, #0
 8003728:	807b      	strh	r3, [r7, #2]
  for(uint8_t c=0 ; c<KeyPad.ColumnSize ; c++)
 800372a:	2300      	movs	r3, #0
 800372c:	71fb      	strb	r3, [r7, #7]
 800372e:	e07b      	b.n	8003828 <KeyPad_Scan+0x108>
  {
    for(uint8_t i=0 ; i<KeyPad.ColumnSize ; i++)
 8003730:	2300      	movs	r3, #0
 8003732:	71bb      	strb	r3, [r7, #6]
 8003734:	e00e      	b.n	8003754 <KeyPad_Scan+0x34>
      HAL_GPIO_WritePin((GPIO_TypeDef*)_KEYPAD_COLUMN_GPIO_PORT[i], _KEYPAD_COLUMN_GPIO_PIN[i], GPIO_PIN_SET);
 8003736:	79bb      	ldrb	r3, [r7, #6]
 8003738:	4a41      	ldr	r2, [pc, #260]	; (8003840 <KeyPad_Scan+0x120>)
 800373a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800373e:	79bb      	ldrb	r3, [r7, #6]
 8003740:	4a40      	ldr	r2, [pc, #256]	; (8003844 <KeyPad_Scan+0x124>)
 8003742:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003746:	2201      	movs	r2, #1
 8003748:	4619      	mov	r1, r3
 800374a:	f7fd ff87 	bl	800165c <HAL_GPIO_WritePin>
    for(uint8_t i=0 ; i<KeyPad.ColumnSize ; i++)
 800374e:	79bb      	ldrb	r3, [r7, #6]
 8003750:	3301      	adds	r3, #1
 8003752:	71bb      	strb	r3, [r7, #6]
 8003754:	4b3c      	ldr	r3, [pc, #240]	; (8003848 <KeyPad_Scan+0x128>)
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	79ba      	ldrb	r2, [r7, #6]
 800375a:	429a      	cmp	r2, r3
 800375c:	d3eb      	bcc.n	8003736 <KeyPad_Scan+0x16>
    HAL_GPIO_WritePin((GPIO_TypeDef*)_KEYPAD_COLUMN_GPIO_PORT[c], _KEYPAD_COLUMN_GPIO_PIN[c], GPIO_PIN_RESET);
 800375e:	79fb      	ldrb	r3, [r7, #7]
 8003760:	4a37      	ldr	r2, [pc, #220]	; (8003840 <KeyPad_Scan+0x120>)
 8003762:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003766:	79fb      	ldrb	r3, [r7, #7]
 8003768:	4a36      	ldr	r2, [pc, #216]	; (8003844 <KeyPad_Scan+0x124>)
 800376a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800376e:	2200      	movs	r2, #0
 8003770:	4619      	mov	r1, r3
 8003772:	f7fd ff73 	bl	800165c <HAL_GPIO_WritePin>
    _KEYPAD_DELAY(5);
 8003776:	2005      	movs	r0, #5
 8003778:	f7fd fc80 	bl	800107c <HAL_Delay>
    for(uint8_t r=0 ; r<KeyPad.RowSize ; r++)
 800377c:	2300      	movs	r3, #0
 800377e:	717b      	strb	r3, [r7, #5]
 8003780:	e04a      	b.n	8003818 <KeyPad_Scan+0xf8>
    {
      if(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET)
 8003782:	797b      	ldrb	r3, [r7, #5]
 8003784:	4a31      	ldr	r2, [pc, #196]	; (800384c <KeyPad_Scan+0x12c>)
 8003786:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800378a:	797b      	ldrb	r3, [r7, #5]
 800378c:	4a30      	ldr	r2, [pc, #192]	; (8003850 <KeyPad_Scan+0x130>)
 800378e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003792:	4619      	mov	r1, r3
 8003794:	f7fd ff4a 	bl	800162c <HAL_GPIO_ReadPin>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d139      	bne.n	8003812 <KeyPad_Scan+0xf2>
      {
        _KEYPAD_DELAY(_KEYPAD_DEBOUNCE_TIME_MS);
 800379e:	2014      	movs	r0, #20
 80037a0:	f7fd fc6c 	bl	800107c <HAL_Delay>
        if(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET)
 80037a4:	797b      	ldrb	r3, [r7, #5]
 80037a6:	4a29      	ldr	r2, [pc, #164]	; (800384c <KeyPad_Scan+0x12c>)
 80037a8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80037ac:	797b      	ldrb	r3, [r7, #5]
 80037ae:	4a28      	ldr	r2, [pc, #160]	; (8003850 <KeyPad_Scan+0x130>)
 80037b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80037b4:	4619      	mov	r1, r3
 80037b6:	f7fd ff39 	bl	800162c <HAL_GPIO_ReadPin>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d128      	bne.n	8003812 <KeyPad_Scan+0xf2>
        {
          key |= 1<<c;
 80037c0:	79fb      	ldrb	r3, [r7, #7]
 80037c2:	2201      	movs	r2, #1
 80037c4:	fa02 f303 	lsl.w	r3, r2, r3
 80037c8:	b21a      	sxth	r2, r3
 80037ca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	b21b      	sxth	r3, r3
 80037d2:	807b      	strh	r3, [r7, #2]
          key |= 1<<(r+8);
 80037d4:	797b      	ldrb	r3, [r7, #5]
 80037d6:	3308      	adds	r3, #8
 80037d8:	2201      	movs	r2, #1
 80037da:	fa02 f303 	lsl.w	r3, r2, r3
 80037de:	b21a      	sxth	r2, r3
 80037e0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	b21b      	sxth	r3, r3
 80037e8:	807b      	strh	r3, [r7, #2]
          while(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET)
 80037ea:	e002      	b.n	80037f2 <KeyPad_Scan+0xd2>
            _KEYPAD_DELAY(5);
 80037ec:	2005      	movs	r0, #5
 80037ee:	f7fd fc45 	bl	800107c <HAL_Delay>
          while(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET)
 80037f2:	797b      	ldrb	r3, [r7, #5]
 80037f4:	4a15      	ldr	r2, [pc, #84]	; (800384c <KeyPad_Scan+0x12c>)
 80037f6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80037fa:	797b      	ldrb	r3, [r7, #5]
 80037fc:	4a14      	ldr	r2, [pc, #80]	; (8003850 <KeyPad_Scan+0x130>)
 80037fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003802:	4619      	mov	r1, r3
 8003804:	f7fd ff12 	bl	800162c <HAL_GPIO_ReadPin>
 8003808:	4603      	mov	r3, r0
 800380a:	2b00      	cmp	r3, #0
 800380c:	d0ee      	beq.n	80037ec <KeyPad_Scan+0xcc>
          return key;
 800380e:	887b      	ldrh	r3, [r7, #2]
 8003810:	e011      	b.n	8003836 <KeyPad_Scan+0x116>
    for(uint8_t r=0 ; r<KeyPad.RowSize ; r++)
 8003812:	797b      	ldrb	r3, [r7, #5]
 8003814:	3301      	adds	r3, #1
 8003816:	717b      	strb	r3, [r7, #5]
 8003818:	4b0b      	ldr	r3, [pc, #44]	; (8003848 <KeyPad_Scan+0x128>)
 800381a:	785b      	ldrb	r3, [r3, #1]
 800381c:	797a      	ldrb	r2, [r7, #5]
 800381e:	429a      	cmp	r2, r3
 8003820:	d3af      	bcc.n	8003782 <KeyPad_Scan+0x62>
  for(uint8_t c=0 ; c<KeyPad.ColumnSize ; c++)
 8003822:	79fb      	ldrb	r3, [r7, #7]
 8003824:	3301      	adds	r3, #1
 8003826:	71fb      	strb	r3, [r7, #7]
 8003828:	4b07      	ldr	r3, [pc, #28]	; (8003848 <KeyPad_Scan+0x128>)
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	79fa      	ldrb	r2, [r7, #7]
 800382e:	429a      	cmp	r2, r3
 8003830:	f4ff af7e 	bcc.w	8003730 <KeyPad_Scan+0x10>
        }
      }
    }
  }
  return key;
 8003834:	887b      	ldrh	r3, [r7, #2]
}
 8003836:	4618      	mov	r0, r3
 8003838:	3708      	adds	r7, #8
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	20000208 	.word	0x20000208
 8003844:	0800a29c 	.word	0x0800a29c
 8003848:	2000199c 	.word	0x2000199c
 800384c:	20000218 	.word	0x20000218
 8003850:	0800a2a4 	.word	0x0800a2a4

08003854 <KeyPad_WaitForKey>:
//#############################################################################################
uint16_t	KeyPad_WaitForKey(uint32_t  Timeout_ms)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  uint16_t  keyRead;
  while(Timeout_ms==0)
 800385c:	e015      	b.n	800388a <KeyPad_WaitForKey+0x36>
  {
	if (MODE == 1){ return 0;};
 800385e:	4b1e      	ldr	r3, [pc, #120]	; (80038d8 <KeyPad_WaitForKey+0x84>)
 8003860:	881b      	ldrh	r3, [r3, #0]
 8003862:	b29b      	uxth	r3, r3
 8003864:	2b01      	cmp	r3, #1
 8003866:	d101      	bne.n	800386c <KeyPad_WaitForKey+0x18>
 8003868:	2300      	movs	r3, #0
 800386a:	e030      	b.n	80038ce <KeyPad_WaitForKey+0x7a>
    keyRead = KeyPad_Scan();
 800386c:	f7ff ff58 	bl	8003720 <KeyPad_Scan>
 8003870:	4603      	mov	r3, r0
 8003872:	817b      	strh	r3, [r7, #10]
		if(keyRead!=0)
 8003874:	897b      	ldrh	r3, [r7, #10]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d004      	beq.n	8003884 <KeyPad_WaitForKey+0x30>
		{
			KeyPad.LastKey = keyRead;
 800387a:	4a18      	ldr	r2, [pc, #96]	; (80038dc <KeyPad_WaitForKey+0x88>)
 800387c:	897b      	ldrh	r3, [r7, #10]
 800387e:	8053      	strh	r3, [r2, #2]
			return keyRead;
 8003880:	897b      	ldrh	r3, [r7, #10]
 8003882:	e024      	b.n	80038ce <KeyPad_WaitForKey+0x7a>
		}
		_KEYPAD_DELAY(_KEYPAD_DEBOUNCE_TIME_MS);
 8003884:	2014      	movs	r0, #20
 8003886:	f7fd fbf9 	bl	800107c <HAL_Delay>
  while(Timeout_ms==0)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d0e6      	beq.n	800385e <KeyPad_WaitForKey+0xa>
  }
	uint32_t	StartTime = HAL_GetTick();
 8003890:	f7fd fbe8 	bl	8001064 <HAL_GetTick>
 8003894:	60f8      	str	r0, [r7, #12]
	while(HAL_GetTick()-StartTime < Timeout_ms)
 8003896:	e00e      	b.n	80038b6 <KeyPad_WaitForKey+0x62>
	{
		keyRead = KeyPad_Scan();
 8003898:	f7ff ff42 	bl	8003720 <KeyPad_Scan>
 800389c:	4603      	mov	r3, r0
 800389e:	817b      	strh	r3, [r7, #10]
		if(keyRead!=0)
 80038a0:	897b      	ldrh	r3, [r7, #10]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d004      	beq.n	80038b0 <KeyPad_WaitForKey+0x5c>
		{
			KeyPad.LastKey = keyRead;
 80038a6:	4a0d      	ldr	r2, [pc, #52]	; (80038dc <KeyPad_WaitForKey+0x88>)
 80038a8:	897b      	ldrh	r3, [r7, #10]
 80038aa:	8053      	strh	r3, [r2, #2]
			return keyRead;
 80038ac:	897b      	ldrh	r3, [r7, #10]
 80038ae:	e00e      	b.n	80038ce <KeyPad_WaitForKey+0x7a>
		}
		_KEYPAD_DELAY(_KEYPAD_DEBOUNCE_TIME_MS);
 80038b0:	2014      	movs	r0, #20
 80038b2:	f7fd fbe3 	bl	800107c <HAL_Delay>
	while(HAL_GetTick()-StartTime < Timeout_ms)
 80038b6:	f7fd fbd5 	bl	8001064 <HAL_GetTick>
 80038ba:	4602      	mov	r2, r0
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d8e8      	bhi.n	8003898 <KeyPad_WaitForKey+0x44>
	}
	KeyPad.LastKey=0;
 80038c6:	4b05      	ldr	r3, [pc, #20]	; (80038dc <KeyPad_WaitForKey+0x88>)
 80038c8:	2200      	movs	r2, #0
 80038ca:	805a      	strh	r2, [r3, #2]
	return 0;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3710      	adds	r7, #16
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	20000444 	.word	0x20000444
 80038dc:	2000199c 	.word	0x2000199c

080038e0 <KeyPad_WaitForKeyGetChar>:
//#############################################################################################
char	KeyPad_WaitForKeyGetChar(uint32_t	Timeout_ms)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b082      	sub	sp, #8
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  switch(KeyPad_WaitForKey(Timeout_ms))
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f7ff ffb3 	bl	8003854 <KeyPad_WaitForKey>
 80038ee:	4603      	mov	r3, r0
 80038f0:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 80038f4:	d06b      	beq.n	80039ce <KeyPad_WaitForKeyGetChar+0xee>
 80038f6:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 80038fa:	dc23      	bgt.n	8003944 <KeyPad_WaitForKeyGetChar+0x64>
 80038fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003900:	d05b      	beq.n	80039ba <KeyPad_WaitForKeyGetChar+0xda>
 8003902:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003906:	dc09      	bgt.n	800391c <KeyPad_WaitForKeyGetChar+0x3c>
 8003908:	f240 1201 	movw	r2, #257	; 0x101
 800390c:	4293      	cmp	r3, r2
 800390e:	d044      	beq.n	800399a <KeyPad_WaitForKeyGetChar+0xba>
 8003910:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8003914:	d049      	beq.n	80039aa <KeyPad_WaitForKeyGetChar+0xca>
 8003916:	2b00      	cmp	r3, #0
 8003918:	d03d      	beq.n	8003996 <KeyPad_WaitForKeyGetChar+0xb6>
 800391a:	e05e      	b.n	80039da <KeyPad_WaitForKeyGetChar+0xfa>
 800391c:	f240 2201 	movw	r2, #513	; 0x201
 8003920:	4293      	cmp	r3, r2
 8003922:	d03c      	beq.n	800399e <KeyPad_WaitForKeyGetChar+0xbe>
 8003924:	f240 2201 	movw	r2, #513	; 0x201
 8003928:	4293      	cmp	r3, r2
 800392a:	dc03      	bgt.n	8003934 <KeyPad_WaitForKeyGetChar+0x54>
 800392c:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 8003930:	d04b      	beq.n	80039ca <KeyPad_WaitForKeyGetChar+0xea>
 8003932:	e052      	b.n	80039da <KeyPad_WaitForKeyGetChar+0xfa>
 8003934:	f240 2202 	movw	r2, #514	; 0x202
 8003938:	4293      	cmp	r3, r2
 800393a:	d038      	beq.n	80039ae <KeyPad_WaitForKeyGetChar+0xce>
 800393c:	f5b3 7f01 	cmp.w	r3, #516	; 0x204
 8003940:	d03d      	beq.n	80039be <KeyPad_WaitForKeyGetChar+0xde>
 8003942:	e04a      	b.n	80039da <KeyPad_WaitForKeyGetChar+0xfa>
 8003944:	f5b3 6f81 	cmp.w	r3, #1032	; 0x408
 8003948:	d043      	beq.n	80039d2 <KeyPad_WaitForKeyGetChar+0xf2>
 800394a:	f5b3 6f81 	cmp.w	r3, #1032	; 0x408
 800394e:	dc0c      	bgt.n	800396a <KeyPad_WaitForKeyGetChar+0x8a>
 8003950:	f240 4202 	movw	r2, #1026	; 0x402
 8003954:	4293      	cmp	r3, r2
 8003956:	d02c      	beq.n	80039b2 <KeyPad_WaitForKeyGetChar+0xd2>
 8003958:	f240 4204 	movw	r2, #1028	; 0x404
 800395c:	4293      	cmp	r3, r2
 800395e:	d030      	beq.n	80039c2 <KeyPad_WaitForKeyGetChar+0xe2>
 8003960:	f240 4201 	movw	r2, #1025	; 0x401
 8003964:	4293      	cmp	r3, r2
 8003966:	d01c      	beq.n	80039a2 <KeyPad_WaitForKeyGetChar+0xc2>
 8003968:	e037      	b.n	80039da <KeyPad_WaitForKeyGetChar+0xfa>
 800396a:	f640 0202 	movw	r2, #2050	; 0x802
 800396e:	4293      	cmp	r3, r2
 8003970:	d021      	beq.n	80039b6 <KeyPad_WaitForKeyGetChar+0xd6>
 8003972:	f640 0202 	movw	r2, #2050	; 0x802
 8003976:	4293      	cmp	r3, r2
 8003978:	dc04      	bgt.n	8003984 <KeyPad_WaitForKeyGetChar+0xa4>
 800397a:	f640 0201 	movw	r2, #2049	; 0x801
 800397e:	4293      	cmp	r3, r2
 8003980:	d011      	beq.n	80039a6 <KeyPad_WaitForKeyGetChar+0xc6>
 8003982:	e02a      	b.n	80039da <KeyPad_WaitForKeyGetChar+0xfa>
 8003984:	f640 0204 	movw	r2, #2052	; 0x804
 8003988:	4293      	cmp	r3, r2
 800398a:	d01c      	beq.n	80039c6 <KeyPad_WaitForKeyGetChar+0xe6>
 800398c:	f640 0208 	movw	r2, #2056	; 0x808
 8003990:	4293      	cmp	r3, r2
 8003992:	d020      	beq.n	80039d6 <KeyPad_WaitForKeyGetChar+0xf6>
 8003994:	e021      	b.n	80039da <KeyPad_WaitForKeyGetChar+0xfa>
  {
    case 0x0000:
      return 0;
 8003996:	2300      	movs	r3, #0
 8003998:	e020      	b.n	80039dc <KeyPad_WaitForKeyGetChar+0xfc>
		case 0x0101:
			return '1';
 800399a:	2331      	movs	r3, #49	; 0x31
 800399c:	e01e      	b.n	80039dc <KeyPad_WaitForKeyGetChar+0xfc>
		case 0x0201:
			return '2';
 800399e:	2332      	movs	r3, #50	; 0x32
 80039a0:	e01c      	b.n	80039dc <KeyPad_WaitForKeyGetChar+0xfc>
		case 0x0401:
			return '3';
 80039a2:	2333      	movs	r3, #51	; 0x33
 80039a4:	e01a      	b.n	80039dc <KeyPad_WaitForKeyGetChar+0xfc>
		case 0x0801:
			return 'A';
 80039a6:	2341      	movs	r3, #65	; 0x41
 80039a8:	e018      	b.n	80039dc <KeyPad_WaitForKeyGetChar+0xfc>
		case 0x0102:
			return '4';
 80039aa:	2334      	movs	r3, #52	; 0x34
 80039ac:	e016      	b.n	80039dc <KeyPad_WaitForKeyGetChar+0xfc>
		case 0x0202:
			return '5';
 80039ae:	2335      	movs	r3, #53	; 0x35
 80039b0:	e014      	b.n	80039dc <KeyPad_WaitForKeyGetChar+0xfc>
		case 0x0402:
			return '6';
 80039b2:	2336      	movs	r3, #54	; 0x36
 80039b4:	e012      	b.n	80039dc <KeyPad_WaitForKeyGetChar+0xfc>
		case 0x0802:
			return 'B';
 80039b6:	2342      	movs	r3, #66	; 0x42
 80039b8:	e010      	b.n	80039dc <KeyPad_WaitForKeyGetChar+0xfc>
		case 0x0104:
			return '7';
 80039ba:	2337      	movs	r3, #55	; 0x37
 80039bc:	e00e      	b.n	80039dc <KeyPad_WaitForKeyGetChar+0xfc>
		case 0x0204:
			return '8';
 80039be:	2338      	movs	r3, #56	; 0x38
 80039c0:	e00c      	b.n	80039dc <KeyPad_WaitForKeyGetChar+0xfc>
		case 0x0404:
			return '9';
 80039c2:	2339      	movs	r3, #57	; 0x39
 80039c4:	e00a      	b.n	80039dc <KeyPad_WaitForKeyGetChar+0xfc>
		case 0x0804:
			return 'C';
 80039c6:	2343      	movs	r3, #67	; 0x43
 80039c8:	e008      	b.n	80039dc <KeyPad_WaitForKeyGetChar+0xfc>
		case 0x0108:
			return '*';
 80039ca:	232a      	movs	r3, #42	; 0x2a
 80039cc:	e006      	b.n	80039dc <KeyPad_WaitForKeyGetChar+0xfc>
		case 0x0208:
			return '0';
 80039ce:	2330      	movs	r3, #48	; 0x30
 80039d0:	e004      	b.n	80039dc <KeyPad_WaitForKeyGetChar+0xfc>
		case 0x0408:
			return '#';
 80039d2:	2323      	movs	r3, #35	; 0x23
 80039d4:	e002      	b.n	80039dc <KeyPad_WaitForKeyGetChar+0xfc>
		case 0x0808:
			return 'D';
 80039d6:	2344      	movs	r3, #68	; 0x44
 80039d8:	e000      	b.n	80039dc <KeyPad_WaitForKeyGetChar+0xfc>

		default:
			return 0;
 80039da:	2300      	movs	r3, #0
	}
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3708      	adds	r7, #8
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 80039e4:	b5b0      	push	{r4, r5, r7, lr}
 80039e6:	b08a      	sub	sp, #40	; 0x28
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	60b9      	str	r1, [r7, #8]
 80039ee:	607a      	str	r2, [r7, #4]
 80039f0:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 80039f2:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80039f6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 80039fa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80039fe:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 8003a00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a02:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 8003a04:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003a06:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 8003a14:	f107 0310 	add.w	r3, r7, #16
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f000 f80e 	bl	8003a3a <Lcd_init>

	return lcd;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	461d      	mov	r5, r3
 8003a22:	f107 0410 	add.w	r4, r7, #16
 8003a26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a2a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003a2e:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8003a32:	68f8      	ldr	r0, [r7, #12]
 8003a34:	3728      	adds	r7, #40	; 0x28
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bdb0      	pop	{r4, r5, r7, pc}

08003a3a <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 8003a3a:	b580      	push	{r7, lr}
 8003a3c:	b082      	sub	sp, #8
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	7d9b      	ldrb	r3, [r3, #22]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d10c      	bne.n	8003a64 <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 8003a4a:	2133      	movs	r1, #51	; 0x33
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f000 f879 	bl	8003b44 <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 8003a52:	2132      	movs	r1, #50	; 0x32
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f000 f875 	bl	8003b44 <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 8003a5a:	2128      	movs	r1, #40	; 0x28
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f000 f871 	bl	8003b44 <lcd_write_command>
 8003a62:	e003      	b.n	8003a6c <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 8003a64:	2138      	movs	r1, #56	; 0x38
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f000 f86c 	bl	8003b44 <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 8003a6c:	2101      	movs	r1, #1
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 f868 	bl	8003b44 <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 8003a74:	210c      	movs	r1, #12
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 f864 	bl	8003b44 <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8003a7c:	2106      	movs	r1, #6
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 f860 	bl	8003b44 <lcd_write_command>
}
 8003a84:	bf00      	nop
 8003a86:	3708      	adds	r7, #8
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <Lcd_int>:

/**
 * Write a number on the current position
 */
void Lcd_int(Lcd_HandleTypeDef * lcd, int number)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b086      	sub	sp, #24
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]
	char buffer[11];
	sprintf(buffer, "%d", number);
 8003a96:	f107 030c 	add.w	r3, r7, #12
 8003a9a:	683a      	ldr	r2, [r7, #0]
 8003a9c:	4906      	ldr	r1, [pc, #24]	; (8003ab8 <Lcd_int+0x2c>)
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f003 f85c 	bl	8006b5c <siprintf>

	Lcd_string(lcd, buffer);
 8003aa4:	f107 030c 	add.w	r3, r7, #12
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f000 f806 	bl	8003abc <Lcd_string>
}
 8003ab0:	bf00      	nop
 8003ab2:	3718      	adds	r7, #24
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	0800a1c8 	.word	0x0800a1c8

08003abc <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8003abc:	b590      	push	{r4, r7, lr}
 8003abe:	b085      	sub	sp, #20
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	73fb      	strb	r3, [r7, #15]
 8003aca:	e00a      	b.n	8003ae2 <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8003acc:	7bfb      	ldrb	r3, [r7, #15]
 8003ace:	683a      	ldr	r2, [r7, #0]
 8003ad0:	4413      	add	r3, r2
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 f862 	bl	8003ba0 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8003adc:	7bfb      	ldrb	r3, [r7, #15]
 8003ade:	3301      	adds	r3, #1
 8003ae0:	73fb      	strb	r3, [r7, #15]
 8003ae2:	7bfc      	ldrb	r4, [r7, #15]
 8003ae4:	6838      	ldr	r0, [r7, #0]
 8003ae6:	f7fc fb7b 	bl	80001e0 <strlen>
 8003aea:	4603      	mov	r3, r0
 8003aec:	429c      	cmp	r4, r3
 8003aee:	d3ed      	bcc.n	8003acc <Lcd_string+0x10>
	}
}
 8003af0:	bf00      	nop
 8003af2:	3714      	adds	r7, #20
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd90      	pop	{r4, r7, pc}

08003af8 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	460b      	mov	r3, r1
 8003b02:	70fb      	strb	r3, [r7, #3]
 8003b04:	4613      	mov	r3, r2
 8003b06:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 8003b08:	78fb      	ldrb	r3, [r7, #3]
 8003b0a:	4a07      	ldr	r2, [pc, #28]	; (8003b28 <Lcd_cursor+0x30>)
 8003b0c:	5cd2      	ldrb	r2, [r2, r3]
 8003b0e:	78bb      	ldrb	r3, [r7, #2]
 8003b10:	4413      	add	r3, r2
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	3b80      	subs	r3, #128	; 0x80
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	4619      	mov	r1, r3
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f000 f812 	bl	8003b44 <lcd_write_command>
	#endif
}
 8003b20:	bf00      	nop
 8003b22:	3708      	adds	r7, #8
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	0800a2ac 	.word	0x0800a2ac

08003b2c <Lcd_clear>:

/**
 * Clear the screen
 */
void Lcd_clear(Lcd_HandleTypeDef * lcd) {
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, CLEAR_DISPLAY);
 8003b34:	2101      	movs	r1, #1
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f000 f804 	bl	8003b44 <lcd_write_command>
}
 8003b3c:	bf00      	nop
 8003b3e:	3708      	adds	r7, #8
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}

08003b44 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	460b      	mov	r3, r1
 8003b4e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6898      	ldr	r0, [r3, #8]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	899b      	ldrh	r3, [r3, #12]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	4619      	mov	r1, r3
 8003b5c:	f7fd fd7e 	bl	800165c <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	7d9b      	ldrb	r3, [r3, #22]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d111      	bne.n	8003b8c <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 8003b68:	78fb      	ldrb	r3, [r7, #3]
 8003b6a:	091b      	lsrs	r3, r3, #4
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	2204      	movs	r2, #4
 8003b70:	4619      	mov	r1, r3
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 f842 	bl	8003bfc <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 8003b78:	78fb      	ldrb	r3, [r7, #3]
 8003b7a:	f003 030f 	and.w	r3, r3, #15
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	2204      	movs	r2, #4
 8003b82:	4619      	mov	r1, r3
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f000 f839 	bl	8003bfc <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 8003b8a:	e005      	b.n	8003b98 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 8003b8c:	78fb      	ldrb	r3, [r7, #3]
 8003b8e:	2208      	movs	r2, #8
 8003b90:	4619      	mov	r1, r3
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f000 f832 	bl	8003bfc <lcd_write>
}
 8003b98:	bf00      	nop
 8003b9a:	3708      	adds	r7, #8
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b082      	sub	sp, #8
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	460b      	mov	r3, r1
 8003baa:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6898      	ldr	r0, [r3, #8]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	899b      	ldrh	r3, [r3, #12]
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	4619      	mov	r1, r3
 8003bb8:	f7fd fd50 	bl	800165c <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	7d9b      	ldrb	r3, [r3, #22]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d111      	bne.n	8003be8 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 8003bc4:	78fb      	ldrb	r3, [r7, #3]
 8003bc6:	091b      	lsrs	r3, r3, #4
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	2204      	movs	r2, #4
 8003bcc:	4619      	mov	r1, r3
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f000 f814 	bl	8003bfc <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 8003bd4:	78fb      	ldrb	r3, [r7, #3]
 8003bd6:	f003 030f 	and.w	r3, r3, #15
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	2204      	movs	r2, #4
 8003bde:	4619      	mov	r1, r3
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f000 f80b 	bl	8003bfc <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 8003be6:	e005      	b.n	8003bf4 <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8003be8:	78fb      	ldrb	r3, [r7, #3]
 8003bea:	2208      	movs	r2, #8
 8003bec:	4619      	mov	r1, r3
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f000 f804 	bl	8003bfc <lcd_write>
}
 8003bf4:	bf00      	nop
 8003bf6:	3708      	adds	r7, #8
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b084      	sub	sp, #16
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	460b      	mov	r3, r1
 8003c06:	70fb      	strb	r3, [r7, #3]
 8003c08:	4613      	mov	r3, r2
 8003c0a:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	73fb      	strb	r3, [r7, #15]
 8003c10:	e019      	b.n	8003c46 <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	7bfb      	ldrb	r3, [r7, #15]
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	4413      	add	r3, r2
 8003c1c:	6818      	ldr	r0, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685a      	ldr	r2, [r3, #4]
 8003c22:	7bfb      	ldrb	r3, [r7, #15]
 8003c24:	005b      	lsls	r3, r3, #1
 8003c26:	4413      	add	r3, r2
 8003c28:	8819      	ldrh	r1, [r3, #0]
 8003c2a:	78fa      	ldrb	r2, [r7, #3]
 8003c2c:	7bfb      	ldrb	r3, [r7, #15]
 8003c2e:	fa42 f303 	asr.w	r3, r2, r3
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	f003 0301 	and.w	r3, r3, #1
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	f7fd fd0e 	bl	800165c <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 8003c40:	7bfb      	ldrb	r3, [r7, #15]
 8003c42:	3301      	adds	r3, #1
 8003c44:	73fb      	strb	r3, [r7, #15]
 8003c46:	7bfa      	ldrb	r2, [r7, #15]
 8003c48:	78bb      	ldrb	r3, [r7, #2]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d3e1      	bcc.n	8003c12 <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6918      	ldr	r0, [r3, #16]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	8a9b      	ldrh	r3, [r3, #20]
 8003c56:	2201      	movs	r2, #1
 8003c58:	4619      	mov	r1, r3
 8003c5a:	f7fd fcff 	bl	800165c <HAL_GPIO_WritePin>
	DELAY(1);
 8003c5e:	2001      	movs	r0, #1
 8003c60:	f7fd fa0c 	bl	800107c <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6918      	ldr	r0, [r3, #16]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	8a9b      	ldrh	r3, [r3, #20]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	4619      	mov	r1, r3
 8003c70:	f7fd fcf4 	bl	800165c <HAL_GPIO_WritePin>
}
 8003c74:	bf00      	nop
 8003c76:	3710      	adds	r7, #16
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <MBRegisterCount>:
extern UART_HandleTypeDef huart6;

extern volatile uint8_t DataPos;

uint16_t MBRegisterCount(void)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	af00      	add	r7, sp, #0
	return (data_in[5]|(data_in[4]<<8));
 8003c80:	4b08      	ldr	r3, [pc, #32]	; (8003ca4 <MBRegisterCount+0x28>)
 8003c82:	795b      	ldrb	r3, [r3, #5]
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	b21a      	sxth	r2, r3
 8003c88:	4b06      	ldr	r3, [pc, #24]	; (8003ca4 <MBRegisterCount+0x28>)
 8003c8a:	791b      	ldrb	r3, [r3, #4]
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	021b      	lsls	r3, r3, #8
 8003c90:	b21b      	sxth	r3, r3
 8003c92:	4313      	orrs	r3, r2
 8003c94:	b21b      	sxth	r3, r3
 8003c96:	b29b      	uxth	r3, r3
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
 8003ca2:	bf00      	nop
 8003ca4:	2000044c 	.word	0x2000044c

08003ca8 <AppendDatatoMBRegister>:

void AppendDatatoMBRegister(uint16_t StAddr,uint16_t count, volatile uint16_t **inreg, volatile uint8_t *outreg)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b087      	sub	sp, #28
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	60ba      	str	r2, [r7, #8]
 8003cb0:	607b      	str	r3, [r7, #4]
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	81fb      	strh	r3, [r7, #14]
 8003cb6:	460b      	mov	r3, r1
 8003cb8:	81bb      	strh	r3, [r7, #12]

	for (uint8_t c=0; c<count; c++)
 8003cba:	2300      	movs	r3, #0
 8003cbc:	75fb      	strb	r3, [r7, #23]
 8003cbe:	e024      	b.n	8003d0a <AppendDatatoMBRegister+0x62>
	{
		*(outreg+3+c*2) = (uint8_t)   (*(inreg[StAddr+c]) >> 8) ;	//MSB IN HIGHER BYTE
 8003cc0:	89fa      	ldrh	r2, [r7, #14]
 8003cc2:	7dfb      	ldrb	r3, [r7, #23]
 8003cc4:	4413      	add	r3, r2
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	68ba      	ldr	r2, [r7, #8]
 8003cca:	4413      	add	r3, r2
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	881b      	ldrh	r3, [r3, #0]
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	0a1b      	lsrs	r3, r3, #8
 8003cd4:	b299      	uxth	r1, r3
 8003cd6:	7dfb      	ldrb	r3, [r7, #23]
 8003cd8:	005b      	lsls	r3, r3, #1
 8003cda:	3303      	adds	r3, #3
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	4413      	add	r3, r2
 8003ce0:	b2ca      	uxtb	r2, r1
 8003ce2:	701a      	strb	r2, [r3, #0]
		*(outreg+3+(c*2+1)) = (uint8_t) (*(inreg[StAddr+c]));	//LSB IN LOWER BYTE
 8003ce4:	89fa      	ldrh	r2, [r7, #14]
 8003ce6:	7dfb      	ldrb	r3, [r7, #23]
 8003ce8:	4413      	add	r3, r2
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	68ba      	ldr	r2, [r7, #8]
 8003cee:	4413      	add	r3, r2
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	881b      	ldrh	r3, [r3, #0]
 8003cf4:	b299      	uxth	r1, r3
 8003cf6:	7dfb      	ldrb	r3, [r7, #23]
 8003cf8:	005b      	lsls	r3, r3, #1
 8003cfa:	3304      	adds	r3, #4
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	4413      	add	r3, r2
 8003d00:	b2ca      	uxtb	r2, r1
 8003d02:	701a      	strb	r2, [r3, #0]
	for (uint8_t c=0; c<count; c++)
 8003d04:	7dfb      	ldrb	r3, [r7, #23]
 8003d06:	3301      	adds	r3, #1
 8003d08:	75fb      	strb	r3, [r7, #23]
 8003d0a:	7dfb      	ldrb	r3, [r7, #23]
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	89ba      	ldrh	r2, [r7, #12]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d8d5      	bhi.n	8003cc0 <AppendDatatoMBRegister+0x18>
	}
}
 8003d14:	bf00      	nop
 8003d16:	371c      	adds	r7, #28
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <MBStartAddress>:

uint16_t MBStartAddress(void)	//Return requested start address
{
 8003d20:	b480      	push	{r7}
 8003d22:	af00      	add	r7, sp, #0
	return (data_in[3]|(data_in[2]<<8));
 8003d24:	4b08      	ldr	r3, [pc, #32]	; (8003d48 <MBStartAddress+0x28>)
 8003d26:	78db      	ldrb	r3, [r3, #3]
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	b21a      	sxth	r2, r3
 8003d2c:	4b06      	ldr	r3, [pc, #24]	; (8003d48 <MBStartAddress+0x28>)
 8003d2e:	789b      	ldrb	r3, [r3, #2]
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	021b      	lsls	r3, r3, #8
 8003d34:	b21b      	sxth	r3, r3
 8003d36:	4313      	orrs	r3, r2
 8003d38:	b21b      	sxth	r3, r3
 8003d3a:	b29b      	uxth	r3, r3
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop
 8003d48:	2000044c 	.word	0x2000044c

08003d4c <MBSendData>:

void MBSendData(uint8_t count)	//Send final data over UART
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	4603      	mov	r3, r0
 8003d54:	71fb      	strb	r3, [r7, #7]

	HAL_UART_Transmit(&huart6, (uint8_t*)data_in, count, 100);
 8003d56:	79fb      	ldrb	r3, [r7, #7]
 8003d58:	b29a      	uxth	r2, r3
 8003d5a:	2364      	movs	r3, #100	; 0x64
 8003d5c:	4903      	ldr	r1, [pc, #12]	; (8003d6c <MBSendData+0x20>)
 8003d5e:	4804      	ldr	r0, [pc, #16]	; (8003d70 <MBSendData+0x24>)
 8003d60:	f7fe fd59 	bl	8002816 <HAL_UART_Transmit>
}
 8003d64:	bf00      	nop
 8003d66:	3708      	adds	r7, #8
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	2000044c 	.word	0x2000044c
 8003d70:	20004354 	.word	0x20004354

08003d74 <AppendCRCtoMBRegister>:

void AppendCRCtoMBRegister(uint8_t packtop)	//crc is calculated from slave id to last data byte
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	71fb      	strb	r3, [r7, #7]
	uint16_t crcvalue = 0;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	81fb      	strh	r3, [r7, #14]
	crcvalue = CRC16((uint8_t*)data_in,packtop + 1);
 8003d82:	79fb      	ldrb	r3, [r7, #7]
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	3301      	adds	r3, #1
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	480d      	ldr	r0, [pc, #52]	; (8003dc4 <AppendCRCtoMBRegister+0x50>)
 8003d8e:	f7ff fc2d 	bl	80035ec <CRC16>
 8003d92:	4603      	mov	r3, r0
 8003d94:	81fb      	strh	r3, [r7, #14]
	data_in[packtop+1] =(uint8_t)(crcvalue);			//lower byte at higher register
 8003d96:	79fb      	ldrb	r3, [r7, #7]
 8003d98:	3301      	adds	r3, #1
 8003d9a:	89fa      	ldrh	r2, [r7, #14]
 8003d9c:	b2d1      	uxtb	r1, r2
 8003d9e:	4a09      	ldr	r2, [pc, #36]	; (8003dc4 <AppendCRCtoMBRegister+0x50>)
 8003da0:	54d1      	strb	r1, [r2, r3]
	data_in[packtop+2] =(uint8_t)(crcvalue>>8);		//higher byte at lower register
 8003da2:	89fb      	ldrh	r3, [r7, #14]
 8003da4:	0a1b      	lsrs	r3, r3, #8
 8003da6:	b29a      	uxth	r2, r3
 8003da8:	79fb      	ldrb	r3, [r7, #7]
 8003daa:	3302      	adds	r3, #2
 8003dac:	b2d1      	uxtb	r1, r2
 8003dae:	4a05      	ldr	r2, [pc, #20]	; (8003dc4 <AppendCRCtoMBRegister+0x50>)
 8003db0:	54d1      	strb	r1, [r2, r3]

	ResponseFrameSize = packtop + 3;
 8003db2:	79fb      	ldrb	r3, [r7, #7]
 8003db4:	3303      	adds	r3, #3
 8003db6:	b2da      	uxtb	r2, r3
 8003db8:	4b03      	ldr	r3, [pc, #12]	; (8003dc8 <AppendCRCtoMBRegister+0x54>)
 8003dba:	701a      	strb	r2, [r3, #0]
}
 8003dbc:	bf00      	nop
 8003dbe:	3710      	adds	r7, #16
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	2000044c 	.word	0x2000044c
 8003dc8:	20000442 	.word	0x20000442

08003dcc <MBException>:

void MBException(uint8_t exceptionCode)	//Exception code
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	71fb      	strb	r3, [r7, #7]
	data_in[1]|=0x80; //setting MSB of the function code (the exception flag)
 8003dd6:	4b0d      	ldr	r3, [pc, #52]	; (8003e0c <MBException+0x40>)
 8003dd8:	785b      	ldrb	r3, [r3, #1]
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003de0:	b2da      	uxtb	r2, r3
 8003de2:	4b0a      	ldr	r3, [pc, #40]	; (8003e0c <MBException+0x40>)
 8003de4:	705a      	strb	r2, [r3, #1]
	data_in[2]=exceptionCode; //Exceptioncode. Also the last byte containing dat
 8003de6:	4a09      	ldr	r2, [pc, #36]	; (8003e0c <MBException+0x40>)
 8003de8:	79fb      	ldrb	r3, [r7, #7]
 8003dea:	7093      	strb	r3, [r2, #2]
	uint8_t packtop = 2;	// 3 bytes to send. No crc calculation.
 8003dec:	2302      	movs	r3, #2
 8003dee:	73fb      	strb	r3, [r7, #15]
	AppendCRCtoMBRegister(packtop);
 8003df0:	7bfb      	ldrb	r3, [r7, #15]
 8003df2:	4618      	mov	r0, r3
 8003df4:	f7ff ffbe 	bl	8003d74 <AppendCRCtoMBRegister>
	MBSendData(ResponseFrameSize);
 8003df8:	4b05      	ldr	r3, [pc, #20]	; (8003e10 <MBException+0x44>)
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f7ff ffa4 	bl	8003d4c <MBSendData>
}
 8003e04:	bf00      	nop
 8003e06:	3710      	adds	r7, #16
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	2000044c 	.word	0x2000044c
 8003e10:	20000442 	.word	0x20000442

08003e14 <MBProcessRegisters>:
void MBProcessRegisters(uint8_t fcCode)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	71fb      	strb	r3, [r7, #7]
	//First check what is the count of registers requested
	uint8_t RegCount = (uint8_t)MBRegisterCount();
 8003e1e:	f7ff ff2d 	bl	8003c7c <MBRegisterCount>
 8003e22:	4603      	mov	r3, r0
 8003e24:	73fb      	strb	r3, [r7, #15]

	//| SLAVE_ID | FUNCTION_CODE | RETURN BYTES COUNT | DATA      | CRC     |
	//| 1 BYTE   |  1 BYTE       |  1 BYTE            | N*2 BYTES | 2 BYTES |
	//So our final requested data should fit in above 256 size, so data should be max 256-6 bytes
	//As a safeguard we are also checking with maximum limits of query as per modbus function (m584 controller)
	if((RegCount >= 1u) &
 8003e26:	7bfb      	ldrb	r3, [r7, #15]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	bf14      	ite	ne
 8003e2c:	2301      	movne	r3, #1
 8003e2e:	2300      	moveq	r3, #0
 8003e30:	b2da      	uxtb	r2, r3
		(RegCount*2 <= ((sizeof(data_in)/sizeof(data_in[0])) - 5u)) &
 8003e32:	7bfb      	ldrb	r3, [r7, #15]
 8003e34:	005b      	lsls	r3, r3, #1
 8003e36:	4619      	mov	r1, r3
	if((RegCount >= 1u) &
 8003e38:	f241 3383 	movw	r3, #4995	; 0x1383
 8003e3c:	4299      	cmp	r1, r3
 8003e3e:	bf94      	ite	ls
 8003e40:	2301      	movls	r3, #1
 8003e42:	2300      	movhi	r3, #0
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	4013      	ands	r3, r2
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d02c      	beq.n	8003ea8 <MBProcessRegisters+0x94>
		(RegCount <= fc3_HoldingRegMax))
	{
		//to check if the requested start and end addresses are available in out controller
		//Get to know the starting address of the requested data
		uint16_t StAddress = MBStartAddress();
 8003e4e:	f7ff ff67 	bl	8003d20 <MBStartAddress>
 8003e52:	4603      	mov	r3, r0
 8003e54:	81bb      	strh	r3, [r7, #12]
		uint16_t EndAddress = StAddress + RegCount - 1;
 8003e56:	7bfb      	ldrb	r3, [r7, #15]
 8003e58:	b29a      	uxth	r2, r3
 8003e5a:	89bb      	ldrh	r3, [r7, #12]
 8003e5c:	4413      	add	r3, r2
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	3b01      	subs	r3, #1
 8003e62:	817b      	strh	r3, [r7, #10]

		//We will simply check if the end address is inside the size of our holding register
		if(EndAddress<=(sizeof(test))/sizeof(test[0]))
 8003e64:	897b      	ldrh	r3, [r7, #10]
 8003e66:	2b70      	cmp	r3, #112	; 0x70
 8003e68:	d81a      	bhi.n	8003ea0 <MBProcessRegisters+0x8c>
		{
			//Process the request
			data_in[2]=(uint8_t)(RegCount*2);	//fill the byte count in the data array
 8003e6a:	7bfb      	ldrb	r3, [r7, #15]
 8003e6c:	005b      	lsls	r3, r3, #1
 8003e6e:	b2da      	uxtb	r2, r3
 8003e70:	4b11      	ldr	r3, [pc, #68]	; (8003eb8 <MBProcessRegisters+0xa4>)
 8003e72:	709a      	strb	r2, [r3, #2]
			AppendDatatoMBRegister(StAddress,RegCount,test,data_in);	//fill data in the data register
 8003e74:	7bfb      	ldrb	r3, [r7, #15]
 8003e76:	b299      	uxth	r1, r3
 8003e78:	89b8      	ldrh	r0, [r7, #12]
 8003e7a:	4b0f      	ldr	r3, [pc, #60]	; (8003eb8 <MBProcessRegisters+0xa4>)
 8003e7c:	4a0f      	ldr	r2, [pc, #60]	; (8003ebc <MBProcessRegisters+0xa8>)
 8003e7e:	f7ff ff13 	bl	8003ca8 <AppendDatatoMBRegister>
			AppendCRCtoMBRegister(2+RegCount*2);
 8003e82:	7bfb      	ldrb	r3, [r7, #15]
 8003e84:	3301      	adds	r3, #1
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	005b      	lsls	r3, r3, #1
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f7ff ff71 	bl	8003d74 <AppendCRCtoMBRegister>
			MBSendData(ResponseFrameSize);
 8003e92:	4b0b      	ldr	r3, [pc, #44]	; (8003ec0 <MBProcessRegisters+0xac>)
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f7ff ff57 	bl	8003d4c <MBSendData>
	}
	else
	{
		MBException(0x03);//Exception code 03 = ILLEGAL DATA VALUE
	}
}
 8003e9e:	e006      	b.n	8003eae <MBProcessRegisters+0x9a>
			MBException(0x02);//Exception code 02 = ILLEGAL DATA ADDRESS
 8003ea0:	2002      	movs	r0, #2
 8003ea2:	f7ff ff93 	bl	8003dcc <MBException>
}
 8003ea6:	e002      	b.n	8003eae <MBProcessRegisters+0x9a>
		MBException(0x03);//Exception code 03 = ILLEGAL DATA VALUE
 8003ea8:	2003      	movs	r0, #3
 8003eaa:	f7ff ff8f 	bl	8003dcc <MBException>
}
 8003eae:	bf00      	nop
 8003eb0:	3710      	adds	r7, #16
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	2000044c 	.word	0x2000044c
 8003ebc:	200017d8 	.word	0x200017d8
 8003ec0:	20000442 	.word	0x20000442

08003ec4 <WriteToRegister>:
		} else *(outreg+3+(c/8))&=~(1<<(c-((c/8)*8)));	//else clear the bit in target array
	}
}


void WriteToRegister(volatile uint16_t** arr){
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b084      	sub	sp, #16
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]

		ResponseFrameSize = DataPos;
 8003ecc:	4b1b      	ldr	r3, [pc, #108]	; (8003f3c <WriteToRegister+0x78>)
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	b2da      	uxtb	r2, r3
 8003ed2:	4b1b      	ldr	r3, [pc, #108]	; (8003f40 <WriteToRegister+0x7c>)
 8003ed4:	701a      	strb	r2, [r3, #0]

		uint16_t temp_value = data_in[5]|(data_in[4]<<8);
 8003ed6:	4b1b      	ldr	r3, [pc, #108]	; (8003f44 <WriteToRegister+0x80>)
 8003ed8:	795b      	ldrb	r3, [r3, #5]
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	b21a      	sxth	r2, r3
 8003ede:	4b19      	ldr	r3, [pc, #100]	; (8003f44 <WriteToRegister+0x80>)
 8003ee0:	791b      	ldrb	r3, [r3, #4]
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	021b      	lsls	r3, r3, #8
 8003ee6:	b21b      	sxth	r3, r3
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	b21b      	sxth	r3, r3
 8003eec:	81fb      	strh	r3, [r7, #14]

		uint16_t temp_addr = data_in[3]|((data_in[2])<<8);
 8003eee:	4b15      	ldr	r3, [pc, #84]	; (8003f44 <WriteToRegister+0x80>)
 8003ef0:	78db      	ldrb	r3, [r3, #3]
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	b21a      	sxth	r2, r3
 8003ef6:	4b13      	ldr	r3, [pc, #76]	; (8003f44 <WriteToRegister+0x80>)
 8003ef8:	789b      	ldrb	r3, [r3, #2]
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	021b      	lsls	r3, r3, #8
 8003efe:	b21b      	sxth	r3, r3
 8003f00:	4313      	orrs	r3, r2
 8003f02:	b21b      	sxth	r3, r3
 8003f04:	81bb      	strh	r3, [r7, #12]

		if( (temp_value >= 0x0000) && (temp_value <= 0xffff))
		{

			if(temp_addr >= 0 && temp_addr <= HoldingRegSize)
 8003f06:	89bb      	ldrh	r3, [r7, #12]
 8003f08:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d80d      	bhi.n	8003f2c <WriteToRegister+0x68>
			{
				*arr[temp_addr] = temp_value;
 8003f10:	89bb      	ldrh	r3, [r7, #12]
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	4413      	add	r3, r2
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	89fa      	ldrh	r2, [r7, #14]
 8003f1c:	801a      	strh	r2, [r3, #0]
				MBSendData(ResponseFrameSize);
 8003f1e:	4b08      	ldr	r3, [pc, #32]	; (8003f40 <WriteToRegister+0x7c>)
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	4618      	mov	r0, r3
 8003f26:	f7ff ff11 	bl	8003d4c <MBSendData>
		else
		{
			MBException(0x03);//Exception code 03 = ILLEGAL DATA VALUE
		}

}
 8003f2a:	e002      	b.n	8003f32 <WriteToRegister+0x6e>
				MBException(0x02);//Exception code 02 = ILLEGAL DATA ADDRESS
 8003f2c:	2002      	movs	r0, #2
 8003f2e:	f7ff ff4d 	bl	8003dcc <MBException>
}
 8003f32:	bf00      	nop
 8003f34:	3710      	adds	r7, #16
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	20001c40 	.word	0x20001c40
 8003f40:	20000442 	.word	0x20000442
 8003f44:	2000044c 	.word	0x2000044c

08003f48 <WriteToMultilRegisters>:

void WriteToMultilRegisters(volatile uint16_t** arr){
 8003f48:	b5b0      	push	{r4, r5, r7, lr}
 8003f4a:	b088      	sub	sp, #32
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	466b      	mov	r3, sp
 8003f52:	461d      	mov	r5, r3

		ResponseFrameSize = 8;
 8003f54:	4b50      	ldr	r3, [pc, #320]	; (8004098 <WriteToMultilRegisters+0x150>)
 8003f56:	2208      	movs	r2, #8
 8003f58:	701a      	strb	r2, [r3, #0]

		uint16_t length = sizeof(data_in)/sizeof(data_in[0]);
 8003f5a:	f241 3388 	movw	r3, #5000	; 0x1388
 8003f5e:	83bb      	strh	r3, [r7, #28]

		uint16_t startAdr, quantityReg;

		startAdr = data_in[3]|(data_in[2]<<8);
 8003f60:	4b4e      	ldr	r3, [pc, #312]	; (800409c <WriteToMultilRegisters+0x154>)
 8003f62:	78db      	ldrb	r3, [r3, #3]
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	b21a      	sxth	r2, r3
 8003f68:	4b4c      	ldr	r3, [pc, #304]	; (800409c <WriteToMultilRegisters+0x154>)
 8003f6a:	789b      	ldrb	r3, [r3, #2]
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	021b      	lsls	r3, r3, #8
 8003f70:	b21b      	sxth	r3, r3
 8003f72:	4313      	orrs	r3, r2
 8003f74:	b21b      	sxth	r3, r3
 8003f76:	837b      	strh	r3, [r7, #26]

		quantityReg = data_in[5]|(data_in[4]<<8);
 8003f78:	4b48      	ldr	r3, [pc, #288]	; (800409c <WriteToMultilRegisters+0x154>)
 8003f7a:	795b      	ldrb	r3, [r3, #5]
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	b21a      	sxth	r2, r3
 8003f80:	4b46      	ldr	r3, [pc, #280]	; (800409c <WriteToMultilRegisters+0x154>)
 8003f82:	791b      	ldrb	r3, [r3, #4]
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	021b      	lsls	r3, r3, #8
 8003f88:	b21b      	sxth	r3, r3
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	b21b      	sxth	r3, r3
 8003f8e:	833b      	strh	r3, [r7, #24]

		uint16_t value[quantityReg];
 8003f90:	8b38      	ldrh	r0, [r7, #24]
 8003f92:	4603      	mov	r3, r0
 8003f94:	3b01      	subs	r3, #1
 8003f96:	617b      	str	r3, [r7, #20]
 8003f98:	b281      	uxth	r1, r0
 8003f9a:	f04f 0200 	mov.w	r2, #0
 8003f9e:	f04f 0300 	mov.w	r3, #0
 8003fa2:	f04f 0400 	mov.w	r4, #0
 8003fa6:	0114      	lsls	r4, r2, #4
 8003fa8:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8003fac:	010b      	lsls	r3, r1, #4
 8003fae:	b281      	uxth	r1, r0
 8003fb0:	f04f 0200 	mov.w	r2, #0
 8003fb4:	f04f 0300 	mov.w	r3, #0
 8003fb8:	f04f 0400 	mov.w	r4, #0
 8003fbc:	0114      	lsls	r4, r2, #4
 8003fbe:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8003fc2:	010b      	lsls	r3, r1, #4
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	005b      	lsls	r3, r3, #1
 8003fc8:	3301      	adds	r3, #1
 8003fca:	3307      	adds	r3, #7
 8003fcc:	08db      	lsrs	r3, r3, #3
 8003fce:	00db      	lsls	r3, r3, #3
 8003fd0:	ebad 0d03 	sub.w	sp, sp, r3
 8003fd4:	466b      	mov	r3, sp
 8003fd6:	3301      	adds	r3, #1
 8003fd8:	085b      	lsrs	r3, r3, #1
 8003fda:	005b      	lsls	r3, r3, #1
 8003fdc:	613b      	str	r3, [r7, #16]

		if ((0x0001<=quantityReg)&&(quantityReg <= 500))
 8003fde:	8b3b      	ldrh	r3, [r7, #24]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d051      	beq.n	8004088 <WriteToMultilRegisters+0x140>
 8003fe4:	8b3b      	ldrh	r3, [r7, #24]
 8003fe6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003fea:	d84d      	bhi.n	8004088 <WriteToMultilRegisters+0x140>
		{
			if ((startAdr>=0) && (startAdr < length))
 8003fec:	8b7a      	ldrh	r2, [r7, #26]
 8003fee:	8bbb      	ldrh	r3, [r7, #28]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d245      	bcs.n	8004080 <WriteToMultilRegisters+0x138>
			{
				for (uint8_t i = 0; i < quantityReg; i++)
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	77fb      	strb	r3, [r7, #31]
 8003ff8:	e024      	b.n	8004044 <WriteToMultilRegisters+0xfc>
				{
					value[i] = data_in[7+i*2+1]|(data_in[7+i*2]<<8);
 8003ffa:	7ffb      	ldrb	r3, [r7, #31]
 8003ffc:	3304      	adds	r3, #4
 8003ffe:	005b      	lsls	r3, r3, #1
 8004000:	4a26      	ldr	r2, [pc, #152]	; (800409c <WriteToMultilRegisters+0x154>)
 8004002:	5cd3      	ldrb	r3, [r2, r3]
 8004004:	b2db      	uxtb	r3, r3
 8004006:	b21a      	sxth	r2, r3
 8004008:	7ffb      	ldrb	r3, [r7, #31]
 800400a:	005b      	lsls	r3, r3, #1
 800400c:	3307      	adds	r3, #7
 800400e:	4923      	ldr	r1, [pc, #140]	; (800409c <WriteToMultilRegisters+0x154>)
 8004010:	5ccb      	ldrb	r3, [r1, r3]
 8004012:	b2db      	uxtb	r3, r3
 8004014:	021b      	lsls	r3, r3, #8
 8004016:	b21b      	sxth	r3, r3
 8004018:	4313      	orrs	r3, r2
 800401a:	b21b      	sxth	r3, r3
 800401c:	7ffa      	ldrb	r2, [r7, #31]
 800401e:	b299      	uxth	r1, r3
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

					(*arr[startAdr +i]) = (uint16_t)(value[i]);
 8004026:	7ff9      	ldrb	r1, [r7, #31]
 8004028:	8b7a      	ldrh	r2, [r7, #26]
 800402a:	7ffb      	ldrb	r3, [r7, #31]
 800402c:	4413      	add	r3, r2
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	4413      	add	r3, r2
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	693a      	ldr	r2, [r7, #16]
 8004038:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800403c:	801a      	strh	r2, [r3, #0]
				for (uint8_t i = 0; i < quantityReg; i++)
 800403e:	7ffb      	ldrb	r3, [r7, #31]
 8004040:	3301      	adds	r3, #1
 8004042:	77fb      	strb	r3, [r7, #31]
 8004044:	7ffb      	ldrb	r3, [r7, #31]
 8004046:	b29b      	uxth	r3, r3
 8004048:	8b3a      	ldrh	r2, [r7, #24]
 800404a:	429a      	cmp	r2, r3
 800404c:	d8d5      	bhi.n	8003ffa <WriteToMultilRegisters+0xb2>
				}

				uint16_t crcvalue = 0;
 800404e:	2300      	movs	r3, #0
 8004050:	81fb      	strh	r3, [r7, #14]
				crcvalue = CRC16((uint8_t*)data_in, 6);
 8004052:	2106      	movs	r1, #6
 8004054:	4811      	ldr	r0, [pc, #68]	; (800409c <WriteToMultilRegisters+0x154>)
 8004056:	f7ff fac9 	bl	80035ec <CRC16>
 800405a:	4603      	mov	r3, r0
 800405c:	81fb      	strh	r3, [r7, #14]

				data_in[6] = (uint8_t)(crcvalue);
 800405e:	89fb      	ldrh	r3, [r7, #14]
 8004060:	b2da      	uxtb	r2, r3
 8004062:	4b0e      	ldr	r3, [pc, #56]	; (800409c <WriteToMultilRegisters+0x154>)
 8004064:	719a      	strb	r2, [r3, #6]
				data_in[7] = (uint8_t)(crcvalue>>8);
 8004066:	89fb      	ldrh	r3, [r7, #14]
 8004068:	0a1b      	lsrs	r3, r3, #8
 800406a:	b29b      	uxth	r3, r3
 800406c:	b2da      	uxtb	r2, r3
 800406e:	4b0b      	ldr	r3, [pc, #44]	; (800409c <WriteToMultilRegisters+0x154>)
 8004070:	71da      	strb	r2, [r3, #7]

				MBSendData(ResponseFrameSize);
 8004072:	4b09      	ldr	r3, [pc, #36]	; (8004098 <WriteToMultilRegisters+0x150>)
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	b2db      	uxtb	r3, r3
 8004078:	4618      	mov	r0, r3
 800407a:	f7ff fe67 	bl	8003d4c <MBSendData>
			if ((startAdr>=0) && (startAdr < length))
 800407e:	e006      	b.n	800408e <WriteToMultilRegisters+0x146>

			}
			else
			{
				MBException(0x02);
 8004080:	2002      	movs	r0, #2
 8004082:	f7ff fea3 	bl	8003dcc <MBException>
			if ((startAdr>=0) && (startAdr < length))
 8004086:	e002      	b.n	800408e <WriteToMultilRegisters+0x146>
			}

		}
		else
		{
			MBException(0x03);
 8004088:	2003      	movs	r0, #3
 800408a:	f7ff fe9f 	bl	8003dcc <MBException>
 800408e:	46ad      	mov	sp, r5
		}

}
 8004090:	bf00      	nop
 8004092:	3720      	adds	r7, #32
 8004094:	46bd      	mov	sp, r7
 8004096:	bdb0      	pop	{r4, r5, r7, pc}
 8004098:	20000442 	.word	0x20000442
 800409c:	2000044c 	.word	0x2000044c

080040a0 <outport_motor>:
#include "main.h"

extern stepMotor_typeDef stepMotor1, stepMotor1;

void outport_motor(stepMotor_typeDef*motor, uint16_t pin1_value, uint16_t pin2_value, uint16_t pin3_value, uint16_t pin4_value)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b087      	sub	sp, #28
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	4608      	mov	r0, r1
 80040aa:	4611      	mov	r1, r2
 80040ac:	461a      	mov	r2, r3
 80040ae:	4603      	mov	r3, r0
 80040b0:	817b      	strh	r3, [r7, #10]
 80040b2:	460b      	mov	r3, r1
 80040b4:	813b      	strh	r3, [r7, #8]
 80040b6:	4613      	mov	r3, r2
 80040b8:	80fb      	strh	r3, [r7, #6]
	pin1_value = (pin1_value == 0)? 0:(motor->pin1);
 80040ba:	897b      	ldrh	r3, [r7, #10]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d002      	beq.n	80040c6 <outport_motor+0x26>
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	8a1b      	ldrh	r3, [r3, #16]
 80040c4:	e000      	b.n	80040c8 <outport_motor+0x28>
 80040c6:	2300      	movs	r3, #0
 80040c8:	817b      	strh	r3, [r7, #10]
	pin2_value = (pin2_value == 0)? 0:(motor->pin2);
 80040ca:	893b      	ldrh	r3, [r7, #8]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d002      	beq.n	80040d6 <outport_motor+0x36>
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	8a5b      	ldrh	r3, [r3, #18]
 80040d4:	e000      	b.n	80040d8 <outport_motor+0x38>
 80040d6:	2300      	movs	r3, #0
 80040d8:	813b      	strh	r3, [r7, #8]
	pin3_value = (pin3_value == 0)? 0:(motor->pin3);
 80040da:	88fb      	ldrh	r3, [r7, #6]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d002      	beq.n	80040e6 <outport_motor+0x46>
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	8a9b      	ldrh	r3, [r3, #20]
 80040e4:	e000      	b.n	80040e8 <outport_motor+0x48>
 80040e6:	2300      	movs	r3, #0
 80040e8:	80fb      	strh	r3, [r7, #6]
	pin4_value = (pin4_value == 0)? 0:(motor->pin4);
 80040ea:	8c3b      	ldrh	r3, [r7, #32]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d002      	beq.n	80040f6 <outport_motor+0x56>
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	8adb      	ldrh	r3, [r3, #22]
 80040f4:	e000      	b.n	80040f8 <outport_motor+0x58>
 80040f6:	2300      	movs	r3, #0
 80040f8:	843b      	strh	r3, [r7, #32]

	uint16_t temp_value = motor->Port->ODR & ((~motor->pin1) & (~motor->pin2) & (~motor->pin3) & (~motor->pin4));
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	695b      	ldr	r3, [r3, #20]
 8004100:	b29a      	uxth	r2, r3
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	8a19      	ldrh	r1, [r3, #16]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	8a5b      	ldrh	r3, [r3, #18]
 800410a:	430b      	orrs	r3, r1
 800410c:	b299      	uxth	r1, r3
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	8a9b      	ldrh	r3, [r3, #20]
 8004112:	430b      	orrs	r3, r1
 8004114:	b299      	uxth	r1, r3
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	8adb      	ldrh	r3, [r3, #22]
 800411a:	430b      	orrs	r3, r1
 800411c:	b29b      	uxth	r3, r3
 800411e:	43db      	mvns	r3, r3
 8004120:	b29b      	uxth	r3, r3
 8004122:	4013      	ands	r3, r2
 8004124:	82fb      	strh	r3, [r7, #22]

	motor->Port->ODR = temp_value | (pin1_value | pin2_value |pin3_value |pin4_value);
 8004126:	897a      	ldrh	r2, [r7, #10]
 8004128:	893b      	ldrh	r3, [r7, #8]
 800412a:	4313      	orrs	r3, r2
 800412c:	b29a      	uxth	r2, r3
 800412e:	88fb      	ldrh	r3, [r7, #6]
 8004130:	4313      	orrs	r3, r2
 8004132:	b29a      	uxth	r2, r3
 8004134:	8c3b      	ldrh	r3, [r7, #32]
 8004136:	4313      	orrs	r3, r2
 8004138:	b29a      	uxth	r2, r3
 800413a:	8afb      	ldrh	r3, [r7, #22]
 800413c:	4313      	orrs	r3, r2
 800413e:	b29a      	uxth	r2, r3
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	615a      	str	r2, [r3, #20]
}
 8004146:	bf00      	nop
 8004148:	371c      	adds	r7, #28
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
	...

08004154 <OneStep>:

void OneStep(stepMotor_typeDef* motor){
 8004154:	b580      	push	{r7, lr}
 8004156:	b084      	sub	sp, #16
 8004158:	af02      	add	r7, sp, #8
 800415a:	6078      	str	r0, [r7, #4]
    if(motor->direction == CLOCKWISE)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	799b      	ldrb	r3, [r3, #6]
 8004160:	b2db      	uxtb	r3, r3
 8004162:	2b01      	cmp	r3, #1
 8004164:	d135      	bne.n	80041d2 <OneStep+0x7e>
    {
		switch(motor->temp_step)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	881b      	ldrh	r3, [r3, #0]
 800416a:	b29b      	uxth	r3, r3
 800416c:	2b03      	cmp	r3, #3
 800416e:	d865      	bhi.n	800423c <OneStep+0xe8>
 8004170:	a201      	add	r2, pc, #4	; (adr r2, 8004178 <OneStep+0x24>)
 8004172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004176:	bf00      	nop
 8004178:	08004189 	.word	0x08004189
 800417c:	0800419b 	.word	0x0800419b
 8004180:	080041ad 	.word	0x080041ad
 8004184:	080041bf 	.word	0x080041bf
		{
			case 0:
				outport_motor(motor,0,0,1,1);
 8004188:	2301      	movs	r3, #1
 800418a:	9300      	str	r3, [sp, #0]
 800418c:	2301      	movs	r3, #1
 800418e:	2200      	movs	r2, #0
 8004190:	2100      	movs	r1, #0
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f7ff ff84 	bl	80040a0 <outport_motor>
			break;
 8004198:	e050      	b.n	800423c <OneStep+0xe8>

			case 1:
				outport_motor(motor,0,1,1,0);
 800419a:	2300      	movs	r3, #0
 800419c:	9300      	str	r3, [sp, #0]
 800419e:	2301      	movs	r3, #1
 80041a0:	2201      	movs	r2, #1
 80041a2:	2100      	movs	r1, #0
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f7ff ff7b 	bl	80040a0 <outport_motor>
			break;
 80041aa:	e047      	b.n	800423c <OneStep+0xe8>

			case 2:
				outport_motor(motor,1,1,0,0);
 80041ac:	2300      	movs	r3, #0
 80041ae:	9300      	str	r3, [sp, #0]
 80041b0:	2300      	movs	r3, #0
 80041b2:	2201      	movs	r2, #1
 80041b4:	2101      	movs	r1, #1
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f7ff ff72 	bl	80040a0 <outport_motor>
			break;
 80041bc:	e03e      	b.n	800423c <OneStep+0xe8>

			case 3:
				outport_motor(motor,1,0,0,1);
 80041be:	2301      	movs	r3, #1
 80041c0:	9300      	str	r3, [sp, #0]
 80041c2:	2300      	movs	r3, #0
 80041c4:	2200      	movs	r2, #0
 80041c6:	2101      	movs	r1, #1
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f7ff ff69 	bl	80040a0 <outport_motor>
			break;
 80041ce:	bf00      	nop
 80041d0:	e034      	b.n	800423c <OneStep+0xe8>
		}

    }else
    {
		switch(motor->temp_step)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	881b      	ldrh	r3, [r3, #0]
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	2b03      	cmp	r3, #3
 80041da:	d82f      	bhi.n	800423c <OneStep+0xe8>
 80041dc:	a201      	add	r2, pc, #4	; (adr r2, 80041e4 <OneStep+0x90>)
 80041de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041e2:	bf00      	nop
 80041e4:	080041f5 	.word	0x080041f5
 80041e8:	08004207 	.word	0x08004207
 80041ec:	08004219 	.word	0x08004219
 80041f0:	0800422b 	.word	0x0800422b
		{
			case 0:
			outport_motor(motor,1,0,0,1);
 80041f4:	2301      	movs	r3, #1
 80041f6:	9300      	str	r3, [sp, #0]
 80041f8:	2300      	movs	r3, #0
 80041fa:	2200      	movs	r2, #0
 80041fc:	2101      	movs	r1, #1
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f7ff ff4e 	bl	80040a0 <outport_motor>
			break;
 8004204:	e01a      	b.n	800423c <OneStep+0xe8>

			case 1:
			outport_motor(motor,1,1,0,0);
 8004206:	2300      	movs	r3, #0
 8004208:	9300      	str	r3, [sp, #0]
 800420a:	2300      	movs	r3, #0
 800420c:	2201      	movs	r2, #1
 800420e:	2101      	movs	r1, #1
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f7ff ff45 	bl	80040a0 <outport_motor>
			break;
 8004216:	e011      	b.n	800423c <OneStep+0xe8>

			case 2:
			outport_motor(motor,0,1,1,0);
 8004218:	2300      	movs	r3, #0
 800421a:	9300      	str	r3, [sp, #0]
 800421c:	2301      	movs	r3, #1
 800421e:	2201      	movs	r2, #1
 8004220:	2100      	movs	r1, #0
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f7ff ff3c 	bl	80040a0 <outport_motor>
			break;
 8004228:	e008      	b.n	800423c <OneStep+0xe8>

			case 3:
			outport_motor(motor,0,0,1,1);
 800422a:	2301      	movs	r3, #1
 800422c:	9300      	str	r3, [sp, #0]
 800422e:	2301      	movs	r3, #1
 8004230:	2200      	movs	r2, #0
 8004232:	2100      	movs	r1, #0
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f7ff ff33 	bl	80040a0 <outport_motor>
			break;
 800423a:	bf00      	nop
		}
    }

    motor->temp_step++;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	881b      	ldrh	r3, [r3, #0]
 8004240:	b29b      	uxth	r3, r3
 8004242:	3301      	adds	r3, #1
 8004244:	b29a      	uxth	r2, r3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	801a      	strh	r2, [r3, #0]

    if(motor->temp_step > 3)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	881b      	ldrh	r3, [r3, #0]
 800424e:	b29b      	uxth	r3, r3
 8004250:	2b03      	cmp	r3, #3
 8004252:	d902      	bls.n	800425a <OneStep+0x106>
    {
    	motor->temp_step = 0;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	801a      	strh	r2, [r3, #0]
    }

}
 800425a:	bf00      	nop
 800425c:	3708      	adds	r7, #8
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop

08004264 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004264:	b5b0      	push	{r4, r5, r7, lr}
 8004266:	b09a      	sub	sp, #104	; 0x68
 8004268:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */

	sensor_DirMotorX = None;
 800426a:	4bac      	ldr	r3, [pc, #688]	; (800451c <main+0x2b8>)
 800426c:	2200      	movs	r2, #0
 800426e:	701a      	strb	r2, [r3, #0]
	sensor_DirMotorY = None;
 8004270:	4bab      	ldr	r3, [pc, #684]	; (8004520 <main+0x2bc>)
 8004272:	2200      	movs	r2, #0
 8004274:	701a      	strb	r2, [r3, #0]

	//*********** Set first-Mode: handle Mode **********
	MODE = 0;
 8004276:	4bab      	ldr	r3, [pc, #684]	; (8004524 <main+0x2c0>)
 8004278:	2200      	movs	r2, #0
 800427a:	801a      	strh	r2, [r3, #0]
	isDrilling = 0;
 800427c:	4baa      	ldr	r3, [pc, #680]	; (8004528 <main+0x2c4>)
 800427e:	2200      	movs	r2, #0
 8004280:	801a      	strh	r2, [r3, #0]
	temp_coordX = 0;			//this is used while parsing G-code
 8004282:	4baa      	ldr	r3, [pc, #680]	; (800452c <main+0x2c8>)
 8004284:	2200      	movs	r2, #0
 8004286:	801a      	strh	r2, [r3, #0]
 	temp_coordY = 0;			//this is used while parsing G-code
 8004288:	4ba9      	ldr	r3, [pc, #676]	; (8004530 <main+0x2cc>)
 800428a:	2200      	movs	r2, #0
 800428c:	801a      	strh	r2, [r3, #0]
	temp_speed  = 0;
 800428e:	4ba9      	ldr	r3, [pc, #676]	; (8004534 <main+0x2d0>)
 8004290:	2200      	movs	r2, #0
 8004292:	801a      	strh	r2, [r3, #0]
	sensor_X = 0;
 8004294:	4ba8      	ldr	r3, [pc, #672]	; (8004538 <main+0x2d4>)
 8004296:	2200      	movs	r2, #0
 8004298:	601a      	str	r2, [r3, #0]
	sensor_Y = 0;
 800429a:	4ba8      	ldr	r3, [pc, #672]	; (800453c <main+0x2d8>)
 800429c:	2200      	movs	r2, #0
 800429e:	601a      	str	r2, [r3, #0]
	countG = 0;
 80042a0:	4ba7      	ldr	r3, [pc, #668]	; (8004540 <main+0x2dc>)
 80042a2:	2200      	movs	r2, #0
 80042a4:	701a      	strb	r2, [r3, #0]

	memset(data_in, 0,300);
 80042a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80042aa:	2100      	movs	r1, #0
 80042ac:	48a5      	ldr	r0, [pc, #660]	; (8004544 <main+0x2e0>)
 80042ae:	f001 fe09 	bl	8005ec4 <memset>


	//********* Configuring for motors ***************
	stepMotor1.Port 		= GPIOA;
 80042b2:	4ba5      	ldr	r3, [pc, #660]	; (8004548 <main+0x2e4>)
 80042b4:	4aa5      	ldr	r2, [pc, #660]	; (800454c <main+0x2e8>)
 80042b6:	60da      	str	r2, [r3, #12]
	stepMotor1.pin1 		= GPIO_PIN_4;
 80042b8:	4ba3      	ldr	r3, [pc, #652]	; (8004548 <main+0x2e4>)
 80042ba:	2210      	movs	r2, #16
 80042bc:	821a      	strh	r2, [r3, #16]
	stepMotor1.pin2 		= GPIO_PIN_5;
 80042be:	4ba2      	ldr	r3, [pc, #648]	; (8004548 <main+0x2e4>)
 80042c0:	2220      	movs	r2, #32
 80042c2:	825a      	strh	r2, [r3, #18]
	stepMotor1.pin3 		= GPIO_PIN_6;
 80042c4:	4ba0      	ldr	r3, [pc, #640]	; (8004548 <main+0x2e4>)
 80042c6:	2240      	movs	r2, #64	; 0x40
 80042c8:	829a      	strh	r2, [r3, #20]
	stepMotor1.pin4 		= GPIO_PIN_7;
 80042ca:	4b9f      	ldr	r3, [pc, #636]	; (8004548 <main+0x2e4>)
 80042cc:	2280      	movs	r2, #128	; 0x80
 80042ce:	82da      	strh	r2, [r3, #22]
	stepMotor1.temp_step 	= 0;
 80042d0:	4b9d      	ldr	r3, [pc, #628]	; (8004548 <main+0x2e4>)
 80042d2:	2200      	movs	r2, #0
 80042d4:	801a      	strh	r2, [r3, #0]
	stepMotor1.state 		= NOT_RUNNING;
 80042d6:	4b9c      	ldr	r3, [pc, #624]	; (8004548 <main+0x2e4>)
 80042d8:	2201      	movs	r2, #1
 80042da:	721a      	strb	r2, [r3, #8]

	stepMotor2.Port 		= GPIOB;
 80042dc:	4b9c      	ldr	r3, [pc, #624]	; (8004550 <main+0x2ec>)
 80042de:	4a9d      	ldr	r2, [pc, #628]	; (8004554 <main+0x2f0>)
 80042e0:	60da      	str	r2, [r3, #12]
	stepMotor2.pin1 		= GPIO_PIN_8;
 80042e2:	4b9b      	ldr	r3, [pc, #620]	; (8004550 <main+0x2ec>)
 80042e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80042e8:	821a      	strh	r2, [r3, #16]
	stepMotor2.pin2 		= GPIO_PIN_9;
 80042ea:	4b99      	ldr	r3, [pc, #612]	; (8004550 <main+0x2ec>)
 80042ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042f0:	825a      	strh	r2, [r3, #18]
	stepMotor2.pin3 		= GPIO_PIN_6;
 80042f2:	4b97      	ldr	r3, [pc, #604]	; (8004550 <main+0x2ec>)
 80042f4:	2240      	movs	r2, #64	; 0x40
 80042f6:	829a      	strh	r2, [r3, #20]
	stepMotor2.pin4 		= GPIO_PIN_0;
 80042f8:	4b95      	ldr	r3, [pc, #596]	; (8004550 <main+0x2ec>)
 80042fa:	2201      	movs	r2, #1
 80042fc:	82da      	strh	r2, [r3, #22]
	stepMotor2.temp_step 	= 0;
 80042fe:	4b94      	ldr	r3, [pc, #592]	; (8004550 <main+0x2ec>)
 8004300:	2200      	movs	r2, #0
 8004302:	801a      	strh	r2, [r3, #0]
	stepMotor2.state		= NOT_RUNNING;
 8004304:	4b92      	ldr	r3, [pc, #584]	; (8004550 <main+0x2ec>)
 8004306:	2201      	movs	r2, #1
 8004308:	721a      	strb	r2, [r3, #8]


	//**************** Set G_Code_String in Mobus model ************
	test[0] = (uint16_t*)(&motor);
 800430a:	4b93      	ldr	r3, [pc, #588]	; (8004558 <main+0x2f4>)
 800430c:	4a93      	ldr	r2, [pc, #588]	; (800455c <main+0x2f8>)
 800430e:	601a      	str	r2, [r3, #0]
	test[1] = (uint16_t*)(&stepNumb);
 8004310:	4b91      	ldr	r3, [pc, #580]	; (8004558 <main+0x2f4>)
 8004312:	4a93      	ldr	r2, [pc, #588]	; (8004560 <main+0x2fc>)
 8004314:	605a      	str	r2, [r3, #4]
	test[2] = (uint16_t*)(&speed);
 8004316:	4b90      	ldr	r3, [pc, #576]	; (8004558 <main+0x2f4>)
 8004318:	4a92      	ldr	r2, [pc, #584]	; (8004564 <main+0x300>)
 800431a:	609a      	str	r2, [r3, #8]
	test[3] = (uint16_t*)(&direction);
 800431c:	4b8e      	ldr	r3, [pc, #568]	; (8004558 <main+0x2f4>)
 800431e:	4a92      	ldr	r2, [pc, #584]	; (8004568 <main+0x304>)
 8004320:	60da      	str	r2, [r3, #12]
	test[4] = (uint16_t*)(&startStop);
 8004322:	4b8d      	ldr	r3, [pc, #564]	; (8004558 <main+0x2f4>)
 8004324:	4a91      	ldr	r2, [pc, #580]	; (800456c <main+0x308>)
 8004326:	611a      	str	r2, [r3, #16]
	test[5] = (uint16_t*)(&MODE);
 8004328:	4b8b      	ldr	r3, [pc, #556]	; (8004558 <main+0x2f4>)
 800432a:	4a7e      	ldr	r2, [pc, #504]	; (8004524 <main+0x2c0>)
 800432c:	615a      	str	r2, [r3, #20]


	test[6] = (uint16_t*)(&AllGcodeIsReceived);
 800432e:	4b8a      	ldr	r3, [pc, #552]	; (8004558 <main+0x2f4>)
 8004330:	4a8f      	ldr	r2, [pc, #572]	; (8004570 <main+0x30c>)
 8004332:	619a      	str	r2, [r3, #24]

	for (int i = 7; i<107; i++)
 8004334:	2307      	movs	r3, #7
 8004336:	657b      	str	r3, [r7, #84]	; 0x54
 8004338:	e00b      	b.n	8004352 <main+0xee>
	{
		test[i] = (uint16_t*)(&G_Code_String[i-7]);
 800433a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800433c:	3b07      	subs	r3, #7
 800433e:	005b      	lsls	r3, r3, #1
 8004340:	4a8c      	ldr	r2, [pc, #560]	; (8004574 <main+0x310>)
 8004342:	441a      	add	r2, r3
 8004344:	4984      	ldr	r1, [pc, #528]	; (8004558 <main+0x2f4>)
 8004346:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004348:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 7; i<107; i++)
 800434c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800434e:	3301      	adds	r3, #1
 8004350:	657b      	str	r3, [r7, #84]	; 0x54
 8004352:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004354:	2b6a      	cmp	r3, #106	; 0x6a
 8004356:	ddf0      	ble.n	800433a <main+0xd6>
	}

	test[107] = (uint16_t*)&sensor_X;
 8004358:	4b7f      	ldr	r3, [pc, #508]	; (8004558 <main+0x2f4>)
 800435a:	4a77      	ldr	r2, [pc, #476]	; (8004538 <main+0x2d4>)
 800435c:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
	test[108] = (uint16_t*)&sensor_Y;
 8004360:	4b7d      	ldr	r3, [pc, #500]	; (8004558 <main+0x2f4>)
 8004362:	4a76      	ldr	r2, [pc, #472]	; (800453c <main+0x2d8>)
 8004364:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
	test[109] = (uint16_t*)&isDrilling;
 8004368:	4b7b      	ldr	r3, [pc, #492]	; (8004558 <main+0x2f4>)
 800436a:	4a6f      	ldr	r2, [pc, #444]	; (8004528 <main+0x2c4>)
 800436c:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
	test[110] = (uint16_t*)&sensor_DirMotorX;
 8004370:	4b79      	ldr	r3, [pc, #484]	; (8004558 <main+0x2f4>)
 8004372:	4a6a      	ldr	r2, [pc, #424]	; (800451c <main+0x2b8>)
 8004374:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
	test[111] = (uint16_t*)&sensor_DirMotorY;
 8004378:	4b77      	ldr	r3, [pc, #476]	; (8004558 <main+0x2f4>)
 800437a:	4a69      	ldr	r2, [pc, #420]	; (8004520 <main+0x2bc>)
 800437c:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004380:	f7fc fe0a 	bl	8000f98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004384:	f000 face 	bl	8004924 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004388:	f000 fc48 	bl	8004c1c <MX_GPIO_Init>
  MX_TIM2_Init();
 800438c:	f000 fb32 	bl	80049f4 <MX_TIM2_Init>
  MX_USART6_UART_Init();
 8004390:	f000 fc1a 	bl	8004bc8 <MX_USART6_UART_Init>
  MX_TIM3_Init();
 8004394:	f000 fb7c 	bl	8004a90 <MX_TIM3_Init>
  MX_TIM4_Init();
 8004398:	f000 fbc8 	bl	8004b2c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim3);
 800439c:	4876      	ldr	r0, [pc, #472]	; (8004578 <main+0x314>)
 800439e:	f7fd fdf6 	bl	8001f8e <HAL_TIM_Base_Start>

  HAL_TIM_Base_Start_IT(&htim2);
 80043a2:	4876      	ldr	r0, [pc, #472]	; (800457c <main+0x318>)
 80043a4:	f7fd fe17 	bl	8001fd6 <HAL_TIM_Base_Start_IT>

  DataPos = 0;
 80043a8:	4b75      	ldr	r3, [pc, #468]	; (8004580 <main+0x31c>)
 80043aa:	2200      	movs	r2, #0
 80043ac:	701a      	strb	r2, [r3, #0]

  HAL_UART_Receive_IT(&huart6, (uint8_t*)data_in + DataPos, 1);
 80043ae:	4b74      	ldr	r3, [pc, #464]	; (8004580 <main+0x31c>)
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	461a      	mov	r2, r3
 80043b6:	4b63      	ldr	r3, [pc, #396]	; (8004544 <main+0x2e0>)
 80043b8:	4413      	add	r3, r2
 80043ba:	2201      	movs	r2, #1
 80043bc:	4619      	mov	r1, r3
 80043be:	4871      	ldr	r0, [pc, #452]	; (8004584 <main+0x320>)
 80043c0:	f7fe fac2 	bl	8002948 <HAL_UART_Receive_IT>

  //********* Initialize KeyPad *************
  KeyPad_Init();
 80043c4:	f7ff f94a 	bl	800365c <KeyPad_Init>

  //********* Initialize LCD ****************
  Lcd_PortType ports[] = { D4_GPIO_Port, D5_GPIO_Port, D6_GPIO_Port, D7_GPIO_Port};
 80043c8:	4b6f      	ldr	r3, [pc, #444]	; (8004588 <main+0x324>)
 80043ca:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80043ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80043d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  Lcd_PinType pins[] = {D4_Pin, D5_Pin, D6_Pin, D7_Pin};
 80043d4:	4a6d      	ldr	r2, [pc, #436]	; (800458c <main+0x328>)
 80043d6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80043da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80043de:	e883 0003 	stmia.w	r3, {r0, r1}

  Lcd_HandleTypeDef lcd;

  lcd = Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, EN_GPIO_Port, EN_Pin, LCD_4_BIT_MODE);
 80043e2:	4638      	mov	r0, r7
 80043e4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80043e8:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80043ec:	2300      	movs	r3, #0
 80043ee:	9303      	str	r3, [sp, #12]
 80043f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80043f4:	9302      	str	r3, [sp, #8]
 80043f6:	4b66      	ldr	r3, [pc, #408]	; (8004590 <main+0x32c>)
 80043f8:	9301      	str	r3, [sp, #4]
 80043fa:	2320      	movs	r3, #32
 80043fc:	9300      	str	r3, [sp, #0]
 80043fe:	4b64      	ldr	r3, [pc, #400]	; (8004590 <main+0x32c>)
 8004400:	f7ff faf0 	bl	80039e4 <Lcd_create>
 8004404:	f107 041c 	add.w	r4, r7, #28
 8004408:	463d      	mov	r5, r7
 800440a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800440c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800440e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004412:	e884 0003 	stmia.w	r4, {r0, r1}

  Lcd_string(&lcd, "Handle Mode");
 8004416:	f107 031c 	add.w	r3, r7, #28
 800441a:	495e      	ldr	r1, [pc, #376]	; (8004594 <main+0x330>)
 800441c:	4618      	mov	r0, r3
 800441e:	f7ff fb4d 	bl	8003abc <Lcd_string>

  Lcd_cursor(&lcd, 1, 0);
 8004422:	f107 031c 	add.w	r3, r7, #28
 8004426:	2200      	movs	r2, #0
 8004428:	2101      	movs	r1, #1
 800442a:	4618      	mov	r0, r3
 800442c:	f7ff fb64 	bl	8003af8 <Lcd_cursor>

  Lcd_string(&lcd, "Press '#' to run");
 8004430:	f107 031c 	add.w	r3, r7, #28
 8004434:	4958      	ldr	r1, [pc, #352]	; (8004598 <main+0x334>)
 8004436:	4618      	mov	r0, r3
 8004438:	f7ff fb40 	bl	8003abc <Lcd_string>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(MODE == AUTO_MODE)
 800443c:	4b39      	ldr	r3, [pc, #228]	; (8004524 <main+0x2c0>)
 800443e:	881b      	ldrh	r3, [r3, #0]
 8004440:	b29b      	uxth	r3, r3
 8004442:	2b01      	cmp	r3, #1
 8004444:	f040 80d2 	bne.w	80045ec <main+0x388>
	  {
		  // ****************** Automatic mode (Using data from PC ) **************
		  if (CommandIsReceived == TRUE)
 8004448:	4b54      	ldr	r3, [pc, #336]	; (800459c <main+0x338>)
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	2b01      	cmp	r3, #1
 800444e:	d1f5      	bne.n	800443c <main+0x1d8>
		  {
			  if (MBRegisterCount()>=2)			// Is Data received G-Code?
 8004450:	f7ff fc14 	bl	8003c7c <MBRegisterCount>
 8004454:	4603      	mov	r3, r0
 8004456:	2b01      	cmp	r3, #1
 8004458:	d957      	bls.n	800450a <main+0x2a6>
			  {

				  if (AllGcodeIsReceived == TRUE)
 800445a:	4b45      	ldr	r3, [pc, #276]	; (8004570 <main+0x30c>)
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	2b01      	cmp	r3, #1
 8004460:	d131      	bne.n	80044c6 <main+0x262>
				  {
					  for (int i = 0; i < MBRegisterCount() -2 ; i++)
 8004462:	2300      	movs	r3, #0
 8004464:	653b      	str	r3, [r7, #80]	; 0x50
 8004466:	e013      	b.n	8004490 <main+0x22c>
					  {
						  G_Code_File[countG*100 + i] = G_Code_String[i];
 8004468:	4b35      	ldr	r3, [pc, #212]	; (8004540 <main+0x2dc>)
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	b2db      	uxtb	r3, r3
 800446e:	461a      	mov	r2, r3
 8004470:	2364      	movs	r3, #100	; 0x64
 8004472:	fb03 f202 	mul.w	r2, r3, r2
 8004476:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004478:	4413      	add	r3, r2
 800447a:	493e      	ldr	r1, [pc, #248]	; (8004574 <main+0x310>)
 800447c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800447e:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8004482:	b291      	uxth	r1, r2
 8004484:	4a46      	ldr	r2, [pc, #280]	; (80045a0 <main+0x33c>)
 8004486:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					  for (int i = 0; i < MBRegisterCount() -2 ; i++)
 800448a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800448c:	3301      	adds	r3, #1
 800448e:	653b      	str	r3, [r7, #80]	; 0x50
 8004490:	f7ff fbf4 	bl	8003c7c <MBRegisterCount>
 8004494:	4603      	mov	r3, r0
 8004496:	3b02      	subs	r3, #2
 8004498:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800449a:	429a      	cmp	r2, r3
 800449c:	dbe4      	blt.n	8004468 <main+0x204>
					  }

					  Process_GCode(G_Code_File);
 800449e:	4840      	ldr	r0, [pc, #256]	; (80045a0 <main+0x33c>)
 80044a0:	f001 f866 	bl	8005570 <Process_GCode>
					  Start_Motors_ByGCode();
 80044a4:	f001 f98c 	bl	80057c0 <Start_Motors_ByGCode>
					  AllGcodeIsReceived == FALSE;
					  countG = 0;
 80044a8:	4b25      	ldr	r3, [pc, #148]	; (8004540 <main+0x2dc>)
 80044aa:	2200      	movs	r2, #0
 80044ac:	701a      	strb	r2, [r3, #0]
					  memset(G_Code_File, 0, 5000);
 80044ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80044b2:	2100      	movs	r1, #0
 80044b4:	483a      	ldr	r0, [pc, #232]	; (80045a0 <main+0x33c>)
 80044b6:	f001 fd05 	bl	8005ec4 <memset>
					  memset(G_Code_String, 0, 200);
 80044ba:	22c8      	movs	r2, #200	; 0xc8
 80044bc:	2100      	movs	r1, #0
 80044be:	482d      	ldr	r0, [pc, #180]	; (8004574 <main+0x310>)
 80044c0:	f001 fd00 	bl	8005ec4 <memset>
 80044c4:	e08b      	b.n	80045de <main+0x37a>
				  }
				  else
				  {
					  for (int i = 0; i < 100; i++)
 80044c6:	2300      	movs	r3, #0
 80044c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044ca:	e013      	b.n	80044f4 <main+0x290>
					  {
						  G_Code_File[countG*100 + i] = G_Code_String[i];
 80044cc:	4b1c      	ldr	r3, [pc, #112]	; (8004540 <main+0x2dc>)
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	461a      	mov	r2, r3
 80044d4:	2364      	movs	r3, #100	; 0x64
 80044d6:	fb03 f202 	mul.w	r2, r3, r2
 80044da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044dc:	4413      	add	r3, r2
 80044de:	4925      	ldr	r1, [pc, #148]	; (8004574 <main+0x310>)
 80044e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80044e2:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80044e6:	b291      	uxth	r1, r2
 80044e8:	4a2d      	ldr	r2, [pc, #180]	; (80045a0 <main+0x33c>)
 80044ea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					  for (int i = 0; i < 100; i++)
 80044ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044f0:	3301      	adds	r3, #1
 80044f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044f6:	2b63      	cmp	r3, #99	; 0x63
 80044f8:	dde8      	ble.n	80044cc <main+0x268>
					  }

					  countG++;
 80044fa:	4b11      	ldr	r3, [pc, #68]	; (8004540 <main+0x2dc>)
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	3301      	adds	r3, #1
 8004502:	b2da      	uxtb	r2, r3
 8004504:	4b0e      	ldr	r3, [pc, #56]	; (8004540 <main+0x2dc>)
 8004506:	701a      	strb	r2, [r3, #0]
 8004508:	e069      	b.n	80045de <main+0x37a>

			  }
			  else
			  {

				  switch (motor)
 800450a:	4b14      	ldr	r3, [pc, #80]	; (800455c <main+0x2f8>)
 800450c:	881b      	ldrh	r3, [r3, #0]
 800450e:	b29b      	uxth	r3, r3
 8004510:	2b01      	cmp	r3, #1
 8004512:	d047      	beq.n	80045a4 <main+0x340>
 8004514:	2b02      	cmp	r3, #2
 8004516:	d052      	beq.n	80045be <main+0x35a>
 8004518:	e061      	b.n	80045de <main+0x37a>
 800451a:	bf00      	nop
 800451c:	20001b38 	.word	0x20001b38
 8004520:	20001bfc 	.word	0x20001bfc
 8004524:	20000444 	.word	0x20000444
 8004528:	2000044a 	.word	0x2000044a
 800452c:	200019a0 	.word	0x200019a0
 8004530:	20001998 	.word	0x20001998
 8004534:	20000448 	.word	0x20000448
 8004538:	20001bf8 	.word	0x20001bf8
 800453c:	20004394 	.word	0x20004394
 8004540:	20001b39 	.word	0x20001b39
 8004544:	2000044c 	.word	0x2000044c
 8004548:	200043d8 	.word	0x200043d8
 800454c:	40020000 	.word	0x40020000
 8004550:	200043f0 	.word	0x200043f0
 8004554:	40020400 	.word	0x40020400
 8004558:	200017d8 	.word	0x200017d8
 800455c:	20001b36 	.word	0x20001b36
 8004560:	20000440 	.word	0x20000440
 8004564:	20001b34 	.word	0x20001b34
 8004568:	200017d4 	.word	0x200017d4
 800456c:	20000446 	.word	0x20000446
 8004570:	2000042c 	.word	0x2000042c
 8004574:	200019a4 	.word	0x200019a4
 8004578:	20001c00 	.word	0x20001c00
 800457c:	20004398 	.word	0x20004398
 8004580:	20001c40 	.word	0x20001c40
 8004584:	20004354 	.word	0x20004354
 8004588:	0800a210 	.word	0x0800a210
 800458c:	0800a220 	.word	0x0800a220
 8004590:	40020800 	.word	0x40020800
 8004594:	0800a1cc 	.word	0x0800a1cc
 8004598:	0800a1d8 	.word	0x0800a1d8
 800459c:	20000418 	.word	0x20000418
 80045a0:	20001c44 	.word	0x20001c44
				  {
				  case 1:
					  MODE = HANDLE_MODE;
 80045a4:	4bb6      	ldr	r3, [pc, #728]	; (8004880 <main+0x61c>)
 80045a6:	2200      	movs	r2, #0
 80045a8:	801a      	strh	r2, [r3, #0]
					  if (htim3.State == HAL_TIM_STATE_READY)
 80045aa:	4bb6      	ldr	r3, [pc, #728]	; (8004884 <main+0x620>)
 80045ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d110      	bne.n	80045d8 <main+0x374>
						  HAL_TIM_Base_Start_IT(&htim3);
 80045b6:	48b3      	ldr	r0, [pc, #716]	; (8004884 <main+0x620>)
 80045b8:	f7fd fd0d 	bl	8001fd6 <HAL_TIM_Base_Start_IT>
					  break;
 80045bc:	e00c      	b.n	80045d8 <main+0x374>

				  case 2:
					  MODE = HANDLE_MODE;
 80045be:	4bb0      	ldr	r3, [pc, #704]	; (8004880 <main+0x61c>)
 80045c0:	2200      	movs	r2, #0
 80045c2:	801a      	strh	r2, [r3, #0]
					  if (htim4.State == HAL_TIM_STATE_READY)
 80045c4:	4bb0      	ldr	r3, [pc, #704]	; (8004888 <main+0x624>)
 80045c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d105      	bne.n	80045dc <main+0x378>
						  HAL_TIM_Base_Start_IT(&htim4);
 80045d0:	48ad      	ldr	r0, [pc, #692]	; (8004888 <main+0x624>)
 80045d2:	f7fd fd00 	bl	8001fd6 <HAL_TIM_Base_Start_IT>
					  break;
 80045d6:	e001      	b.n	80045dc <main+0x378>
					  break;
 80045d8:	bf00      	nop
 80045da:	e000      	b.n	80045de <main+0x37a>
					  break;
 80045dc:	bf00      	nop
				  }
			  }

			  CommandIsReceived = FALSE;
 80045de:	4bab      	ldr	r3, [pc, #684]	; (800488c <main+0x628>)
 80045e0:	2200      	movs	r2, #0
 80045e2:	701a      	strb	r2, [r3, #0]
			  MODE = HANDLE_MODE;
 80045e4:	4ba6      	ldr	r3, [pc, #664]	; (8004880 <main+0x61c>)
 80045e6:	2200      	movs	r2, #0
 80045e8:	801a      	strh	r2, [r3, #0]
 80045ea:	e727      	b.n	800443c <main+0x1d8>
	  }
	  else
	  {
		  //***************** Handle Mode (Using Keyboard) ************************

		  switch(KeyPad_WaitForKeyGetChar(0))
 80045ec:	2000      	movs	r0, #0
 80045ee:	f7ff f977 	bl	80038e0 <KeyPad_WaitForKeyGetChar>
 80045f2:	4603      	mov	r3, r0
 80045f4:	3b23      	subs	r3, #35	; 0x23
 80045f6:	2b21      	cmp	r3, #33	; 0x21
 80045f8:	f63f af20 	bhi.w	800443c <main+0x1d8>
 80045fc:	a201      	add	r2, pc, #4	; (adr r2, 8004604 <main+0x3a0>)
 80045fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004602:	bf00      	nop
 8004604:	080048e7 	.word	0x080048e7
 8004608:	0800443d 	.word	0x0800443d
 800460c:	0800443d 	.word	0x0800443d
 8004610:	0800443d 	.word	0x0800443d
 8004614:	0800443d 	.word	0x0800443d
 8004618:	0800443d 	.word	0x0800443d
 800461c:	0800443d 	.word	0x0800443d
 8004620:	080047ff 	.word	0x080047ff
 8004624:	0800443d 	.word	0x0800443d
 8004628:	0800443d 	.word	0x0800443d
 800462c:	0800443d 	.word	0x0800443d
 8004630:	0800443d 	.word	0x0800443d
 8004634:	0800443d 	.word	0x0800443d
 8004638:	080048b5 	.word	0x080048b5
 800463c:	0800468d 	.word	0x0800468d
 8004640:	080046c5 	.word	0x080046c5
 8004644:	080046fd 	.word	0x080046fd
 8004648:	08004715 	.word	0x08004715
 800464c:	0800474d 	.word	0x0800474d
 8004650:	08004785 	.word	0x08004785
 8004654:	0800479d 	.word	0x0800479d
 8004658:	080047cf 	.word	0x080047cf
 800465c:	0800443d 	.word	0x0800443d
 8004660:	0800443d 	.word	0x0800443d
 8004664:	0800443d 	.word	0x0800443d
 8004668:	0800443d 	.word	0x0800443d
 800466c:	0800443d 	.word	0x0800443d
 8004670:	0800443d 	.word	0x0800443d
 8004674:	0800443d 	.word	0x0800443d
 8004678:	0800443d 	.word	0x0800443d
 800467c:	08004709 	.word	0x08004709
 8004680:	08004791 	.word	0x08004791
 8004684:	0800443d 	.word	0x0800443d
 8004688:	0800443d 	.word	0x0800443d
		  {
		  	  case '1':								// X+
		  		  display_coordX +=10;
 800468c:	4b80      	ldr	r3, [pc, #512]	; (8004890 <main+0x62c>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	330a      	adds	r3, #10
 8004692:	4a7f      	ldr	r2, [pc, #508]	; (8004890 <main+0x62c>)
 8004694:	6013      	str	r3, [r2, #0]
		  		  if(display_coordX>100) display_coordX = 0;
 8004696:	4b7e      	ldr	r3, [pc, #504]	; (8004890 <main+0x62c>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	2b64      	cmp	r3, #100	; 0x64
 800469c:	dd02      	ble.n	80046a4 <main+0x440>
 800469e:	4b7c      	ldr	r3, [pc, #496]	; (8004890 <main+0x62c>)
 80046a0:	2200      	movs	r2, #0
 80046a2:	601a      	str	r2, [r3, #0]
		  		  Lcd_display_parameter(&lcd);
 80046a4:	f107 031c 	add.w	r3, r7, #28
 80046a8:	4618      	mov	r0, r3
 80046aa:	f000 fe93 	bl	80053d4 <Lcd_display_parameter>
		  		  G_Code.G_Line[0].coordX = display_coordX*10;
 80046ae:	4b78      	ldr	r3, [pc, #480]	; (8004890 <main+0x62c>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	461a      	mov	r2, r3
 80046b6:	0092      	lsls	r2, r2, #2
 80046b8:	4413      	add	r3, r2
 80046ba:	005b      	lsls	r3, r3, #1
 80046bc:	b29a      	uxth	r2, r3
 80046be:	4b75      	ldr	r3, [pc, #468]	; (8004894 <main+0x630>)
 80046c0:	805a      	strh	r2, [r3, #2]


		  		  break;
 80046c2:	e122      	b.n	800490a <main+0x6a6>

		  	  case '2':								// X-
		  		  display_coordX -= 10;
 80046c4:	4b72      	ldr	r3, [pc, #456]	; (8004890 <main+0x62c>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	3b0a      	subs	r3, #10
 80046ca:	4a71      	ldr	r2, [pc, #452]	; (8004890 <main+0x62c>)
 80046cc:	6013      	str	r3, [r2, #0]
		  		  if(display_coordX<0) display_coordX=100;
 80046ce:	4b70      	ldr	r3, [pc, #448]	; (8004890 <main+0x62c>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	da02      	bge.n	80046dc <main+0x478>
 80046d6:	4b6e      	ldr	r3, [pc, #440]	; (8004890 <main+0x62c>)
 80046d8:	2264      	movs	r2, #100	; 0x64
 80046da:	601a      	str	r2, [r3, #0]
		  		  Lcd_display_parameter(&lcd);
 80046dc:	f107 031c 	add.w	r3, r7, #28
 80046e0:	4618      	mov	r0, r3
 80046e2:	f000 fe77 	bl	80053d4 <Lcd_display_parameter>
		  		  G_Code.G_Line[0].coordX = display_coordX*10;
 80046e6:	4b6a      	ldr	r3, [pc, #424]	; (8004890 <main+0x62c>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	461a      	mov	r2, r3
 80046ee:	0092      	lsls	r2, r2, #2
 80046f0:	4413      	add	r3, r2
 80046f2:	005b      	lsls	r3, r3, #1
 80046f4:	b29a      	uxth	r2, r3
 80046f6:	4b67      	ldr	r3, [pc, #412]	; (8004894 <main+0x630>)
 80046f8:	805a      	strh	r2, [r3, #2]
		  		  break;
 80046fa:	e106      	b.n	800490a <main+0x6a6>


		  	  case '3':
		  		  runMotor(&stepMotor1,100, CLOCKWISE); 	// Let motor1 (X) run 100 steps clockwise and set current position X = 0
 80046fc:	2201      	movs	r2, #1
 80046fe:	2164      	movs	r1, #100	; 0x64
 8004700:	4865      	ldr	r0, [pc, #404]	; (8004898 <main+0x634>)
 8004702:	f001 f985 	bl	8005a10 <runMotor>
		  		  break;
 8004706:	e100      	b.n	800490a <main+0x6a6>

		  	  case 'A':
		  		  runMotor(&stepMotor1,100, ANTICLOCKWISE); // Let motor1 (X) run 100 steps anti-clockwise and set current position X = 0
 8004708:	2200      	movs	r2, #0
 800470a:	2164      	movs	r1, #100	; 0x64
 800470c:	4862      	ldr	r0, [pc, #392]	; (8004898 <main+0x634>)
 800470e:	f001 f97f 	bl	8005a10 <runMotor>
		  		  break;
 8004712:	e0fa      	b.n	800490a <main+0x6a6>

		  	  case '4':								// Y+
		  		  display_coordY +=10;
 8004714:	4b61      	ldr	r3, [pc, #388]	; (800489c <main+0x638>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	330a      	adds	r3, #10
 800471a:	4a60      	ldr	r2, [pc, #384]	; (800489c <main+0x638>)
 800471c:	6013      	str	r3, [r2, #0]
		  		  if(display_coordY>100) display_coordY=0;
 800471e:	4b5f      	ldr	r3, [pc, #380]	; (800489c <main+0x638>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	2b64      	cmp	r3, #100	; 0x64
 8004724:	dd02      	ble.n	800472c <main+0x4c8>
 8004726:	4b5d      	ldr	r3, [pc, #372]	; (800489c <main+0x638>)
 8004728:	2200      	movs	r2, #0
 800472a:	601a      	str	r2, [r3, #0]
		  		  Lcd_display_parameter(&lcd);
 800472c:	f107 031c 	add.w	r3, r7, #28
 8004730:	4618      	mov	r0, r3
 8004732:	f000 fe4f 	bl	80053d4 <Lcd_display_parameter>
		  		  G_Code.G_Line[0].coordY = display_coordY*10;
 8004736:	4b59      	ldr	r3, [pc, #356]	; (800489c <main+0x638>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	b29b      	uxth	r3, r3
 800473c:	461a      	mov	r2, r3
 800473e:	0092      	lsls	r2, r2, #2
 8004740:	4413      	add	r3, r2
 8004742:	005b      	lsls	r3, r3, #1
 8004744:	b29a      	uxth	r2, r3
 8004746:	4b53      	ldr	r3, [pc, #332]	; (8004894 <main+0x630>)
 8004748:	809a      	strh	r2, [r3, #4]
		  		  break;
 800474a:	e0de      	b.n	800490a <main+0x6a6>

		  	  case '5':								// Y-
		  		  display_coordY-= 10;
 800474c:	4b53      	ldr	r3, [pc, #332]	; (800489c <main+0x638>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	3b0a      	subs	r3, #10
 8004752:	4a52      	ldr	r2, [pc, #328]	; (800489c <main+0x638>)
 8004754:	6013      	str	r3, [r2, #0]
		  		  if(display_coordY<0) display_coordY=100;
 8004756:	4b51      	ldr	r3, [pc, #324]	; (800489c <main+0x638>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	2b00      	cmp	r3, #0
 800475c:	da02      	bge.n	8004764 <main+0x500>
 800475e:	4b4f      	ldr	r3, [pc, #316]	; (800489c <main+0x638>)
 8004760:	2264      	movs	r2, #100	; 0x64
 8004762:	601a      	str	r2, [r3, #0]
		  		  Lcd_display_parameter(&lcd);
 8004764:	f107 031c 	add.w	r3, r7, #28
 8004768:	4618      	mov	r0, r3
 800476a:	f000 fe33 	bl	80053d4 <Lcd_display_parameter>
		  		  G_Code.G_Line[0].coordY = display_coordY*10;
 800476e:	4b4b      	ldr	r3, [pc, #300]	; (800489c <main+0x638>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	b29b      	uxth	r3, r3
 8004774:	461a      	mov	r2, r3
 8004776:	0092      	lsls	r2, r2, #2
 8004778:	4413      	add	r3, r2
 800477a:	005b      	lsls	r3, r3, #1
 800477c:	b29a      	uxth	r2, r3
 800477e:	4b45      	ldr	r3, [pc, #276]	; (8004894 <main+0x630>)
 8004780:	809a      	strh	r2, [r3, #4]
		  		  break;
 8004782:	e0c2      	b.n	800490a <main+0x6a6>

		  	  case '6':
		  		  runMotor(&stepMotor2,100, CLOCKWISE); 	// Let motor2 (Y) run 100 steps clockwise and set current position Y = 0
 8004784:	2201      	movs	r2, #1
 8004786:	2164      	movs	r1, #100	; 0x64
 8004788:	4845      	ldr	r0, [pc, #276]	; (80048a0 <main+0x63c>)
 800478a:	f001 f941 	bl	8005a10 <runMotor>
		  		  break;
 800478e:	e0bc      	b.n	800490a <main+0x6a6>

		  	  case 'B':
		  		  runMotor(&stepMotor2,100, ANTICLOCKWISE); // Let motor2 (Y) run 100 steps anti-clockwise and set current position Y = 0
 8004790:	2200      	movs	r2, #0
 8004792:	2164      	movs	r1, #100	; 0x64
 8004794:	4842      	ldr	r0, [pc, #264]	; (80048a0 <main+0x63c>)
 8004796:	f001 f93b 	bl	8005a10 <runMotor>
		  		  break;
 800479a:	e0b6      	b.n	800490a <main+0x6a6>


		  	  case '7':								// F+
		  		  display_speed_ref +=10;
 800479c:	4b41      	ldr	r3, [pc, #260]	; (80048a4 <main+0x640>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	330a      	adds	r3, #10
 80047a2:	4a40      	ldr	r2, [pc, #256]	; (80048a4 <main+0x640>)
 80047a4:	6013      	str	r3, [r2, #0]
		  		  G_Code.G_Line[0].speed_ref += 1000 ;
 80047a6:	4b3b      	ldr	r3, [pc, #236]	; (8004894 <main+0x630>)
 80047a8:	88db      	ldrh	r3, [r3, #6]
 80047aa:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80047ae:	b29a      	uxth	r2, r3
 80047b0:	4b38      	ldr	r3, [pc, #224]	; (8004894 <main+0x630>)
 80047b2:	80da      	strh	r2, [r3, #6]
		  		  if(display_speed_ref>50) display_speed_ref = 10;
 80047b4:	4b3b      	ldr	r3, [pc, #236]	; (80048a4 <main+0x640>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2b32      	cmp	r3, #50	; 0x32
 80047ba:	dd02      	ble.n	80047c2 <main+0x55e>
 80047bc:	4b39      	ldr	r3, [pc, #228]	; (80048a4 <main+0x640>)
 80047be:	220a      	movs	r2, #10
 80047c0:	601a      	str	r2, [r3, #0]
		  		  Lcd_display_parameter(&lcd);
 80047c2:	f107 031c 	add.w	r3, r7, #28
 80047c6:	4618      	mov	r0, r3
 80047c8:	f000 fe04 	bl	80053d4 <Lcd_display_parameter>
		  		  break;
 80047cc:	e09d      	b.n	800490a <main+0x6a6>

		  	  case '8':								// F+
		  		  display_speed_ref -=10;
 80047ce:	4b35      	ldr	r3, [pc, #212]	; (80048a4 <main+0x640>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	3b0a      	subs	r3, #10
 80047d4:	4a33      	ldr	r2, [pc, #204]	; (80048a4 <main+0x640>)
 80047d6:	6013      	str	r3, [r2, #0]
		  		  G_Code.G_Line[0].speed_ref--;
 80047d8:	4b2e      	ldr	r3, [pc, #184]	; (8004894 <main+0x630>)
 80047da:	88db      	ldrh	r3, [r3, #6]
 80047dc:	3b01      	subs	r3, #1
 80047de:	b29a      	uxth	r2, r3
 80047e0:	4b2c      	ldr	r3, [pc, #176]	; (8004894 <main+0x630>)
 80047e2:	80da      	strh	r2, [r3, #6]
		  		  if(display_speed_ref< 10) display_speed_ref=50;
 80047e4:	4b2f      	ldr	r3, [pc, #188]	; (80048a4 <main+0x640>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2b09      	cmp	r3, #9
 80047ea:	dc02      	bgt.n	80047f2 <main+0x58e>
 80047ec:	4b2d      	ldr	r3, [pc, #180]	; (80048a4 <main+0x640>)
 80047ee:	2232      	movs	r2, #50	; 0x32
 80047f0:	601a      	str	r2, [r3, #0]
		  		  Lcd_display_parameter(&lcd);
 80047f2:	f107 031c 	add.w	r3, r7, #28
 80047f6:	4618      	mov	r0, r3
 80047f8:	f000 fdec 	bl	80053d4 <Lcd_display_parameter>
		  		  break;
 80047fc:	e085      	b.n	800490a <main+0x6a6>

		  	  case '9':
		  		  break;

		  	  case '*':
		  		  Lcd_clear(&lcd);
 80047fe:	f107 031c 	add.w	r3, r7, #28
 8004802:	4618      	mov	r0, r3
 8004804:	f7ff f992 	bl	8003b2c <Lcd_clear>
		  		  Lcd_cursor(&lcd, 0, 4);
 8004808:	f107 031c 	add.w	r3, r7, #28
 800480c:	2204      	movs	r2, #4
 800480e:	2100      	movs	r1, #0
 8004810:	4618      	mov	r0, r3
 8004812:	f7ff f971 	bl	8003af8 <Lcd_cursor>
		  		  Lcd_string(&lcd, "Running... ");
 8004816:	f107 031c 	add.w	r3, r7, #28
 800481a:	4923      	ldr	r1, [pc, #140]	; (80048a8 <main+0x644>)
 800481c:	4618      	mov	r0, r3
 800481e:	f7ff f94d 	bl	8003abc <Lcd_string>
		  		  G_Code.totalNumbOfLineGCode = 1;
 8004822:	4b1c      	ldr	r3, [pc, #112]	; (8004894 <main+0x630>)
 8004824:	2201      	movs	r2, #1
 8004826:	801a      	strh	r2, [r3, #0]
		  		  Start_Motors_ByGCode();
 8004828:	f000 ffca 	bl	80057c0 <Start_Motors_ByGCode>
		  		  while ((stepMotor1.state == RUNNING)||(stepMotor2.state == RUNNING)){};
 800482c:	bf00      	nop
 800482e:	4b1a      	ldr	r3, [pc, #104]	; (8004898 <main+0x634>)
 8004830:	7a1b      	ldrb	r3, [r3, #8]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d0fb      	beq.n	800482e <main+0x5ca>
 8004836:	4b1a      	ldr	r3, [pc, #104]	; (80048a0 <main+0x63c>)
 8004838:	7a1b      	ldrb	r3, [r3, #8]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d0f7      	beq.n	800482e <main+0x5ca>
		  		  Lcd_clear(&lcd);
 800483e:	f107 031c 	add.w	r3, r7, #28
 8004842:	4618      	mov	r0, r3
 8004844:	f7ff f972 	bl	8003b2c <Lcd_clear>
		  		  Lcd_cursor(&lcd, 0, 4);
 8004848:	f107 031c 	add.w	r3, r7, #28
 800484c:	2204      	movs	r2, #4
 800484e:	2100      	movs	r1, #0
 8004850:	4618      	mov	r0, r3
 8004852:	f7ff f951 	bl	8003af8 <Lcd_cursor>
		  		  Lcd_string(&lcd, "FINISH");
 8004856:	f107 031c 	add.w	r3, r7, #28
 800485a:	4914      	ldr	r1, [pc, #80]	; (80048ac <main+0x648>)
 800485c:	4618      	mov	r0, r3
 800485e:	f7ff f92d 	bl	8003abc <Lcd_string>
		  		  Lcd_cursor(&lcd, 1, 0);
 8004862:	f107 031c 	add.w	r3, r7, #28
 8004866:	2200      	movs	r2, #0
 8004868:	2101      	movs	r1, #1
 800486a:	4618      	mov	r0, r3
 800486c:	f7ff f944 	bl	8003af8 <Lcd_cursor>
		  		  Lcd_string(&lcd, "Press 0 to exit");
 8004870:	f107 031c 	add.w	r3, r7, #28
 8004874:	490e      	ldr	r1, [pc, #56]	; (80048b0 <main+0x64c>)
 8004876:	4618      	mov	r0, r3
 8004878:	f7ff f920 	bl	8003abc <Lcd_string>
		  		  break;
 800487c:	e045      	b.n	800490a <main+0x6a6>
 800487e:	bf00      	nop
 8004880:	20000444 	.word	0x20000444
 8004884:	20001c00 	.word	0x20001c00
 8004888:	20001bb8 	.word	0x20001bb8
 800488c:	20000418 	.word	0x20000418
 8004890:	2000041c 	.word	0x2000041c
 8004894:	20001b3c 	.word	0x20001b3c
 8004898:	200043d8 	.word	0x200043d8
 800489c:	20000420 	.word	0x20000420
 80048a0:	200043f0 	.word	0x200043f0
 80048a4:	20000424 	.word	0x20000424
 80048a8:	0800a1ec 	.word	0x0800a1ec
 80048ac:	0800a1f8 	.word	0x0800a1f8
 80048b0:	0800a200 	.word	0x0800a200

		  	  case '0':
		  		  Lcd_clear(&lcd);
 80048b4:	f107 031c 	add.w	r3, r7, #28
 80048b8:	4618      	mov	r0, r3
 80048ba:	f7ff f937 	bl	8003b2c <Lcd_clear>
		  		  Lcd_string(&lcd, "Handle Mode");
 80048be:	f107 031c 	add.w	r3, r7, #28
 80048c2:	4912      	ldr	r1, [pc, #72]	; (800490c <main+0x6a8>)
 80048c4:	4618      	mov	r0, r3
 80048c6:	f7ff f8f9 	bl	8003abc <Lcd_string>
		  		  Lcd_cursor(&lcd, 1, 0);
 80048ca:	f107 031c 	add.w	r3, r7, #28
 80048ce:	2200      	movs	r2, #0
 80048d0:	2101      	movs	r1, #1
 80048d2:	4618      	mov	r0, r3
 80048d4:	f7ff f910 	bl	8003af8 <Lcd_cursor>
		  		  Lcd_string(&lcd, "Press '#' to run");
 80048d8:	f107 031c 	add.w	r3, r7, #28
 80048dc:	490c      	ldr	r1, [pc, #48]	; (8004910 <main+0x6ac>)
 80048de:	4618      	mov	r0, r3
 80048e0:	f7ff f8ec 	bl	8003abc <Lcd_string>
		  		  break;
 80048e4:	e011      	b.n	800490a <main+0x6a6>

		  	  case '#':
		  		  Xk = 0;
 80048e6:	4b0b      	ldr	r3, [pc, #44]	; (8004914 <main+0x6b0>)
 80048e8:	2200      	movs	r2, #0
 80048ea:	801a      	strh	r2, [r3, #0]
		  		  Yk = 0;
 80048ec:	4b0a      	ldr	r3, [pc, #40]	; (8004918 <main+0x6b4>)
 80048ee:	2200      	movs	r2, #0
 80048f0:	801a      	strh	r2, [r3, #0]
		  		  temp_coordX = 0;
 80048f2:	4b0a      	ldr	r3, [pc, #40]	; (800491c <main+0x6b8>)
 80048f4:	2200      	movs	r2, #0
 80048f6:	801a      	strh	r2, [r3, #0]
		  		  temp_coordY = 0;
 80048f8:	4b09      	ldr	r3, [pc, #36]	; (8004920 <main+0x6bc>)
 80048fa:	2200      	movs	r2, #0
 80048fc:	801a      	strh	r2, [r3, #0]
		  		  Lcd_display_parameter(&lcd);
 80048fe:	f107 031c 	add.w	r3, r7, #28
 8004902:	4618      	mov	r0, r3
 8004904:	f000 fd66 	bl	80053d4 <Lcd_display_parameter>
		  		  break;
 8004908:	bf00      	nop
	  if(MODE == AUTO_MODE)
 800490a:	e597      	b.n	800443c <main+0x1d8>
 800490c:	0800a1cc 	.word	0x0800a1cc
 8004910:	0800a1d8 	.word	0x0800a1d8
 8004914:	20000428 	.word	0x20000428
 8004918:	2000042a 	.word	0x2000042a
 800491c:	200019a0 	.word	0x200019a0
 8004920:	20001998 	.word	0x20001998

08004924 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b094      	sub	sp, #80	; 0x50
 8004928:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800492a:	f107 0320 	add.w	r3, r7, #32
 800492e:	2230      	movs	r2, #48	; 0x30
 8004930:	2100      	movs	r1, #0
 8004932:	4618      	mov	r0, r3
 8004934:	f001 fac6 	bl	8005ec4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004938:	f107 030c 	add.w	r3, r7, #12
 800493c:	2200      	movs	r2, #0
 800493e:	601a      	str	r2, [r3, #0]
 8004940:	605a      	str	r2, [r3, #4]
 8004942:	609a      	str	r2, [r3, #8]
 8004944:	60da      	str	r2, [r3, #12]
 8004946:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004948:	2300      	movs	r3, #0
 800494a:	60bb      	str	r3, [r7, #8]
 800494c:	4b27      	ldr	r3, [pc, #156]	; (80049ec <SystemClock_Config+0xc8>)
 800494e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004950:	4a26      	ldr	r2, [pc, #152]	; (80049ec <SystemClock_Config+0xc8>)
 8004952:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004956:	6413      	str	r3, [r2, #64]	; 0x40
 8004958:	4b24      	ldr	r3, [pc, #144]	; (80049ec <SystemClock_Config+0xc8>)
 800495a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004960:	60bb      	str	r3, [r7, #8]
 8004962:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004964:	2300      	movs	r3, #0
 8004966:	607b      	str	r3, [r7, #4]
 8004968:	4b21      	ldr	r3, [pc, #132]	; (80049f0 <SystemClock_Config+0xcc>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a20      	ldr	r2, [pc, #128]	; (80049f0 <SystemClock_Config+0xcc>)
 800496e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004972:	6013      	str	r3, [r2, #0]
 8004974:	4b1e      	ldr	r3, [pc, #120]	; (80049f0 <SystemClock_Config+0xcc>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800497c:	607b      	str	r3, [r7, #4]
 800497e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004980:	2302      	movs	r3, #2
 8004982:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004984:	2301      	movs	r3, #1
 8004986:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004988:	2310      	movs	r3, #16
 800498a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800498c:	2302      	movs	r3, #2
 800498e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004990:	2300      	movs	r3, #0
 8004992:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8004994:	2310      	movs	r3, #16
 8004996:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 200;
 8004998:	23c8      	movs	r3, #200	; 0xc8
 800499a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800499c:	2304      	movs	r3, #4
 800499e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80049a0:	2304      	movs	r3, #4
 80049a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80049a4:	f107 0320 	add.w	r3, r7, #32
 80049a8:	4618      	mov	r0, r3
 80049aa:	f7fc fe89 	bl	80016c0 <HAL_RCC_OscConfig>
 80049ae:	4603      	mov	r3, r0
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d001      	beq.n	80049b8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80049b4:	f001 f8a8 	bl	8005b08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80049b8:	230f      	movs	r3, #15
 80049ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80049bc:	2302      	movs	r3, #2
 80049be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80049c0:	2300      	movs	r3, #0
 80049c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80049c4:	2300      	movs	r3, #0
 80049c6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80049c8:	2300      	movs	r3, #0
 80049ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80049cc:	f107 030c 	add.w	r3, r7, #12
 80049d0:	2101      	movs	r1, #1
 80049d2:	4618      	mov	r0, r3
 80049d4:	f7fd f8e4 	bl	8001ba0 <HAL_RCC_ClockConfig>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d001      	beq.n	80049e2 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80049de:	f001 f893 	bl	8005b08 <Error_Handler>
  }
}
 80049e2:	bf00      	nop
 80049e4:	3750      	adds	r7, #80	; 0x50
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	40023800 	.word	0x40023800
 80049f0:	40007000 	.word	0x40007000

080049f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b086      	sub	sp, #24
 80049f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80049fa:	f107 0308 	add.w	r3, r7, #8
 80049fe:	2200      	movs	r2, #0
 8004a00:	601a      	str	r2, [r3, #0]
 8004a02:	605a      	str	r2, [r3, #4]
 8004a04:	609a      	str	r2, [r3, #8]
 8004a06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004a08:	463b      	mov	r3, r7
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	601a      	str	r2, [r3, #0]
 8004a0e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004a10:	4b1e      	ldr	r3, [pc, #120]	; (8004a8c <MX_TIM2_Init+0x98>)
 8004a12:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004a16:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4999;
 8004a18:	4b1c      	ldr	r3, [pc, #112]	; (8004a8c <MX_TIM2_Init+0x98>)
 8004a1a:	f241 3287 	movw	r2, #4999	; 0x1387
 8004a1e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a20:	4b1a      	ldr	r3, [pc, #104]	; (8004a8c <MX_TIM2_Init+0x98>)
 8004a22:	2200      	movs	r2, #0
 8004a24:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 599;
 8004a26:	4b19      	ldr	r3, [pc, #100]	; (8004a8c <MX_TIM2_Init+0x98>)
 8004a28:	f240 2257 	movw	r2, #599	; 0x257
 8004a2c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004a2e:	4b17      	ldr	r3, [pc, #92]	; (8004a8c <MX_TIM2_Init+0x98>)
 8004a30:	2200      	movs	r2, #0
 8004a32:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004a34:	4b15      	ldr	r3, [pc, #84]	; (8004a8c <MX_TIM2_Init+0x98>)
 8004a36:	2200      	movs	r2, #0
 8004a38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004a3a:	4814      	ldr	r0, [pc, #80]	; (8004a8c <MX_TIM2_Init+0x98>)
 8004a3c:	f7fd fa7c 	bl	8001f38 <HAL_TIM_Base_Init>
 8004a40:	4603      	mov	r3, r0
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d001      	beq.n	8004a4a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8004a46:	f001 f85f 	bl	8005b08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004a4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a4e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004a50:	f107 0308 	add.w	r3, r7, #8
 8004a54:	4619      	mov	r1, r3
 8004a56:	480d      	ldr	r0, [pc, #52]	; (8004a8c <MX_TIM2_Init+0x98>)
 8004a58:	f7fd fc14 	bl	8002284 <HAL_TIM_ConfigClockSource>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d001      	beq.n	8004a66 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8004a62:	f001 f851 	bl	8005b08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004a66:	2300      	movs	r3, #0
 8004a68:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004a6e:	463b      	mov	r3, r7
 8004a70:	4619      	mov	r1, r3
 8004a72:	4806      	ldr	r0, [pc, #24]	; (8004a8c <MX_TIM2_Init+0x98>)
 8004a74:	f7fd fe00 	bl	8002678 <HAL_TIMEx_MasterConfigSynchronization>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d001      	beq.n	8004a82 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8004a7e:	f001 f843 	bl	8005b08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004a82:	bf00      	nop
 8004a84:	3718      	adds	r7, #24
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	20004398 	.word	0x20004398

08004a90 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b086      	sub	sp, #24
 8004a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004a96:	f107 0308 	add.w	r3, r7, #8
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	601a      	str	r2, [r3, #0]
 8004a9e:	605a      	str	r2, [r3, #4]
 8004aa0:	609a      	str	r2, [r3, #8]
 8004aa2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004aa4:	463b      	mov	r3, r7
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	601a      	str	r2, [r3, #0]
 8004aaa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004aac:	4b1d      	ldr	r3, [pc, #116]	; (8004b24 <MX_TIM3_Init+0x94>)
 8004aae:	4a1e      	ldr	r2, [pc, #120]	; (8004b28 <MX_TIM3_Init+0x98>)
 8004ab0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 499;
 8004ab2:	4b1c      	ldr	r3, [pc, #112]	; (8004b24 <MX_TIM3_Init+0x94>)
 8004ab4:	f240 12f3 	movw	r2, #499	; 0x1f3
 8004ab8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004aba:	4b1a      	ldr	r3, [pc, #104]	; (8004b24 <MX_TIM3_Init+0x94>)
 8004abc:	2200      	movs	r2, #0
 8004abe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004ac0:	4b18      	ldr	r3, [pc, #96]	; (8004b24 <MX_TIM3_Init+0x94>)
 8004ac2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ac6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004ac8:	4b16      	ldr	r3, [pc, #88]	; (8004b24 <MX_TIM3_Init+0x94>)
 8004aca:	2200      	movs	r2, #0
 8004acc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004ace:	4b15      	ldr	r3, [pc, #84]	; (8004b24 <MX_TIM3_Init+0x94>)
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004ad4:	4813      	ldr	r0, [pc, #76]	; (8004b24 <MX_TIM3_Init+0x94>)
 8004ad6:	f7fd fa2f 	bl	8001f38 <HAL_TIM_Base_Init>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d001      	beq.n	8004ae4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8004ae0:	f001 f812 	bl	8005b08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004ae4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ae8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004aea:	f107 0308 	add.w	r3, r7, #8
 8004aee:	4619      	mov	r1, r3
 8004af0:	480c      	ldr	r0, [pc, #48]	; (8004b24 <MX_TIM3_Init+0x94>)
 8004af2:	f7fd fbc7 	bl	8002284 <HAL_TIM_ConfigClockSource>
 8004af6:	4603      	mov	r3, r0
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d001      	beq.n	8004b00 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8004afc:	f001 f804 	bl	8005b08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b00:	2300      	movs	r3, #0
 8004b02:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b04:	2300      	movs	r3, #0
 8004b06:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004b08:	463b      	mov	r3, r7
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	4805      	ldr	r0, [pc, #20]	; (8004b24 <MX_TIM3_Init+0x94>)
 8004b0e:	f7fd fdb3 	bl	8002678 <HAL_TIMEx_MasterConfigSynchronization>
 8004b12:	4603      	mov	r3, r0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d001      	beq.n	8004b1c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8004b18:	f000 fff6 	bl	8005b08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004b1c:	bf00      	nop
 8004b1e:	3718      	adds	r7, #24
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	20001c00 	.word	0x20001c00
 8004b28:	40000400 	.word	0x40000400

08004b2c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b086      	sub	sp, #24
 8004b30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004b32:	f107 0308 	add.w	r3, r7, #8
 8004b36:	2200      	movs	r2, #0
 8004b38:	601a      	str	r2, [r3, #0]
 8004b3a:	605a      	str	r2, [r3, #4]
 8004b3c:	609a      	str	r2, [r3, #8]
 8004b3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004b40:	463b      	mov	r3, r7
 8004b42:	2200      	movs	r2, #0
 8004b44:	601a      	str	r2, [r3, #0]
 8004b46:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004b48:	4b1d      	ldr	r3, [pc, #116]	; (8004bc0 <MX_TIM4_Init+0x94>)
 8004b4a:	4a1e      	ldr	r2, [pc, #120]	; (8004bc4 <MX_TIM4_Init+0x98>)
 8004b4c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 499;
 8004b4e:	4b1c      	ldr	r3, [pc, #112]	; (8004bc0 <MX_TIM4_Init+0x94>)
 8004b50:	f240 12f3 	movw	r2, #499	; 0x1f3
 8004b54:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b56:	4b1a      	ldr	r3, [pc, #104]	; (8004bc0 <MX_TIM4_Init+0x94>)
 8004b58:	2200      	movs	r2, #0
 8004b5a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8004b5c:	4b18      	ldr	r3, [pc, #96]	; (8004bc0 <MX_TIM4_Init+0x94>)
 8004b5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b62:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b64:	4b16      	ldr	r3, [pc, #88]	; (8004bc0 <MX_TIM4_Init+0x94>)
 8004b66:	2200      	movs	r2, #0
 8004b68:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004b6a:	4b15      	ldr	r3, [pc, #84]	; (8004bc0 <MX_TIM4_Init+0x94>)
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004b70:	4813      	ldr	r0, [pc, #76]	; (8004bc0 <MX_TIM4_Init+0x94>)
 8004b72:	f7fd f9e1 	bl	8001f38 <HAL_TIM_Base_Init>
 8004b76:	4603      	mov	r3, r0
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d001      	beq.n	8004b80 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8004b7c:	f000 ffc4 	bl	8005b08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004b80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b84:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004b86:	f107 0308 	add.w	r3, r7, #8
 8004b8a:	4619      	mov	r1, r3
 8004b8c:	480c      	ldr	r0, [pc, #48]	; (8004bc0 <MX_TIM4_Init+0x94>)
 8004b8e:	f7fd fb79 	bl	8002284 <HAL_TIM_ConfigClockSource>
 8004b92:	4603      	mov	r3, r0
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d001      	beq.n	8004b9c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8004b98:	f000 ffb6 	bl	8005b08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004ba4:	463b      	mov	r3, r7
 8004ba6:	4619      	mov	r1, r3
 8004ba8:	4805      	ldr	r0, [pc, #20]	; (8004bc0 <MX_TIM4_Init+0x94>)
 8004baa:	f7fd fd65 	bl	8002678 <HAL_TIMEx_MasterConfigSynchronization>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d001      	beq.n	8004bb8 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8004bb4:	f000 ffa8 	bl	8005b08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004bb8:	bf00      	nop
 8004bba:	3718      	adds	r7, #24
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}
 8004bc0:	20001bb8 	.word	0x20001bb8
 8004bc4:	40000800 	.word	0x40000800

08004bc8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8004bcc:	4b11      	ldr	r3, [pc, #68]	; (8004c14 <MX_USART6_UART_Init+0x4c>)
 8004bce:	4a12      	ldr	r2, [pc, #72]	; (8004c18 <MX_USART6_UART_Init+0x50>)
 8004bd0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8004bd2:	4b10      	ldr	r3, [pc, #64]	; (8004c14 <MX_USART6_UART_Init+0x4c>)
 8004bd4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004bd8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8004bda:	4b0e      	ldr	r3, [pc, #56]	; (8004c14 <MX_USART6_UART_Init+0x4c>)
 8004bdc:	2200      	movs	r2, #0
 8004bde:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004be0:	4b0c      	ldr	r3, [pc, #48]	; (8004c14 <MX_USART6_UART_Init+0x4c>)
 8004be2:	2200      	movs	r2, #0
 8004be4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8004be6:	4b0b      	ldr	r3, [pc, #44]	; (8004c14 <MX_USART6_UART_Init+0x4c>)
 8004be8:	2200      	movs	r2, #0
 8004bea:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8004bec:	4b09      	ldr	r3, [pc, #36]	; (8004c14 <MX_USART6_UART_Init+0x4c>)
 8004bee:	220c      	movs	r2, #12
 8004bf0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004bf2:	4b08      	ldr	r3, [pc, #32]	; (8004c14 <MX_USART6_UART_Init+0x4c>)
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004bf8:	4b06      	ldr	r3, [pc, #24]	; (8004c14 <MX_USART6_UART_Init+0x4c>)
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8004bfe:	4805      	ldr	r0, [pc, #20]	; (8004c14 <MX_USART6_UART_Init+0x4c>)
 8004c00:	f7fd fdbc 	bl	800277c <HAL_UART_Init>
 8004c04:	4603      	mov	r3, r0
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d001      	beq.n	8004c0e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8004c0a:	f000 ff7d 	bl	8005b08 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8004c0e:	bf00      	nop
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	20004354 	.word	0x20004354
 8004c18:	40011400 	.word	0x40011400

08004c1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b088      	sub	sp, #32
 8004c20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c22:	f107 030c 	add.w	r3, r7, #12
 8004c26:	2200      	movs	r2, #0
 8004c28:	601a      	str	r2, [r3, #0]
 8004c2a:	605a      	str	r2, [r3, #4]
 8004c2c:	609a      	str	r2, [r3, #8]
 8004c2e:	60da      	str	r2, [r3, #12]
 8004c30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c32:	2300      	movs	r3, #0
 8004c34:	60bb      	str	r3, [r7, #8]
 8004c36:	4b63      	ldr	r3, [pc, #396]	; (8004dc4 <MX_GPIO_Init+0x1a8>)
 8004c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c3a:	4a62      	ldr	r2, [pc, #392]	; (8004dc4 <MX_GPIO_Init+0x1a8>)
 8004c3c:	f043 0304 	orr.w	r3, r3, #4
 8004c40:	6313      	str	r3, [r2, #48]	; 0x30
 8004c42:	4b60      	ldr	r3, [pc, #384]	; (8004dc4 <MX_GPIO_Init+0x1a8>)
 8004c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c46:	f003 0304 	and.w	r3, r3, #4
 8004c4a:	60bb      	str	r3, [r7, #8]
 8004c4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c4e:	2300      	movs	r3, #0
 8004c50:	607b      	str	r3, [r7, #4]
 8004c52:	4b5c      	ldr	r3, [pc, #368]	; (8004dc4 <MX_GPIO_Init+0x1a8>)
 8004c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c56:	4a5b      	ldr	r2, [pc, #364]	; (8004dc4 <MX_GPIO_Init+0x1a8>)
 8004c58:	f043 0301 	orr.w	r3, r3, #1
 8004c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8004c5e:	4b59      	ldr	r3, [pc, #356]	; (8004dc4 <MX_GPIO_Init+0x1a8>)
 8004c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c62:	f003 0301 	and.w	r3, r3, #1
 8004c66:	607b      	str	r3, [r7, #4]
 8004c68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	603b      	str	r3, [r7, #0]
 8004c6e:	4b55      	ldr	r3, [pc, #340]	; (8004dc4 <MX_GPIO_Init+0x1a8>)
 8004c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c72:	4a54      	ldr	r2, [pc, #336]	; (8004dc4 <MX_GPIO_Init+0x1a8>)
 8004c74:	f043 0302 	orr.w	r3, r3, #2
 8004c78:	6313      	str	r3, [r2, #48]	; 0x30
 8004c7a:	4b52      	ldr	r3, [pc, #328]	; (8004dc4 <MX_GPIO_Init+0x1a8>)
 8004c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c7e:	f003 0302 	and.w	r3, r3, #2
 8004c82:	603b      	str	r3, [r7, #0]
 8004c84:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_DB5_Pin|Motor1_Pin1_Pin|Motor1_Pin2_Pin|Motor1_Pin3_Pin 
 8004c86:	2200      	movs	r2, #0
 8004c88:	f240 41f1 	movw	r1, #1265	; 0x4f1
 8004c8c:	484e      	ldr	r0, [pc, #312]	; (8004dc8 <MX_GPIO_Init+0x1ac>)
 8004c8e:	f7fc fce5 	bl	800165c <HAL_GPIO_WritePin>
                          |Motor1_Pin4_Pin|KeyBoard_8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_RS_Pin|LCD_EN_Pin|LCD_DB7_Pin|LCD_DB6_Pin, GPIO_PIN_RESET);
 8004c92:	2200      	movs	r2, #0
 8004c94:	f44f 51a9 	mov.w	r1, #5408	; 0x1520
 8004c98:	484c      	ldr	r0, [pc, #304]	; (8004dcc <MX_GPIO_Init+0x1b0>)
 8004c9a:	f7fc fcdf 	bl	800165c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Motor2_Pin4_Pin|KeyBoard_7_Pin|KeyBoard_5_Pin|KeyBoard_6_Pin 
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	f240 31f9 	movw	r1, #1017	; 0x3f9
 8004ca4:	484a      	ldr	r0, [pc, #296]	; (8004dd0 <MX_GPIO_Init+0x1b4>)
 8004ca6:	f7fc fcd9 	bl	800165c <HAL_GPIO_WritePin>
                          |Motor2_Pin3_Pin|LCD_DB4_Pin|Motor2_Pin1_Pin|Motor2_Pin2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004caa:	2301      	movs	r3, #1
 8004cac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004cae:	4b49      	ldr	r3, [pc, #292]	; (8004dd4 <MX_GPIO_Init+0x1b8>)
 8004cb0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004cb2:	2302      	movs	r3, #2
 8004cb4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004cb6:	f107 030c 	add.w	r3, r7, #12
 8004cba:	4619      	mov	r1, r3
 8004cbc:	4843      	ldr	r0, [pc, #268]	; (8004dcc <MX_GPIO_Init+0x1b0>)
 8004cbe:	f7fc fb33 	bl	8001328 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004cc2:	2302      	movs	r3, #2
 8004cc4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004cce:	f107 030c 	add.w	r3, r7, #12
 8004cd2:	4619      	mov	r1, r3
 8004cd4:	483d      	ldr	r0, [pc, #244]	; (8004dcc <MX_GPIO_Init+0x1b0>)
 8004cd6:	f7fc fb27 	bl	8001328 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DB5_Pin Motor1_Pin1_Pin Motor1_Pin2_Pin Motor1_Pin3_Pin 
                           Motor1_Pin4_Pin KeyBoard_8_Pin */
  GPIO_InitStruct.Pin = LCD_DB5_Pin|Motor1_Pin1_Pin|Motor1_Pin2_Pin|Motor1_Pin3_Pin 
 8004cda:	f240 43f1 	movw	r3, #1265	; 0x4f1
 8004cde:	60fb      	str	r3, [r7, #12]
                          |Motor1_Pin4_Pin|KeyBoard_8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cec:	f107 030c 	add.w	r3, r7, #12
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	4835      	ldr	r0, [pc, #212]	; (8004dc8 <MX_GPIO_Init+0x1ac>)
 8004cf4:	f7fc fb18 	bl	8001328 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RS_Pin LCD_EN_Pin LCD_DB7_Pin LCD_DB6_Pin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_EN_Pin|LCD_DB7_Pin|LCD_DB6_Pin;
 8004cf8:	f44f 53a9 	mov.w	r3, #5408	; 0x1520
 8004cfc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d02:	2300      	movs	r3, #0
 8004d04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d06:	2300      	movs	r3, #0
 8004d08:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004d0a:	f107 030c 	add.w	r3, r7, #12
 8004d0e:	4619      	mov	r1, r3
 8004d10:	482e      	ldr	r0, [pc, #184]	; (8004dcc <MX_GPIO_Init+0x1b0>)
 8004d12:	f7fc fb09 	bl	8001328 <HAL_GPIO_Init>

  /*Configure GPIO pins : Motor2_Pin4_Pin KeyBoard_7_Pin KeyBoard_5_Pin KeyBoard_6_Pin 
                           Motor2_Pin3_Pin LCD_DB4_Pin Motor2_Pin1_Pin Motor2_Pin2_Pin */
  GPIO_InitStruct.Pin = Motor2_Pin4_Pin|KeyBoard_7_Pin|KeyBoard_5_Pin|KeyBoard_6_Pin 
 8004d16:	f240 33f9 	movw	r3, #1017	; 0x3f9
 8004d1a:	60fb      	str	r3, [r7, #12]
                          |Motor2_Pin3_Pin|LCD_DB4_Pin|Motor2_Pin1_Pin|Motor2_Pin2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d20:	2300      	movs	r3, #0
 8004d22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d24:	2300      	movs	r3, #0
 8004d26:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d28:	f107 030c 	add.w	r3, r7, #12
 8004d2c:	4619      	mov	r1, r3
 8004d2e:	4828      	ldr	r0, [pc, #160]	; (8004dd0 <MX_GPIO_Init+0x1b4>)
 8004d30:	f7fc fafa 	bl	8001328 <HAL_GPIO_Init>

  /*Configure GPIO pins : KeyBoard_2_Pin KeyBoard_1_Pin KeyBoard_4_Pin */
  GPIO_InitStruct.Pin = KeyBoard_2_Pin|KeyBoard_1_Pin|KeyBoard_4_Pin;
 8004d34:	f240 4306 	movw	r3, #1030	; 0x406
 8004d38:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d42:	f107 030c 	add.w	r3, r7, #12
 8004d46:	4619      	mov	r1, r3
 8004d48:	4821      	ldr	r0, [pc, #132]	; (8004dd0 <MX_GPIO_Init+0x1b4>)
 8004d4a:	f7fc faed 	bl	8001328 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004d4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004d52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004d54:	2300      	movs	r3, #0
 8004d56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d5c:	f107 030c 	add.w	r3, r7, #12
 8004d60:	4619      	mov	r1, r3
 8004d62:	481b      	ldr	r0, [pc, #108]	; (8004dd0 <MX_GPIO_Init+0x1b4>)
 8004d64:	f7fc fae0 	bl	8001328 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8004d68:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004d6c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004d6e:	4b19      	ldr	r3, [pc, #100]	; (8004dd4 <MX_GPIO_Init+0x1b8>)
 8004d70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004d72:	2302      	movs	r3, #2
 8004d74:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d76:	f107 030c 	add.w	r3, r7, #12
 8004d7a:	4619      	mov	r1, r3
 8004d7c:	4814      	ldr	r0, [pc, #80]	; (8004dd0 <MX_GPIO_Init+0x1b4>)
 8004d7e:	f7fc fad3 	bl	8001328 <HAL_GPIO_Init>

  /*Configure GPIO pin : KeyBoard_3_Pin */
  GPIO_InitStruct.Pin = KeyBoard_3_Pin;
 8004d82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(KeyBoard_3_GPIO_Port, &GPIO_InitStruct);
 8004d90:	f107 030c 	add.w	r3, r7, #12
 8004d94:	4619      	mov	r1, r3
 8004d96:	480c      	ldr	r0, [pc, #48]	; (8004dc8 <MX_GPIO_Init+0x1ac>)
 8004d98:	f7fc fac6 	bl	8001328 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	2100      	movs	r1, #0
 8004da0:	2006      	movs	r0, #6
 8004da2:	f7fc fa68 	bl	8001276 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8004da6:	2006      	movs	r0, #6
 8004da8:	f7fc fa81 	bl	80012ae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004dac:	2200      	movs	r2, #0
 8004dae:	2100      	movs	r1, #0
 8004db0:	2028      	movs	r0, #40	; 0x28
 8004db2:	f7fc fa60 	bl	8001276 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004db6:	2028      	movs	r0, #40	; 0x28
 8004db8:	f7fc fa79 	bl	80012ae <HAL_NVIC_EnableIRQ>

}
 8004dbc:	bf00      	nop
 8004dbe:	3720      	adds	r7, #32
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}
 8004dc4:	40023800 	.word	0x40023800
 8004dc8:	40020000 	.word	0x40020000
 8004dcc:	40020800 	.word	0x40020800
 8004dd0:	40020400 	.word	0x40020400
 8004dd4:	10210000 	.word	0x10210000

08004dd8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b082      	sub	sp, #8
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]

	if (htim2.State == HAL_TIM_STATE_BUSY)
 8004de0:	4b17      	ldr	r3, [pc, #92]	; (8004e40 <HAL_UART_RxCpltCallback+0x68>)
 8004de2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	2b02      	cmp	r3, #2
 8004dea:	d102      	bne.n	8004df2 <HAL_UART_RxCpltCallback+0x1a>
		HAL_TIM_Base_Stop_IT(&htim2);
 8004dec:	4814      	ldr	r0, [pc, #80]	; (8004e40 <HAL_UART_RxCpltCallback+0x68>)
 8004dee:	f7fd f916 	bl	800201e <HAL_TIM_Base_Stop_IT>

//	__HAL_TIM_SET_COUNTER(&htim2, 0);

	TIM2->SR &= ~1;
 8004df2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004df6:	691b      	ldr	r3, [r3, #16]
 8004df8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004dfc:	f023 0301 	bic.w	r3, r3, #1
 8004e00:	6113      	str	r3, [r2, #16]

	if (htim2.State == HAL_TIM_STATE_READY)
 8004e02:	4b0f      	ldr	r3, [pc, #60]	; (8004e40 <HAL_UART_RxCpltCallback+0x68>)
 8004e04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d102      	bne.n	8004e14 <HAL_UART_RxCpltCallback+0x3c>
		HAL_TIM_Base_Start_IT(&htim2);
 8004e0e:	480c      	ldr	r0, [pc, #48]	; (8004e40 <HAL_UART_RxCpltCallback+0x68>)
 8004e10:	f7fd f8e1 	bl	8001fd6 <HAL_TIM_Base_Start_IT>

	DataPos++;
 8004e14:	4b0b      	ldr	r3, [pc, #44]	; (8004e44 <HAL_UART_RxCpltCallback+0x6c>)
 8004e16:	781b      	ldrb	r3, [r3, #0]
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	b2da      	uxtb	r2, r3
 8004e1e:	4b09      	ldr	r3, [pc, #36]	; (8004e44 <HAL_UART_RxCpltCallback+0x6c>)
 8004e20:	701a      	strb	r2, [r3, #0]

	HAL_UART_Receive_IT(&huart6, (uint8_t*)data_in + DataPos, 1);
 8004e22:	4b08      	ldr	r3, [pc, #32]	; (8004e44 <HAL_UART_RxCpltCallback+0x6c>)
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	461a      	mov	r2, r3
 8004e2a:	4b07      	ldr	r3, [pc, #28]	; (8004e48 <HAL_UART_RxCpltCallback+0x70>)
 8004e2c:	4413      	add	r3, r2
 8004e2e:	2201      	movs	r2, #1
 8004e30:	4619      	mov	r1, r3
 8004e32:	4806      	ldr	r0, [pc, #24]	; (8004e4c <HAL_UART_RxCpltCallback+0x74>)
 8004e34:	f7fd fd88 	bl	8002948 <HAL_UART_Receive_IT>

}
 8004e38:	bf00      	nop
 8004e3a:	3708      	adds	r7, #8
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}
 8004e40:	20004398 	.word	0x20004398
 8004e44:	20001c40 	.word	0x20001c40
 8004e48:	2000044c 	.word	0x2000044c
 8004e4c:	20004354 	.word	0x20004354

08004e50 <HAL_TIM_PeriodElapsedCallback>:


 void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b082      	sub	sp, #8
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM2)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e60:	f040 8098 	bne.w	8004f94 <HAL_TIM_PeriodElapsedCallback+0x144>
	{
		HAL_TIM_Base_Stop_IT(&htim2);
 8004e64:	489e      	ldr	r0, [pc, #632]	; (80050e0 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8004e66:	f7fd f8da 	bl	800201e <HAL_TIM_Base_Stop_IT>

		if(data_in[0]== MY_SLAVE_ID)
 8004e6a:	4b9e      	ldr	r3, [pc, #632]	; (80050e4 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8004e6c:	781b      	ldrb	r3, [r3, #0]
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d17f      	bne.n	8004f74 <HAL_TIM_PeriodElapsedCallback+0x124>
		{

			switch(data_in[1])
 8004e74:	4b9b      	ldr	r3, [pc, #620]	; (80050e4 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8004e76:	785b      	ldrb	r3, [r3, #1]
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	2b06      	cmp	r3, #6
 8004e7c:	d007      	beq.n	8004e8e <HAL_TIM_PeriodElapsedCallback+0x3e>
 8004e7e:	2b10      	cmp	r3, #16
 8004e80:	d009      	beq.n	8004e96 <HAL_TIM_PeriodElapsedCallback+0x46>
 8004e82:	2b03      	cmp	r3, #3
 8004e84:	d16c      	bne.n	8004f60 <HAL_TIM_PeriodElapsedCallback+0x110>
			{
				case 0x03:
				{
					MBProcessRegisters(0x03);
 8004e86:	2003      	movs	r0, #3
 8004e88:	f7fe ffc4 	bl	8003e14 <MBProcessRegisters>
				}
				break;
 8004e8c:	e073      	b.n	8004f76 <HAL_TIM_PeriodElapsedCallback+0x126>

				case 0x06:
				{
					WriteToRegister(test);
 8004e8e:	4896      	ldr	r0, [pc, #600]	; (80050e8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8004e90:	f7ff f818 	bl	8003ec4 <WriteToRegister>
				}
				break;
 8004e94:	e06f      	b.n	8004f76 <HAL_TIM_PeriodElapsedCallback+0x126>

				case 0x10:
				{
					WriteToMultilRegisters(test);
 8004e96:	4894      	ldr	r0, [pc, #592]	; (80050e8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8004e98:	f7ff f856 	bl	8003f48 <WriteToMultilRegisters>
					CommandIsReceived = TRUE;
 8004e9c:	4b93      	ldr	r3, [pc, #588]	; (80050ec <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	701a      	strb	r2, [r3, #0]

					  switch (motor)
 8004ea2:	4b93      	ldr	r3, [pc, #588]	; (80050f0 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8004ea4:	881b      	ldrh	r3, [r3, #0]
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d002      	beq.n	8004eb2 <HAL_TIM_PeriodElapsedCallback+0x62>
 8004eac:	2b02      	cmp	r3, #2
 8004eae:	d02b      	beq.n	8004f08 <HAL_TIM_PeriodElapsedCallback+0xb8>
							stepMotor2.startStop = startStop;
							__HAL_TIM_SET_AUTORELOAD(&htim4, stepMotor2.speed*100);
						  break;

					  	  default:
					  		  break;
 8004eb0:	e055      	b.n	8004f5e <HAL_TIM_PeriodElapsedCallback+0x10e>
					  		stepMotor1.stepNumb  = stepNumb;
 8004eb2:	4b90      	ldr	r3, [pc, #576]	; (80050f4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8004eb4:	881b      	ldrh	r3, [r3, #0]
 8004eb6:	b29a      	uxth	r2, r3
 8004eb8:	4b8f      	ldr	r3, [pc, #572]	; (80050f8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8004eba:	805a      	strh	r2, [r3, #2]
					  		stepMotor1.speed 	 = speed;
 8004ebc:	4b8f      	ldr	r3, [pc, #572]	; (80050fc <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8004ebe:	881b      	ldrh	r3, [r3, #0]
 8004ec0:	b29a      	uxth	r2, r3
 8004ec2:	4b8d      	ldr	r3, [pc, #564]	; (80050f8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8004ec4:	809a      	strh	r2, [r3, #4]
					  		stepMotor1.direction = direction;
 8004ec6:	4b8e      	ldr	r3, [pc, #568]	; (8005100 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8004ec8:	881b      	ldrh	r3, [r3, #0]
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	b2da      	uxtb	r2, r3
 8004ece:	4b8a      	ldr	r3, [pc, #552]	; (80050f8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8004ed0:	719a      	strb	r2, [r3, #6]
					  		stepMotor1.startStop = startStop;
 8004ed2:	4b8c      	ldr	r3, [pc, #560]	; (8005104 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8004ed4:	881b      	ldrh	r3, [r3, #0]
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	b2da      	uxtb	r2, r3
 8004eda:	4b87      	ldr	r3, [pc, #540]	; (80050f8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8004edc:	71da      	strb	r2, [r3, #7]
					  		__HAL_TIM_SET_AUTORELOAD(&htim3, stepMotor1.speed*100);
 8004ede:	4b86      	ldr	r3, [pc, #536]	; (80050f8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8004ee0:	889b      	ldrh	r3, [r3, #4]
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	2364      	movs	r3, #100	; 0x64
 8004ee8:	fb03 f202 	mul.w	r2, r3, r2
 8004eec:	4b86      	ldr	r3, [pc, #536]	; (8005108 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	62da      	str	r2, [r3, #44]	; 0x2c
 8004ef2:	4b81      	ldr	r3, [pc, #516]	; (80050f8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8004ef4:	889b      	ldrh	r3, [r3, #4]
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	461a      	mov	r2, r3
 8004efa:	2364      	movs	r3, #100	; 0x64
 8004efc:	fb03 f302 	mul.w	r3, r3, r2
 8004f00:	461a      	mov	r2, r3
 8004f02:	4b81      	ldr	r3, [pc, #516]	; (8005108 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8004f04:	60da      	str	r2, [r3, #12]
						  break;
 8004f06:	e02a      	b.n	8004f5e <HAL_TIM_PeriodElapsedCallback+0x10e>
							stepMotor2.stepNumb  = stepNumb;
 8004f08:	4b7a      	ldr	r3, [pc, #488]	; (80050f4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8004f0a:	881b      	ldrh	r3, [r3, #0]
 8004f0c:	b29a      	uxth	r2, r3
 8004f0e:	4b7f      	ldr	r3, [pc, #508]	; (800510c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8004f10:	805a      	strh	r2, [r3, #2]
							stepMotor2.speed     = speed;
 8004f12:	4b7a      	ldr	r3, [pc, #488]	; (80050fc <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8004f14:	881b      	ldrh	r3, [r3, #0]
 8004f16:	b29a      	uxth	r2, r3
 8004f18:	4b7c      	ldr	r3, [pc, #496]	; (800510c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8004f1a:	809a      	strh	r2, [r3, #4]
							stepMotor2.direction = direction;
 8004f1c:	4b78      	ldr	r3, [pc, #480]	; (8005100 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8004f1e:	881b      	ldrh	r3, [r3, #0]
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	b2da      	uxtb	r2, r3
 8004f24:	4b79      	ldr	r3, [pc, #484]	; (800510c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8004f26:	719a      	strb	r2, [r3, #6]
							stepMotor2.startStop = startStop;
 8004f28:	4b76      	ldr	r3, [pc, #472]	; (8005104 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8004f2a:	881b      	ldrh	r3, [r3, #0]
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	b2da      	uxtb	r2, r3
 8004f30:	4b76      	ldr	r3, [pc, #472]	; (800510c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8004f32:	71da      	strb	r2, [r3, #7]
							__HAL_TIM_SET_AUTORELOAD(&htim4, stepMotor2.speed*100);
 8004f34:	4b75      	ldr	r3, [pc, #468]	; (800510c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8004f36:	889b      	ldrh	r3, [r3, #4]
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	2364      	movs	r3, #100	; 0x64
 8004f3e:	fb03 f202 	mul.w	r2, r3, r2
 8004f42:	4b73      	ldr	r3, [pc, #460]	; (8005110 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	62da      	str	r2, [r3, #44]	; 0x2c
 8004f48:	4b70      	ldr	r3, [pc, #448]	; (800510c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8004f4a:	889b      	ldrh	r3, [r3, #4]
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	461a      	mov	r2, r3
 8004f50:	2364      	movs	r3, #100	; 0x64
 8004f52:	fb03 f302 	mul.w	r3, r3, r2
 8004f56:	461a      	mov	r2, r3
 8004f58:	4b6d      	ldr	r3, [pc, #436]	; (8005110 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8004f5a:	60da      	str	r2, [r3, #12]
						  break;
 8004f5c:	bf00      	nop
					  }

				}
				break;
 8004f5e:	e00a      	b.n	8004f76 <HAL_TIM_PeriodElapsedCallback+0x126>


				default:
				{
					MBException(0x01); //Illegal function code 01
 8004f60:	2001      	movs	r0, #1
 8004f62:	f7fe ff33 	bl	8003dcc <MBException>
					MBSendData(ResponseFrameSize);
 8004f66:	4b6b      	ldr	r3, [pc, #428]	; (8005114 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f7fe feed 	bl	8003d4c <MBSendData>
				}
				break;
 8004f72:	e000      	b.n	8004f76 <HAL_TIM_PeriodElapsedCallback+0x126>
			}


		}
 8004f74:	bf00      	nop

		DataPos = 0;
 8004f76:	4b68      	ldr	r3, [pc, #416]	; (8005118 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8004f78:	2200      	movs	r2, #0
 8004f7a:	701a      	strb	r2, [r3, #0]

		HAL_UART_Receive_IT(&huart6, (uint8_t*)data_in + DataPos, 1);
 8004f7c:	4b66      	ldr	r3, [pc, #408]	; (8005118 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	461a      	mov	r2, r3
 8004f84:	4b57      	ldr	r3, [pc, #348]	; (80050e4 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8004f86:	4413      	add	r3, r2
 8004f88:	2201      	movs	r2, #1
 8004f8a:	4619      	mov	r1, r3
 8004f8c:	4863      	ldr	r0, [pc, #396]	; (800511c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8004f8e:	f7fd fcdb 	bl	8002948 <HAL_UART_Receive_IT>
			HAL_TIM_Base_Stop_IT(&htim4);
		}

	}

}
 8004f92:	e1c1      	b.n	8005318 <HAL_TIM_PeriodElapsedCallback+0x4c8>
	else if (htim->Instance == TIM3)					//Interrupt from Timer 3 (Control motor1)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a61      	ldr	r2, [pc, #388]	; (8005120 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	f040 80f4 	bne.w	8005188 <HAL_TIM_PeriodElapsedCallback+0x338>
		if (stepMotor1.startStop == 1)
 8004fa0:	4b55      	ldr	r3, [pc, #340]	; (80050f8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8004fa2:	79db      	ldrb	r3, [r3, #7]
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	f040 80ca 	bne.w	8005140 <HAL_TIM_PeriodElapsedCallback+0x2f0>
			if (MODE == HANDLE_MODE)
 8004fac:	4b5d      	ldr	r3, [pc, #372]	; (8005124 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8004fae:	881b      	ldrh	r3, [r3, #0]
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d12b      	bne.n	800500e <HAL_TIM_PeriodElapsedCallback+0x1be>
				OneStep(&stepMotor1);
 8004fb6:	4850      	ldr	r0, [pc, #320]	; (80050f8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8004fb8:	f7ff f8cc 	bl	8004154 <OneStep>
				stepMotor1.stepNumb--;
 8004fbc:	4b4e      	ldr	r3, [pc, #312]	; (80050f8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8004fbe:	885b      	ldrh	r3, [r3, #2]
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	3b01      	subs	r3, #1
 8004fc4:	b29a      	uxth	r2, r3
 8004fc6:	4b4c      	ldr	r3, [pc, #304]	; (80050f8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8004fc8:	805a      	strh	r2, [r3, #2]
				sensor_X += (stepMotor1.direction == CLOCKWISE)?(1):(-1);
 8004fca:	4b4b      	ldr	r3, [pc, #300]	; (80050f8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8004fcc:	799b      	ldrb	r3, [r3, #6]
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d101      	bne.n	8004fd8 <HAL_TIM_PeriodElapsedCallback+0x188>
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	e001      	b.n	8004fdc <HAL_TIM_PeriodElapsedCallback+0x18c>
 8004fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8004fdc:	4b52      	ldr	r3, [pc, #328]	; (8005128 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4413      	add	r3, r2
 8004fe2:	4a51      	ldr	r2, [pc, #324]	; (8005128 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8004fe4:	6013      	str	r3, [r2, #0]
				if (sensor_X <0 ) sensor_X = 0;
 8004fe6:	4b50      	ldr	r3, [pc, #320]	; (8005128 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	da02      	bge.n	8004ff4 <HAL_TIM_PeriodElapsedCallback+0x1a4>
 8004fee:	4b4e      	ldr	r3, [pc, #312]	; (8005128 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	601a      	str	r2, [r3, #0]
				if (stepMotor1.stepNumb == 0)
 8004ff4:	4b40      	ldr	r3, [pc, #256]	; (80050f8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8004ff6:	885b      	ldrh	r3, [r3, #2]
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	f040 818c 	bne.w	8005318 <HAL_TIM_PeriodElapsedCallback+0x4c8>
					stepMotor1.startStop = 0;
 8005000:	4b3d      	ldr	r3, [pc, #244]	; (80050f8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8005002:	2200      	movs	r2, #0
 8005004:	71da      	strb	r2, [r3, #7]
					stepMotor1.state = NOT_RUNNING;   		//Motor finishes its own work
 8005006:	4b3c      	ldr	r3, [pc, #240]	; (80050f8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8005008:	2201      	movs	r2, #1
 800500a:	721a      	strb	r2, [r3, #8]
}
 800500c:	e184      	b.n	8005318 <HAL_TIM_PeriodElapsedCallback+0x4c8>
			else if (MODE == AUTO_MODE)
 800500e:	4b45      	ldr	r3, [pc, #276]	; (8005124 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8005010:	881b      	ldrh	r3, [r3, #0]
 8005012:	b29b      	uxth	r3, r3
 8005014:	2b01      	cmp	r3, #1
 8005016:	f040 817f 	bne.w	8005318 <HAL_TIM_PeriodElapsedCallback+0x4c8>
				if ( (stepMotor1.stepNumb == 0) || (sensor_X == Xk) || (Xk == temp_coordX))
 800501a:	4b37      	ldr	r3, [pc, #220]	; (80050f8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800501c:	885b      	ldrh	r3, [r3, #2]
 800501e:	b29b      	uxth	r3, r3
 8005020:	2b00      	cmp	r3, #0
 8005022:	d00d      	beq.n	8005040 <HAL_TIM_PeriodElapsedCallback+0x1f0>
 8005024:	4b41      	ldr	r3, [pc, #260]	; (800512c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8005026:	881b      	ldrh	r3, [r3, #0]
 8005028:	461a      	mov	r2, r3
 800502a:	4b3f      	ldr	r3, [pc, #252]	; (8005128 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	429a      	cmp	r2, r3
 8005030:	d006      	beq.n	8005040 <HAL_TIM_PeriodElapsedCallback+0x1f0>
 8005032:	4b3e      	ldr	r3, [pc, #248]	; (800512c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8005034:	881a      	ldrh	r2, [r3, #0]
 8005036:	4b3e      	ldr	r3, [pc, #248]	; (8005130 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8005038:	881b      	ldrh	r3, [r3, #0]
 800503a:	b29b      	uxth	r3, r3
 800503c:	429a      	cmp	r2, r3
 800503e:	d106      	bne.n	800504e <HAL_TIM_PeriodElapsedCallback+0x1fe>
					stepMotor1.startStop = 0;
 8005040:	4b2d      	ldr	r3, [pc, #180]	; (80050f8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8005042:	2200      	movs	r2, #0
 8005044:	71da      	strb	r2, [r3, #7]
					stepMotor1.state = NOT_RUNNING;   		//Motor finishes its own work
 8005046:	4b2c      	ldr	r3, [pc, #176]	; (80050f8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8005048:	2201      	movs	r2, #1
 800504a:	721a      	strb	r2, [r3, #8]
 800504c:	e164      	b.n	8005318 <HAL_TIM_PeriodElapsedCallback+0x4c8>
				else if ( abs((sensor_X - temp_coordX)*(Yk -temp_coordY)) <= abs((Xk - temp_coordX)*(sensor_Y -temp_coordY)))
 800504e:	4b36      	ldr	r3, [pc, #216]	; (8005128 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a37      	ldr	r2, [pc, #220]	; (8005130 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8005054:	8812      	ldrh	r2, [r2, #0]
 8005056:	b292      	uxth	r2, r2
 8005058:	1a9b      	subs	r3, r3, r2
 800505a:	4a36      	ldr	r2, [pc, #216]	; (8005134 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 800505c:	8812      	ldrh	r2, [r2, #0]
 800505e:	4611      	mov	r1, r2
 8005060:	4a35      	ldr	r2, [pc, #212]	; (8005138 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8005062:	8812      	ldrh	r2, [r2, #0]
 8005064:	b292      	uxth	r2, r2
 8005066:	1a8a      	subs	r2, r1, r2
 8005068:	fb02 f303 	mul.w	r3, r2, r3
 800506c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8005070:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8005074:	4b2d      	ldr	r3, [pc, #180]	; (800512c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8005076:	881b      	ldrh	r3, [r3, #0]
 8005078:	4619      	mov	r1, r3
 800507a:	4b2d      	ldr	r3, [pc, #180]	; (8005130 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800507c:	881b      	ldrh	r3, [r3, #0]
 800507e:	b29b      	uxth	r3, r3
 8005080:	1acb      	subs	r3, r1, r3
 8005082:	492e      	ldr	r1, [pc, #184]	; (800513c <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8005084:	6809      	ldr	r1, [r1, #0]
 8005086:	482c      	ldr	r0, [pc, #176]	; (8005138 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8005088:	8800      	ldrh	r0, [r0, #0]
 800508a:	b280      	uxth	r0, r0
 800508c:	1a09      	subs	r1, r1, r0
 800508e:	fb01 f303 	mul.w	r3, r1, r3
 8005092:	2b00      	cmp	r3, #0
 8005094:	bfb8      	it	lt
 8005096:	425b      	neglt	r3, r3
 8005098:	429a      	cmp	r2, r3
 800509a:	f300 813d 	bgt.w	8005318 <HAL_TIM_PeriodElapsedCallback+0x4c8>
					OneStep(&stepMotor1);
 800509e:	4816      	ldr	r0, [pc, #88]	; (80050f8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80050a0:	f7ff f858 	bl	8004154 <OneStep>
					stepMotor1.stepNumb--;
 80050a4:	4b14      	ldr	r3, [pc, #80]	; (80050f8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80050a6:	885b      	ldrh	r3, [r3, #2]
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	3b01      	subs	r3, #1
 80050ac:	b29a      	uxth	r2, r3
 80050ae:	4b12      	ldr	r3, [pc, #72]	; (80050f8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80050b0:	805a      	strh	r2, [r3, #2]
					sensor_X += (stepMotor1.direction == CLOCKWISE)?(1):(-1);
 80050b2:	4b11      	ldr	r3, [pc, #68]	; (80050f8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80050b4:	799b      	ldrb	r3, [r3, #6]
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d101      	bne.n	80050c0 <HAL_TIM_PeriodElapsedCallback+0x270>
 80050bc:	2201      	movs	r2, #1
 80050be:	e001      	b.n	80050c4 <HAL_TIM_PeriodElapsedCallback+0x274>
 80050c0:	f04f 32ff 	mov.w	r2, #4294967295
 80050c4:	4b18      	ldr	r3, [pc, #96]	; (8005128 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4413      	add	r3, r2
 80050ca:	4a17      	ldr	r2, [pc, #92]	; (8005128 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80050cc:	6013      	str	r3, [r2, #0]
					if (sensor_X <0 ) sensor_X = 0;
 80050ce:	4b16      	ldr	r3, [pc, #88]	; (8005128 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	f280 8120 	bge.w	8005318 <HAL_TIM_PeriodElapsedCallback+0x4c8>
 80050d8:	4b13      	ldr	r3, [pc, #76]	; (8005128 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80050da:	2200      	movs	r2, #0
 80050dc:	601a      	str	r2, [r3, #0]
}
 80050de:	e11b      	b.n	8005318 <HAL_TIM_PeriodElapsedCallback+0x4c8>
 80050e0:	20004398 	.word	0x20004398
 80050e4:	2000044c 	.word	0x2000044c
 80050e8:	200017d8 	.word	0x200017d8
 80050ec:	20000418 	.word	0x20000418
 80050f0:	20001b36 	.word	0x20001b36
 80050f4:	20000440 	.word	0x20000440
 80050f8:	200043d8 	.word	0x200043d8
 80050fc:	20001b34 	.word	0x20001b34
 8005100:	200017d4 	.word	0x200017d4
 8005104:	20000446 	.word	0x20000446
 8005108:	20001c00 	.word	0x20001c00
 800510c:	200043f0 	.word	0x200043f0
 8005110:	20001bb8 	.word	0x20001bb8
 8005114:	20000442 	.word	0x20000442
 8005118:	20001c40 	.word	0x20001c40
 800511c:	20004354 	.word	0x20004354
 8005120:	40000400 	.word	0x40000400
 8005124:	20000444 	.word	0x20000444
 8005128:	20001bf8 	.word	0x20001bf8
 800512c:	20000428 	.word	0x20000428
 8005130:	200019a0 	.word	0x200019a0
 8005134:	2000042a 	.word	0x2000042a
 8005138:	20001998 	.word	0x20001998
 800513c:	20004394 	.word	0x20004394
			HAL_GPIO_WritePin(stepMotor1.Port, stepMotor1.pin1, 0);
 8005140:	4b77      	ldr	r3, [pc, #476]	; (8005320 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 8005142:	68d8      	ldr	r0, [r3, #12]
 8005144:	4b76      	ldr	r3, [pc, #472]	; (8005320 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 8005146:	8a1b      	ldrh	r3, [r3, #16]
 8005148:	2200      	movs	r2, #0
 800514a:	4619      	mov	r1, r3
 800514c:	f7fc fa86 	bl	800165c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(stepMotor1.Port, stepMotor1.pin2, 0);
 8005150:	4b73      	ldr	r3, [pc, #460]	; (8005320 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 8005152:	68d8      	ldr	r0, [r3, #12]
 8005154:	4b72      	ldr	r3, [pc, #456]	; (8005320 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 8005156:	8a5b      	ldrh	r3, [r3, #18]
 8005158:	2200      	movs	r2, #0
 800515a:	4619      	mov	r1, r3
 800515c:	f7fc fa7e 	bl	800165c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(stepMotor1.Port, stepMotor1.pin3, 0);
 8005160:	4b6f      	ldr	r3, [pc, #444]	; (8005320 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 8005162:	68d8      	ldr	r0, [r3, #12]
 8005164:	4b6e      	ldr	r3, [pc, #440]	; (8005320 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 8005166:	8a9b      	ldrh	r3, [r3, #20]
 8005168:	2200      	movs	r2, #0
 800516a:	4619      	mov	r1, r3
 800516c:	f7fc fa76 	bl	800165c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(stepMotor1.Port, stepMotor1.pin4, 0);
 8005170:	4b6b      	ldr	r3, [pc, #428]	; (8005320 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 8005172:	68d8      	ldr	r0, [r3, #12]
 8005174:	4b6a      	ldr	r3, [pc, #424]	; (8005320 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 8005176:	8adb      	ldrh	r3, [r3, #22]
 8005178:	2200      	movs	r2, #0
 800517a:	4619      	mov	r1, r3
 800517c:	f7fc fa6e 	bl	800165c <HAL_GPIO_WritePin>
			HAL_TIM_Base_Stop_IT(&htim3);
 8005180:	4868      	ldr	r0, [pc, #416]	; (8005324 <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 8005182:	f7fc ff4c 	bl	800201e <HAL_TIM_Base_Stop_IT>
}
 8005186:	e0c7      	b.n	8005318 <HAL_TIM_PeriodElapsedCallback+0x4c8>
	else if (htim->Instance == TIM4)					//Interrupt from Timer 4 (Control motor2)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a66      	ldr	r2, [pc, #408]	; (8005328 <HAL_TIM_PeriodElapsedCallback+0x4d8>)
 800518e:	4293      	cmp	r3, r2
 8005190:	f040 80c2 	bne.w	8005318 <HAL_TIM_PeriodElapsedCallback+0x4c8>
		if (stepMotor2.startStop == 1)
 8005194:	4b65      	ldr	r3, [pc, #404]	; (800532c <HAL_TIM_PeriodElapsedCallback+0x4dc>)
 8005196:	79db      	ldrb	r3, [r3, #7]
 8005198:	b2db      	uxtb	r3, r3
 800519a:	2b01      	cmp	r3, #1
 800519c:	f040 8098 	bne.w	80052d0 <HAL_TIM_PeriodElapsedCallback+0x480>
			if (MODE == HANDLE_MODE)
 80051a0:	4b63      	ldr	r3, [pc, #396]	; (8005330 <HAL_TIM_PeriodElapsedCallback+0x4e0>)
 80051a2:	881b      	ldrh	r3, [r3, #0]
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d12b      	bne.n	8005202 <HAL_TIM_PeriodElapsedCallback+0x3b2>
				OneStep(&stepMotor2);
 80051aa:	4860      	ldr	r0, [pc, #384]	; (800532c <HAL_TIM_PeriodElapsedCallback+0x4dc>)
 80051ac:	f7fe ffd2 	bl	8004154 <OneStep>
				stepMotor2.stepNumb--;
 80051b0:	4b5e      	ldr	r3, [pc, #376]	; (800532c <HAL_TIM_PeriodElapsedCallback+0x4dc>)
 80051b2:	885b      	ldrh	r3, [r3, #2]
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	3b01      	subs	r3, #1
 80051b8:	b29a      	uxth	r2, r3
 80051ba:	4b5c      	ldr	r3, [pc, #368]	; (800532c <HAL_TIM_PeriodElapsedCallback+0x4dc>)
 80051bc:	805a      	strh	r2, [r3, #2]
				sensor_Y += (stepMotor2.direction == CLOCKWISE)?(1):(-1);
 80051be:	4b5b      	ldr	r3, [pc, #364]	; (800532c <HAL_TIM_PeriodElapsedCallback+0x4dc>)
 80051c0:	799b      	ldrb	r3, [r3, #6]
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d101      	bne.n	80051cc <HAL_TIM_PeriodElapsedCallback+0x37c>
 80051c8:	2201      	movs	r2, #1
 80051ca:	e001      	b.n	80051d0 <HAL_TIM_PeriodElapsedCallback+0x380>
 80051cc:	f04f 32ff 	mov.w	r2, #4294967295
 80051d0:	4b58      	ldr	r3, [pc, #352]	; (8005334 <HAL_TIM_PeriodElapsedCallback+0x4e4>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4413      	add	r3, r2
 80051d6:	4a57      	ldr	r2, [pc, #348]	; (8005334 <HAL_TIM_PeriodElapsedCallback+0x4e4>)
 80051d8:	6013      	str	r3, [r2, #0]
				if (sensor_Y <0 ) sensor_Y = 0;
 80051da:	4b56      	ldr	r3, [pc, #344]	; (8005334 <HAL_TIM_PeriodElapsedCallback+0x4e4>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	da02      	bge.n	80051e8 <HAL_TIM_PeriodElapsedCallback+0x398>
 80051e2:	4b54      	ldr	r3, [pc, #336]	; (8005334 <HAL_TIM_PeriodElapsedCallback+0x4e4>)
 80051e4:	2200      	movs	r2, #0
 80051e6:	601a      	str	r2, [r3, #0]
				if (stepMotor2.stepNumb == 0)
 80051e8:	4b50      	ldr	r3, [pc, #320]	; (800532c <HAL_TIM_PeriodElapsedCallback+0x4dc>)
 80051ea:	885b      	ldrh	r3, [r3, #2]
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	f040 8092 	bne.w	8005318 <HAL_TIM_PeriodElapsedCallback+0x4c8>
					stepMotor2.startStop = 0;
 80051f4:	4b4d      	ldr	r3, [pc, #308]	; (800532c <HAL_TIM_PeriodElapsedCallback+0x4dc>)
 80051f6:	2200      	movs	r2, #0
 80051f8:	71da      	strb	r2, [r3, #7]
					stepMotor2.state = NOT_RUNNING;			//Motor finishes its own work
 80051fa:	4b4c      	ldr	r3, [pc, #304]	; (800532c <HAL_TIM_PeriodElapsedCallback+0x4dc>)
 80051fc:	2201      	movs	r2, #1
 80051fe:	721a      	strb	r2, [r3, #8]
}
 8005200:	e08a      	b.n	8005318 <HAL_TIM_PeriodElapsedCallback+0x4c8>
			else if (MODE == AUTO_MODE)
 8005202:	4b4b      	ldr	r3, [pc, #300]	; (8005330 <HAL_TIM_PeriodElapsedCallback+0x4e0>)
 8005204:	881b      	ldrh	r3, [r3, #0]
 8005206:	b29b      	uxth	r3, r3
 8005208:	2b01      	cmp	r3, #1
 800520a:	f040 8085 	bne.w	8005318 <HAL_TIM_PeriodElapsedCallback+0x4c8>
				if ( (stepMotor2.stepNumb == 0) || (sensor_Y == Yk) || (Yk == temp_coordY))
 800520e:	4b47      	ldr	r3, [pc, #284]	; (800532c <HAL_TIM_PeriodElapsedCallback+0x4dc>)
 8005210:	885b      	ldrh	r3, [r3, #2]
 8005212:	b29b      	uxth	r3, r3
 8005214:	2b00      	cmp	r3, #0
 8005216:	d00d      	beq.n	8005234 <HAL_TIM_PeriodElapsedCallback+0x3e4>
 8005218:	4b47      	ldr	r3, [pc, #284]	; (8005338 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 800521a:	881b      	ldrh	r3, [r3, #0]
 800521c:	461a      	mov	r2, r3
 800521e:	4b45      	ldr	r3, [pc, #276]	; (8005334 <HAL_TIM_PeriodElapsedCallback+0x4e4>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	429a      	cmp	r2, r3
 8005224:	d006      	beq.n	8005234 <HAL_TIM_PeriodElapsedCallback+0x3e4>
 8005226:	4b44      	ldr	r3, [pc, #272]	; (8005338 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 8005228:	881a      	ldrh	r2, [r3, #0]
 800522a:	4b44      	ldr	r3, [pc, #272]	; (800533c <HAL_TIM_PeriodElapsedCallback+0x4ec>)
 800522c:	881b      	ldrh	r3, [r3, #0]
 800522e:	b29b      	uxth	r3, r3
 8005230:	429a      	cmp	r2, r3
 8005232:	d106      	bne.n	8005242 <HAL_TIM_PeriodElapsedCallback+0x3f2>
					stepMotor2.startStop = 0;
 8005234:	4b3d      	ldr	r3, [pc, #244]	; (800532c <HAL_TIM_PeriodElapsedCallback+0x4dc>)
 8005236:	2200      	movs	r2, #0
 8005238:	71da      	strb	r2, [r3, #7]
					stepMotor2.state = NOT_RUNNING;			//Motor finishes its own work
 800523a:	4b3c      	ldr	r3, [pc, #240]	; (800532c <HAL_TIM_PeriodElapsedCallback+0x4dc>)
 800523c:	2201      	movs	r2, #1
 800523e:	721a      	strb	r2, [r3, #8]
 8005240:	e06a      	b.n	8005318 <HAL_TIM_PeriodElapsedCallback+0x4c8>
				else if ( abs((sensor_X - temp_coordX)*(Yk -temp_coordY)) >= abs((Xk - temp_coordX)*(sensor_Y -temp_coordY)))
 8005242:	4b3f      	ldr	r3, [pc, #252]	; (8005340 <HAL_TIM_PeriodElapsedCallback+0x4f0>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a3f      	ldr	r2, [pc, #252]	; (8005344 <HAL_TIM_PeriodElapsedCallback+0x4f4>)
 8005248:	8812      	ldrh	r2, [r2, #0]
 800524a:	b292      	uxth	r2, r2
 800524c:	1a9b      	subs	r3, r3, r2
 800524e:	4a3a      	ldr	r2, [pc, #232]	; (8005338 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 8005250:	8812      	ldrh	r2, [r2, #0]
 8005252:	4611      	mov	r1, r2
 8005254:	4a39      	ldr	r2, [pc, #228]	; (800533c <HAL_TIM_PeriodElapsedCallback+0x4ec>)
 8005256:	8812      	ldrh	r2, [r2, #0]
 8005258:	b292      	uxth	r2, r2
 800525a:	1a8a      	subs	r2, r1, r2
 800525c:	fb02 f303 	mul.w	r3, r2, r3
 8005260:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8005264:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8005268:	4b37      	ldr	r3, [pc, #220]	; (8005348 <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 800526a:	881b      	ldrh	r3, [r3, #0]
 800526c:	4619      	mov	r1, r3
 800526e:	4b35      	ldr	r3, [pc, #212]	; (8005344 <HAL_TIM_PeriodElapsedCallback+0x4f4>)
 8005270:	881b      	ldrh	r3, [r3, #0]
 8005272:	b29b      	uxth	r3, r3
 8005274:	1acb      	subs	r3, r1, r3
 8005276:	492f      	ldr	r1, [pc, #188]	; (8005334 <HAL_TIM_PeriodElapsedCallback+0x4e4>)
 8005278:	6809      	ldr	r1, [r1, #0]
 800527a:	4830      	ldr	r0, [pc, #192]	; (800533c <HAL_TIM_PeriodElapsedCallback+0x4ec>)
 800527c:	8800      	ldrh	r0, [r0, #0]
 800527e:	b280      	uxth	r0, r0
 8005280:	1a09      	subs	r1, r1, r0
 8005282:	fb01 f303 	mul.w	r3, r1, r3
 8005286:	2b00      	cmp	r3, #0
 8005288:	bfb8      	it	lt
 800528a:	425b      	neglt	r3, r3
 800528c:	429a      	cmp	r2, r3
 800528e:	db43      	blt.n	8005318 <HAL_TIM_PeriodElapsedCallback+0x4c8>
					OneStep(&stepMotor2);
 8005290:	4826      	ldr	r0, [pc, #152]	; (800532c <HAL_TIM_PeriodElapsedCallback+0x4dc>)
 8005292:	f7fe ff5f 	bl	8004154 <OneStep>
					stepMotor2.stepNumb--;
 8005296:	4b25      	ldr	r3, [pc, #148]	; (800532c <HAL_TIM_PeriodElapsedCallback+0x4dc>)
 8005298:	885b      	ldrh	r3, [r3, #2]
 800529a:	b29b      	uxth	r3, r3
 800529c:	3b01      	subs	r3, #1
 800529e:	b29a      	uxth	r2, r3
 80052a0:	4b22      	ldr	r3, [pc, #136]	; (800532c <HAL_TIM_PeriodElapsedCallback+0x4dc>)
 80052a2:	805a      	strh	r2, [r3, #2]
					sensor_Y += (stepMotor2.direction == CLOCKWISE)?(1):(-1);
 80052a4:	4b21      	ldr	r3, [pc, #132]	; (800532c <HAL_TIM_PeriodElapsedCallback+0x4dc>)
 80052a6:	799b      	ldrb	r3, [r3, #6]
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d101      	bne.n	80052b2 <HAL_TIM_PeriodElapsedCallback+0x462>
 80052ae:	2201      	movs	r2, #1
 80052b0:	e001      	b.n	80052b6 <HAL_TIM_PeriodElapsedCallback+0x466>
 80052b2:	f04f 32ff 	mov.w	r2, #4294967295
 80052b6:	4b1f      	ldr	r3, [pc, #124]	; (8005334 <HAL_TIM_PeriodElapsedCallback+0x4e4>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4413      	add	r3, r2
 80052bc:	4a1d      	ldr	r2, [pc, #116]	; (8005334 <HAL_TIM_PeriodElapsedCallback+0x4e4>)
 80052be:	6013      	str	r3, [r2, #0]
					if (sensor_Y <0 ) sensor_Y = 0;
 80052c0:	4b1c      	ldr	r3, [pc, #112]	; (8005334 <HAL_TIM_PeriodElapsedCallback+0x4e4>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	da27      	bge.n	8005318 <HAL_TIM_PeriodElapsedCallback+0x4c8>
 80052c8:	4b1a      	ldr	r3, [pc, #104]	; (8005334 <HAL_TIM_PeriodElapsedCallback+0x4e4>)
 80052ca:	2200      	movs	r2, #0
 80052cc:	601a      	str	r2, [r3, #0]
}
 80052ce:	e023      	b.n	8005318 <HAL_TIM_PeriodElapsedCallback+0x4c8>
			HAL_GPIO_WritePin(stepMotor2.Port, stepMotor2.pin1, 0);
 80052d0:	4b16      	ldr	r3, [pc, #88]	; (800532c <HAL_TIM_PeriodElapsedCallback+0x4dc>)
 80052d2:	68d8      	ldr	r0, [r3, #12]
 80052d4:	4b15      	ldr	r3, [pc, #84]	; (800532c <HAL_TIM_PeriodElapsedCallback+0x4dc>)
 80052d6:	8a1b      	ldrh	r3, [r3, #16]
 80052d8:	2200      	movs	r2, #0
 80052da:	4619      	mov	r1, r3
 80052dc:	f7fc f9be 	bl	800165c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(stepMotor2.Port, stepMotor2.pin2, 0);
 80052e0:	4b12      	ldr	r3, [pc, #72]	; (800532c <HAL_TIM_PeriodElapsedCallback+0x4dc>)
 80052e2:	68d8      	ldr	r0, [r3, #12]
 80052e4:	4b11      	ldr	r3, [pc, #68]	; (800532c <HAL_TIM_PeriodElapsedCallback+0x4dc>)
 80052e6:	8a5b      	ldrh	r3, [r3, #18]
 80052e8:	2200      	movs	r2, #0
 80052ea:	4619      	mov	r1, r3
 80052ec:	f7fc f9b6 	bl	800165c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(stepMotor2.Port, stepMotor2.pin3, 0);
 80052f0:	4b0e      	ldr	r3, [pc, #56]	; (800532c <HAL_TIM_PeriodElapsedCallback+0x4dc>)
 80052f2:	68d8      	ldr	r0, [r3, #12]
 80052f4:	4b0d      	ldr	r3, [pc, #52]	; (800532c <HAL_TIM_PeriodElapsedCallback+0x4dc>)
 80052f6:	8a9b      	ldrh	r3, [r3, #20]
 80052f8:	2200      	movs	r2, #0
 80052fa:	4619      	mov	r1, r3
 80052fc:	f7fc f9ae 	bl	800165c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(stepMotor2.Port, stepMotor2.pin4, 0);
 8005300:	4b0a      	ldr	r3, [pc, #40]	; (800532c <HAL_TIM_PeriodElapsedCallback+0x4dc>)
 8005302:	68d8      	ldr	r0, [r3, #12]
 8005304:	4b09      	ldr	r3, [pc, #36]	; (800532c <HAL_TIM_PeriodElapsedCallback+0x4dc>)
 8005306:	8adb      	ldrh	r3, [r3, #22]
 8005308:	2200      	movs	r2, #0
 800530a:	4619      	mov	r1, r3
 800530c:	f7fc f9a6 	bl	800165c <HAL_GPIO_WritePin>
			HAL_TIM_Base_Stop_IT(&htim4);
 8005310:	480e      	ldr	r0, [pc, #56]	; (800534c <HAL_TIM_PeriodElapsedCallback+0x4fc>)
 8005312:	f7fc fe84 	bl	800201e <HAL_TIM_Base_Stop_IT>
}
 8005316:	e7ff      	b.n	8005318 <HAL_TIM_PeriodElapsedCallback+0x4c8>
 8005318:	bf00      	nop
 800531a:	3708      	adds	r7, #8
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}
 8005320:	200043d8 	.word	0x200043d8
 8005324:	20001c00 	.word	0x20001c00
 8005328:	40000800 	.word	0x40000800
 800532c:	200043f0 	.word	0x200043f0
 8005330:	20000444 	.word	0x20000444
 8005334:	20004394 	.word	0x20004394
 8005338:	2000042a 	.word	0x2000042a
 800533c:	20001998 	.word	0x20001998
 8005340:	20001bf8 	.word	0x20001bf8
 8005344:	200019a0 	.word	0x200019a0
 8005348:	20000428 	.word	0x20000428
 800534c:	20001bb8 	.word	0x20001bb8

08005350 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b082      	sub	sp, #8
 8005354:	af00      	add	r7, sp, #0
 8005356:	4603      	mov	r3, r0
 8005358:	80fb      	strh	r3, [r7, #6]
	if (isDrilling == 1){
 800535a:	4b19      	ldr	r3, [pc, #100]	; (80053c0 <HAL_GPIO_EXTI_Callback+0x70>)
 800535c:	881b      	ldrh	r3, [r3, #0]
 800535e:	b29b      	uxth	r3, r3
 8005360:	2b01      	cmp	r3, #1
 8005362:	d106      	bne.n	8005372 <HAL_GPIO_EXTI_Callback+0x22>
		sensor_DirMotorX = None;
 8005364:	4b17      	ldr	r3, [pc, #92]	; (80053c4 <HAL_GPIO_EXTI_Callback+0x74>)
 8005366:	2200      	movs	r2, #0
 8005368:	701a      	strb	r2, [r3, #0]
		sensor_DirMotorY = None;
 800536a:	4b17      	ldr	r3, [pc, #92]	; (80053c8 <HAL_GPIO_EXTI_Callback+0x78>)
 800536c:	2200      	movs	r2, #0
 800536e:	701a      	strb	r2, [r3, #0]
		return;
 8005370:	e023      	b.n	80053ba <HAL_GPIO_EXTI_Callback+0x6a>
	}

	if (GPIO_Pin == GPIO_PIN_0){
 8005372:	88fb      	ldrh	r3, [r7, #6]
 8005374:	2b01      	cmp	r3, #1
 8005376:	d10e      	bne.n	8005396 <HAL_GPIO_EXTI_Callback+0x46>

		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1) == 1){
 8005378:	2102      	movs	r1, #2
 800537a:	4814      	ldr	r0, [pc, #80]	; (80053cc <HAL_GPIO_EXTI_Callback+0x7c>)
 800537c:	f7fc f956 	bl	800162c <HAL_GPIO_ReadPin>
 8005380:	4603      	mov	r3, r0
 8005382:	2b01      	cmp	r3, #1
 8005384:	d103      	bne.n	800538e <HAL_GPIO_EXTI_Callback+0x3e>
			sensor_DirMotorX = None;
 8005386:	4b0f      	ldr	r3, [pc, #60]	; (80053c4 <HAL_GPIO_EXTI_Callback+0x74>)
 8005388:	2200      	movs	r2, #0
 800538a:	701a      	strb	r2, [r3, #0]
 800538c:	e015      	b.n	80053ba <HAL_GPIO_EXTI_Callback+0x6a>
		}else{
			sensor_DirMotorX = None;
 800538e:	4b0d      	ldr	r3, [pc, #52]	; (80053c4 <HAL_GPIO_EXTI_Callback+0x74>)
 8005390:	2200      	movs	r2, #0
 8005392:	701a      	strb	r2, [r3, #0]
 8005394:	e011      	b.n	80053ba <HAL_GPIO_EXTI_Callback+0x6a>
		}

	}
	else if (GPIO_Pin == GPIO_PIN_14)
 8005396:	88fb      	ldrh	r3, [r7, #6]
 8005398:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800539c:	d10d      	bne.n	80053ba <HAL_GPIO_EXTI_Callback+0x6a>
	{

		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13 == 1)){
 800539e:	2100      	movs	r1, #0
 80053a0:	480b      	ldr	r0, [pc, #44]	; (80053d0 <HAL_GPIO_EXTI_Callback+0x80>)
 80053a2:	f7fc f943 	bl	800162c <HAL_GPIO_ReadPin>
 80053a6:	4603      	mov	r3, r0
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d003      	beq.n	80053b4 <HAL_GPIO_EXTI_Callback+0x64>
			sensor_DirMotorY = AntiClockwise;
 80053ac:	4b06      	ldr	r3, [pc, #24]	; (80053c8 <HAL_GPIO_EXTI_Callback+0x78>)
 80053ae:	2202      	movs	r2, #2
 80053b0:	701a      	strb	r2, [r3, #0]
 80053b2:	e002      	b.n	80053ba <HAL_GPIO_EXTI_Callback+0x6a>
		}else{
			sensor_DirMotorY = Clockwise;
 80053b4:	4b04      	ldr	r3, [pc, #16]	; (80053c8 <HAL_GPIO_EXTI_Callback+0x78>)
 80053b6:	2201      	movs	r2, #1
 80053b8:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80053ba:	3708      	adds	r7, #8
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}
 80053c0:	2000044a 	.word	0x2000044a
 80053c4:	20001b38 	.word	0x20001b38
 80053c8:	20001bfc 	.word	0x20001bfc
 80053cc:	40020800 	.word	0x40020800
 80053d0:	40020400 	.word	0x40020400

080053d4 <Lcd_display_parameter>:
	 }
 }


 void Lcd_display_parameter(Lcd_HandleTypeDef* lcd)
 {
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b082      	sub	sp, #8
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
	  Lcd_clear(lcd);
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f7fe fba5 	bl	8003b2c <Lcd_clear>
	  Lcd_cursor(lcd, 0, 6);
 80053e2:	2206      	movs	r2, #6
 80053e4:	2100      	movs	r1, #0
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f7fe fb86 	bl	8003af8 <Lcd_cursor>
	  Lcd_string(lcd, "G01 ");
 80053ec:	4956      	ldr	r1, [pc, #344]	; (8005548 <Lcd_display_parameter+0x174>)
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f7fe fb64 	bl	8003abc <Lcd_string>

	  Lcd_cursor(lcd, 1, 0);
 80053f4:	2200      	movs	r2, #0
 80053f6:	2101      	movs	r1, #1
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f7fe fb7d 	bl	8003af8 <Lcd_cursor>
	  Lcd_string(lcd, "X");
 80053fe:	4953      	ldr	r1, [pc, #332]	; (800554c <Lcd_display_parameter+0x178>)
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f7fe fb5b 	bl	8003abc <Lcd_string>
	  Lcd_int(lcd, (int)display_coordX/100);
 8005406:	4b52      	ldr	r3, [pc, #328]	; (8005550 <Lcd_display_parameter+0x17c>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a52      	ldr	r2, [pc, #328]	; (8005554 <Lcd_display_parameter+0x180>)
 800540c:	fb82 1203 	smull	r1, r2, r2, r3
 8005410:	1152      	asrs	r2, r2, #5
 8005412:	17db      	asrs	r3, r3, #31
 8005414:	1ad3      	subs	r3, r2, r3
 8005416:	4619      	mov	r1, r3
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f7fe fb37 	bl	8003a8c <Lcd_int>
	  Lcd_int(lcd, (int)(display_coordX/10)%10);
 800541e:	4b4c      	ldr	r3, [pc, #304]	; (8005550 <Lcd_display_parameter+0x17c>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a4d      	ldr	r2, [pc, #308]	; (8005558 <Lcd_display_parameter+0x184>)
 8005424:	fb82 1203 	smull	r1, r2, r2, r3
 8005428:	1092      	asrs	r2, r2, #2
 800542a:	17db      	asrs	r3, r3, #31
 800542c:	1ad2      	subs	r2, r2, r3
 800542e:	4b4a      	ldr	r3, [pc, #296]	; (8005558 <Lcd_display_parameter+0x184>)
 8005430:	fb83 1302 	smull	r1, r3, r3, r2
 8005434:	1099      	asrs	r1, r3, #2
 8005436:	17d3      	asrs	r3, r2, #31
 8005438:	1ac9      	subs	r1, r1, r3
 800543a:	460b      	mov	r3, r1
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	440b      	add	r3, r1
 8005440:	005b      	lsls	r3, r3, #1
 8005442:	1ad1      	subs	r1, r2, r3
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f7fe fb21 	bl	8003a8c <Lcd_int>
	  Lcd_int(lcd, (int)display_coordX%10);
 800544a:	4b41      	ldr	r3, [pc, #260]	; (8005550 <Lcd_display_parameter+0x17c>)
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	4b42      	ldr	r3, [pc, #264]	; (8005558 <Lcd_display_parameter+0x184>)
 8005450:	fb83 1302 	smull	r1, r3, r3, r2
 8005454:	1099      	asrs	r1, r3, #2
 8005456:	17d3      	asrs	r3, r2, #31
 8005458:	1ac9      	subs	r1, r1, r3
 800545a:	460b      	mov	r3, r1
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	440b      	add	r3, r1
 8005460:	005b      	lsls	r3, r3, #1
 8005462:	1ad1      	subs	r1, r2, r3
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f7fe fb11 	bl	8003a8c <Lcd_int>
	  Lcd_string(lcd, " ");
 800546a:	493c      	ldr	r1, [pc, #240]	; (800555c <Lcd_display_parameter+0x188>)
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f7fe fb25 	bl	8003abc <Lcd_string>

	  Lcd_string(lcd, "Y");
 8005472:	493b      	ldr	r1, [pc, #236]	; (8005560 <Lcd_display_parameter+0x18c>)
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f7fe fb21 	bl	8003abc <Lcd_string>
	  Lcd_int(lcd, (int)display_coordY/100);
 800547a:	4b3a      	ldr	r3, [pc, #232]	; (8005564 <Lcd_display_parameter+0x190>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a35      	ldr	r2, [pc, #212]	; (8005554 <Lcd_display_parameter+0x180>)
 8005480:	fb82 1203 	smull	r1, r2, r2, r3
 8005484:	1152      	asrs	r2, r2, #5
 8005486:	17db      	asrs	r3, r3, #31
 8005488:	1ad3      	subs	r3, r2, r3
 800548a:	4619      	mov	r1, r3
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f7fe fafd 	bl	8003a8c <Lcd_int>
	  Lcd_int(lcd, (int)(display_coordY/10)%10);
 8005492:	4b34      	ldr	r3, [pc, #208]	; (8005564 <Lcd_display_parameter+0x190>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a30      	ldr	r2, [pc, #192]	; (8005558 <Lcd_display_parameter+0x184>)
 8005498:	fb82 1203 	smull	r1, r2, r2, r3
 800549c:	1092      	asrs	r2, r2, #2
 800549e:	17db      	asrs	r3, r3, #31
 80054a0:	1ad2      	subs	r2, r2, r3
 80054a2:	4b2d      	ldr	r3, [pc, #180]	; (8005558 <Lcd_display_parameter+0x184>)
 80054a4:	fb83 1302 	smull	r1, r3, r3, r2
 80054a8:	1099      	asrs	r1, r3, #2
 80054aa:	17d3      	asrs	r3, r2, #31
 80054ac:	1ac9      	subs	r1, r1, r3
 80054ae:	460b      	mov	r3, r1
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	440b      	add	r3, r1
 80054b4:	005b      	lsls	r3, r3, #1
 80054b6:	1ad1      	subs	r1, r2, r3
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f7fe fae7 	bl	8003a8c <Lcd_int>
	  Lcd_int(lcd, (int)display_coordY%10);
 80054be:	4b29      	ldr	r3, [pc, #164]	; (8005564 <Lcd_display_parameter+0x190>)
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	4b25      	ldr	r3, [pc, #148]	; (8005558 <Lcd_display_parameter+0x184>)
 80054c4:	fb83 1302 	smull	r1, r3, r3, r2
 80054c8:	1099      	asrs	r1, r3, #2
 80054ca:	17d3      	asrs	r3, r2, #31
 80054cc:	1ac9      	subs	r1, r1, r3
 80054ce:	460b      	mov	r3, r1
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	440b      	add	r3, r1
 80054d4:	005b      	lsls	r3, r3, #1
 80054d6:	1ad1      	subs	r1, r2, r3
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f7fe fad7 	bl	8003a8c <Lcd_int>
	  Lcd_string(lcd, " ");
 80054de:	491f      	ldr	r1, [pc, #124]	; (800555c <Lcd_display_parameter+0x188>)
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f7fe faeb 	bl	8003abc <Lcd_string>

	  Lcd_string(lcd, "F");
 80054e6:	4920      	ldr	r1, [pc, #128]	; (8005568 <Lcd_display_parameter+0x194>)
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f7fe fae7 	bl	8003abc <Lcd_string>
	  Lcd_int(lcd, (int)display_speed_ref/100);
 80054ee:	4b1f      	ldr	r3, [pc, #124]	; (800556c <Lcd_display_parameter+0x198>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a18      	ldr	r2, [pc, #96]	; (8005554 <Lcd_display_parameter+0x180>)
 80054f4:	fb82 1203 	smull	r1, r2, r2, r3
 80054f8:	1152      	asrs	r2, r2, #5
 80054fa:	17db      	asrs	r3, r3, #31
 80054fc:	1ad3      	subs	r3, r2, r3
 80054fe:	4619      	mov	r1, r3
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f7fe fac3 	bl	8003a8c <Lcd_int>
	  Lcd_int(lcd, (int)display_speed_ref/10);
 8005506:	4b19      	ldr	r3, [pc, #100]	; (800556c <Lcd_display_parameter+0x198>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a13      	ldr	r2, [pc, #76]	; (8005558 <Lcd_display_parameter+0x184>)
 800550c:	fb82 1203 	smull	r1, r2, r2, r3
 8005510:	1092      	asrs	r2, r2, #2
 8005512:	17db      	asrs	r3, r3, #31
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	4619      	mov	r1, r3
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f7fe fab7 	bl	8003a8c <Lcd_int>
	  Lcd_int(lcd, (int)display_speed_ref%10);
 800551e:	4b13      	ldr	r3, [pc, #76]	; (800556c <Lcd_display_parameter+0x198>)
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	4b0d      	ldr	r3, [pc, #52]	; (8005558 <Lcd_display_parameter+0x184>)
 8005524:	fb83 1302 	smull	r1, r3, r3, r2
 8005528:	1099      	asrs	r1, r3, #2
 800552a:	17d3      	asrs	r3, r2, #31
 800552c:	1ac9      	subs	r1, r1, r3
 800552e:	460b      	mov	r3, r1
 8005530:	009b      	lsls	r3, r3, #2
 8005532:	440b      	add	r3, r1
 8005534:	005b      	lsls	r3, r3, #1
 8005536:	1ad1      	subs	r1, r2, r3
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f7fe faa7 	bl	8003a8c <Lcd_int>
 }
 800553e:	bf00      	nop
 8005540:	3708      	adds	r7, #8
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
 8005546:	bf00      	nop
 8005548:	0800a228 	.word	0x0800a228
 800554c:	0800a230 	.word	0x0800a230
 8005550:	2000041c 	.word	0x2000041c
 8005554:	51eb851f 	.word	0x51eb851f
 8005558:	66666667 	.word	0x66666667
 800555c:	0800a234 	.word	0x0800a234
 8005560:	0800a238 	.word	0x0800a238
 8005564:	20000420 	.word	0x20000420
 8005568:	0800a23c 	.word	0x0800a23c
 800556c:	20000424 	.word	0x20000424

08005570 <Process_GCode>:

 void Process_GCode(volatile uint16_t* g_code_string)
 {
 8005570:	b580      	push	{r7, lr}
 8005572:	f5ad 5d1d 	sub.w	sp, sp, #10048	; 0x2740
 8005576:	b082      	sub	sp, #8
 8005578:	af04      	add	r7, sp, #16
 800557a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800557e:	3b34      	subs	r3, #52	; 0x34
 8005580:	6018      	str	r0, [r3, #0]
	 char s[5000];
	 G_Code.totalNumbOfLineGCode = 0;
 8005582:	4b8d      	ldr	r3, [pc, #564]	; (80057b8 <Process_GCode+0x248>)
 8005584:	2200      	movs	r2, #0
 8005586:	801a      	strh	r2, [r3, #0]
	 for (int i= 0; i< 5000;i++)
 8005588:	2300      	movs	r3, #0
 800558a:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 800558e:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8005592:	6013      	str	r3, [r2, #0]
 8005594:	e03a      	b.n	800560c <Process_GCode+0x9c>
	 {
		 if(g_code_string[i] == 'G')
 8005596:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 800559a:	f103 0334 	add.w	r3, r3, #52	; 0x34
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	005a      	lsls	r2, r3, #1
 80055a2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80055a6:	3b34      	subs	r3, #52	; 0x34
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4413      	add	r3, r2
 80055ac:	881b      	ldrh	r3, [r3, #0]
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	2b47      	cmp	r3, #71	; 0x47
 80055b2:	d105      	bne.n	80055c0 <Process_GCode+0x50>
		 {
			 ++G_Code.totalNumbOfLineGCode;
 80055b4:	4b80      	ldr	r3, [pc, #512]	; (80057b8 <Process_GCode+0x248>)
 80055b6:	881b      	ldrh	r3, [r3, #0]
 80055b8:	3301      	adds	r3, #1
 80055ba:	b29a      	uxth	r2, r3
 80055bc:	4b7e      	ldr	r3, [pc, #504]	; (80057b8 <Process_GCode+0x248>)
 80055be:	801a      	strh	r2, [r3, #0]
		 }

		 s[i] = (char)g_code_string[i];
 80055c0:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 80055c4:	f103 0334 	add.w	r3, r3, #52	; 0x34
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	005a      	lsls	r2, r3, #1
 80055cc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80055d0:	3b34      	subs	r3, #52	; 0x34
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4413      	add	r3, r2
 80055d6:	881b      	ldrh	r3, [r3, #0]
 80055d8:	b29b      	uxth	r3, r3
 80055da:	b2d9      	uxtb	r1, r3
 80055dc:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 80055e0:	f103 0318 	add.w	r3, r3, #24
 80055e4:	3b14      	subs	r3, #20
 80055e6:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 80055ea:	f102 0234 	add.w	r2, r2, #52	; 0x34
 80055ee:	6812      	ldr	r2, [r2, #0]
 80055f0:	4413      	add	r3, r2
 80055f2:	460a      	mov	r2, r1
 80055f4:	701a      	strb	r2, [r3, #0]
	 for (int i= 0; i< 5000;i++)
 80055f6:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 80055fa:	f103 0334 	add.w	r3, r3, #52	; 0x34
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	3301      	adds	r3, #1
 8005602:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 8005606:	f102 0234 	add.w	r2, r2, #52	; 0x34
 800560a:	6013      	str	r3, [r2, #0]
 800560c:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 8005610:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f241 3287 	movw	r2, #4999	; 0x1387
 800561a:	4293      	cmp	r3, r2
 800561c:	ddbb      	ble.n	8005596 <Process_GCode+0x26>

	 }

	 for (int i = 0; i<G_Code.totalNumbOfLineGCode; i++)
 800561e:	2300      	movs	r3, #0
 8005620:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 8005624:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8005628:	6013      	str	r3, [r2, #0]
 800562a:	e0b4      	b.n	8005796 <Process_GCode+0x226>
	 {
		 float i1, i2, i3, i4;
		 char buff_s[5000];
		 memset(buff_s,0,5000);
 800562c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005630:	3b2c      	subs	r3, #44	; 0x2c
 8005632:	f241 3288 	movw	r2, #5000	; 0x1388
 8005636:	2100      	movs	r1, #0
 8005638:	4618      	mov	r0, r3
 800563a:	f000 fc43 	bl	8005ec4 <memset>
		 sscanf(s, "%*[^0123456789]%f %*[^0123456789]%f %*[^0123456789]%f %*[^0123456789]%f %[^\0]",
 800563e:	f507 519d 	add.w	r1, r7, #5024	; 0x13a0
 8005642:	f101 0118 	add.w	r1, r1, #24
 8005646:	391c      	subs	r1, #28
 8005648:	f507 529d 	add.w	r2, r7, #5024	; 0x13a0
 800564c:	f102 0218 	add.w	r2, r2, #24
 8005650:	3a18      	subs	r2, #24
 8005652:	f507 509d 	add.w	r0, r7, #5024	; 0x13a0
 8005656:	f100 0018 	add.w	r0, r0, #24
 800565a:	3814      	subs	r0, #20
 800565c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005660:	3b2c      	subs	r3, #44	; 0x2c
 8005662:	9302      	str	r3, [sp, #8]
 8005664:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8005668:	f103 0318 	add.w	r3, r3, #24
 800566c:	3b04      	subs	r3, #4
 800566e:	9301      	str	r3, [sp, #4]
 8005670:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8005674:	f103 0318 	add.w	r3, r3, #24
 8005678:	9300      	str	r3, [sp, #0]
 800567a:	460b      	mov	r3, r1
 800567c:	494f      	ldr	r1, [pc, #316]	; (80057bc <Process_GCode+0x24c>)
 800567e:	f001 fa8d 	bl	8006b9c <siscanf>
		                 &i2,
		                 &i3,
		 				 &i4,
						 buff_s);

		 for (int i=0; i<sizeof(buff_s); i++)
 8005682:	2300      	movs	r3, #0
 8005684:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 8005688:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 800568c:	6013      	str	r3, [r2, #0]
 800568e:	e021      	b.n	80056d4 <Process_GCode+0x164>
		 {
			 s[i] = buff_s[i];
 8005690:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005694:	3b2c      	subs	r3, #44	; 0x2c
 8005696:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 800569a:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 800569e:	6812      	ldr	r2, [r2, #0]
 80056a0:	4413      	add	r3, r2
 80056a2:	7819      	ldrb	r1, [r3, #0]
 80056a4:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 80056a8:	f103 0318 	add.w	r3, r3, #24
 80056ac:	3b14      	subs	r3, #20
 80056ae:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 80056b2:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 80056b6:	6812      	ldr	r2, [r2, #0]
 80056b8:	4413      	add	r3, r2
 80056ba:	460a      	mov	r2, r1
 80056bc:	701a      	strb	r2, [r3, #0]
		 for (int i=0; i<sizeof(buff_s); i++)
 80056be:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 80056c2:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	3301      	adds	r3, #1
 80056ca:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 80056ce:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 80056d2:	6013      	str	r3, [r2, #0]
 80056d4:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 80056d8:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f241 3287 	movw	r2, #4999	; 0x1387
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d9d4      	bls.n	8005690 <Process_GCode+0x120>
		 }

		 G_Code.G_Line[i].coordX     = (uint16_t)i2;
 80056e6:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 80056ea:	f103 0318 	add.w	r3, r3, #24
 80056ee:	3b1c      	subs	r3, #28
 80056f0:	edd3 7a00 	vldr	s15, [r3]
 80056f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056f8:	ee17 3a90 	vmov	r3, s15
 80056fc:	b298      	uxth	r0, r3
 80056fe:	492e      	ldr	r1, [pc, #184]	; (80057b8 <Process_GCode+0x248>)
 8005700:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 8005704:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	4613      	mov	r3, r2
 800570c:	005b      	lsls	r3, r3, #1
 800570e:	4413      	add	r3, r2
 8005710:	005b      	lsls	r3, r3, #1
 8005712:	440b      	add	r3, r1
 8005714:	3302      	adds	r3, #2
 8005716:	4602      	mov	r2, r0
 8005718:	801a      	strh	r2, [r3, #0]
		 G_Code.G_Line[i].coordY 	 = (uint16_t)i3;
 800571a:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800571e:	f103 0318 	add.w	r3, r3, #24
 8005722:	edd3 7a00 	vldr	s15, [r3]
 8005726:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800572a:	ee17 3a90 	vmov	r3, s15
 800572e:	b298      	uxth	r0, r3
 8005730:	4921      	ldr	r1, [pc, #132]	; (80057b8 <Process_GCode+0x248>)
 8005732:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 8005736:	f103 0330 	add.w	r3, r3, #48	; 0x30
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	4613      	mov	r3, r2
 800573e:	005b      	lsls	r3, r3, #1
 8005740:	4413      	add	r3, r2
 8005742:	005b      	lsls	r3, r3, #1
 8005744:	440b      	add	r3, r1
 8005746:	3304      	adds	r3, #4
 8005748:	4602      	mov	r2, r0
 800574a:	801a      	strh	r2, [r3, #0]
		 G_Code.G_Line[i].speed_ref  = (uint16_t)i4;
 800574c:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8005750:	f103 0318 	add.w	r3, r3, #24
 8005754:	3b04      	subs	r3, #4
 8005756:	edd3 7a00 	vldr	s15, [r3]
 800575a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800575e:	ee17 3a90 	vmov	r3, s15
 8005762:	b298      	uxth	r0, r3
 8005764:	4914      	ldr	r1, [pc, #80]	; (80057b8 <Process_GCode+0x248>)
 8005766:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 800576a:	f103 0330 	add.w	r3, r3, #48	; 0x30
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	4613      	mov	r3, r2
 8005772:	005b      	lsls	r3, r3, #1
 8005774:	4413      	add	r3, r2
 8005776:	005b      	lsls	r3, r3, #1
 8005778:	440b      	add	r3, r1
 800577a:	3306      	adds	r3, #6
 800577c:	4602      	mov	r2, r0
 800577e:	801a      	strh	r2, [r3, #0]
	 for (int i = 0; i<G_Code.totalNumbOfLineGCode; i++)
 8005780:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 8005784:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	3301      	adds	r3, #1
 800578c:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 8005790:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8005794:	6013      	str	r3, [r2, #0]
 8005796:	4b08      	ldr	r3, [pc, #32]	; (80057b8 <Process_GCode+0x248>)
 8005798:	881b      	ldrh	r3, [r3, #0]
 800579a:	461a      	mov	r2, r3
 800579c:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 80057a0:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4293      	cmp	r3, r2
 80057a8:	f6ff af40 	blt.w	800562c <Process_GCode+0xbc>
	 }

 }
 80057ac:	bf00      	nop
 80057ae:	f507 571c 	add.w	r7, r7, #9984	; 0x2700
 80057b2:	3738      	adds	r7, #56	; 0x38
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}
 80057b8:	20001b3c 	.word	0x20001b3c
 80057bc:	0800a240 	.word	0x0800a240

080057c0 <Start_Motors_ByGCode>:

 void Start_Motors_ByGCode()
 {
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b082      	sub	sp, #8
 80057c4:	af00      	add	r7, sp, #0

	 for (int i=0; i<G_Code.totalNumbOfLineGCode; i++)
 80057c6:	2300      	movs	r3, #0
 80057c8:	607b      	str	r3, [r7, #4]
 80057ca:	e0ff      	b.n	80059cc <Start_Motors_ByGCode+0x20c>
	 {

		 if (stepMotor1.state == NOT_RUNNING)
 80057cc:	4b85      	ldr	r3, [pc, #532]	; (80059e4 <Start_Motors_ByGCode+0x224>)
 80057ce:	7a1b      	ldrb	r3, [r3, #8]
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d167      	bne.n	80058a4 <Start_Motors_ByGCode+0xe4>
		 {
			stepMotor1.state = RUNNING;
 80057d4:	4b83      	ldr	r3, [pc, #524]	; (80059e4 <Start_Motors_ByGCode+0x224>)
 80057d6:	2200      	movs	r2, #0
 80057d8:	721a      	strb	r2, [r3, #8]
			Xk = G_Code.G_Line[i].coordX*10;
 80057da:	4983      	ldr	r1, [pc, #524]	; (80059e8 <Start_Motors_ByGCode+0x228>)
 80057dc:	687a      	ldr	r2, [r7, #4]
 80057de:	4613      	mov	r3, r2
 80057e0:	005b      	lsls	r3, r3, #1
 80057e2:	4413      	add	r3, r2
 80057e4:	005b      	lsls	r3, r3, #1
 80057e6:	440b      	add	r3, r1
 80057e8:	3302      	adds	r3, #2
 80057ea:	881b      	ldrh	r3, [r3, #0]
 80057ec:	461a      	mov	r2, r3
 80057ee:	0092      	lsls	r2, r2, #2
 80057f0:	4413      	add	r3, r2
 80057f2:	005b      	lsls	r3, r3, #1
 80057f4:	b29a      	uxth	r2, r3
 80057f6:	4b7d      	ldr	r3, [pc, #500]	; (80059ec <Start_Motors_ByGCode+0x22c>)
 80057f8:	801a      	strh	r2, [r3, #0]
			stepMotor1.stepNumb  = (Xk == temp_coordX)? 0: abs((Xk - temp_coordX));   		//multiple by 10
 80057fa:	4b7c      	ldr	r3, [pc, #496]	; (80059ec <Start_Motors_ByGCode+0x22c>)
 80057fc:	881a      	ldrh	r2, [r3, #0]
 80057fe:	4b7c      	ldr	r3, [pc, #496]	; (80059f0 <Start_Motors_ByGCode+0x230>)
 8005800:	881b      	ldrh	r3, [r3, #0]
 8005802:	b29b      	uxth	r3, r3
 8005804:	429a      	cmp	r2, r3
 8005806:	d00b      	beq.n	8005820 <Start_Motors_ByGCode+0x60>
 8005808:	4b78      	ldr	r3, [pc, #480]	; (80059ec <Start_Motors_ByGCode+0x22c>)
 800580a:	881b      	ldrh	r3, [r3, #0]
 800580c:	461a      	mov	r2, r3
 800580e:	4b78      	ldr	r3, [pc, #480]	; (80059f0 <Start_Motors_ByGCode+0x230>)
 8005810:	881b      	ldrh	r3, [r3, #0]
 8005812:	b29b      	uxth	r3, r3
 8005814:	1ad3      	subs	r3, r2, r3
 8005816:	2b00      	cmp	r3, #0
 8005818:	bfb8      	it	lt
 800581a:	425b      	neglt	r3, r3
 800581c:	b29b      	uxth	r3, r3
 800581e:	e000      	b.n	8005822 <Start_Motors_ByGCode+0x62>
 8005820:	2300      	movs	r3, #0
 8005822:	4a70      	ldr	r2, [pc, #448]	; (80059e4 <Start_Motors_ByGCode+0x224>)
 8005824:	8053      	strh	r3, [r2, #2]
			stepMotor1.speed     = (uint8_t)(G_Code.G_Line[i].speed_ref/1000);
 8005826:	4970      	ldr	r1, [pc, #448]	; (80059e8 <Start_Motors_ByGCode+0x228>)
 8005828:	687a      	ldr	r2, [r7, #4]
 800582a:	4613      	mov	r3, r2
 800582c:	005b      	lsls	r3, r3, #1
 800582e:	4413      	add	r3, r2
 8005830:	005b      	lsls	r3, r3, #1
 8005832:	440b      	add	r3, r1
 8005834:	3306      	adds	r3, #6
 8005836:	881b      	ldrh	r3, [r3, #0]
 8005838:	4a6e      	ldr	r2, [pc, #440]	; (80059f4 <Start_Motors_ByGCode+0x234>)
 800583a:	fba2 2303 	umull	r2, r3, r2, r3
 800583e:	099b      	lsrs	r3, r3, #6
 8005840:	b29b      	uxth	r3, r3
 8005842:	b2db      	uxtb	r3, r3
 8005844:	b29a      	uxth	r2, r3
 8005846:	4b67      	ldr	r3, [pc, #412]	; (80059e4 <Start_Motors_ByGCode+0x224>)
 8005848:	809a      	strh	r2, [r3, #4]
			stepMotor1.direction = (Xk >= temp_coordX)? CLOCKWISE : ANTICLOCKWISE;
 800584a:	4b68      	ldr	r3, [pc, #416]	; (80059ec <Start_Motors_ByGCode+0x22c>)
 800584c:	881a      	ldrh	r2, [r3, #0]
 800584e:	4b68      	ldr	r3, [pc, #416]	; (80059f0 <Start_Motors_ByGCode+0x230>)
 8005850:	881b      	ldrh	r3, [r3, #0]
 8005852:	b29b      	uxth	r3, r3
 8005854:	429a      	cmp	r2, r3
 8005856:	bf2c      	ite	cs
 8005858:	2301      	movcs	r3, #1
 800585a:	2300      	movcc	r3, #0
 800585c:	b2db      	uxtb	r3, r3
 800585e:	461a      	mov	r2, r3
 8005860:	4b60      	ldr	r3, [pc, #384]	; (80059e4 <Start_Motors_ByGCode+0x224>)
 8005862:	719a      	strb	r2, [r3, #6]
			stepMotor1.startStop = 1;			//make it run
 8005864:	4b5f      	ldr	r3, [pc, #380]	; (80059e4 <Start_Motors_ByGCode+0x224>)
 8005866:	2201      	movs	r2, #1
 8005868:	71da      	strb	r2, [r3, #7]
			__HAL_TIM_SET_AUTORELOAD(&htim3, stepMotor1.speed*100);
 800586a:	4b5e      	ldr	r3, [pc, #376]	; (80059e4 <Start_Motors_ByGCode+0x224>)
 800586c:	889b      	ldrh	r3, [r3, #4]
 800586e:	b29b      	uxth	r3, r3
 8005870:	461a      	mov	r2, r3
 8005872:	2364      	movs	r3, #100	; 0x64
 8005874:	fb03 f202 	mul.w	r2, r3, r2
 8005878:	4b5f      	ldr	r3, [pc, #380]	; (80059f8 <Start_Motors_ByGCode+0x238>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	62da      	str	r2, [r3, #44]	; 0x2c
 800587e:	4b59      	ldr	r3, [pc, #356]	; (80059e4 <Start_Motors_ByGCode+0x224>)
 8005880:	889b      	ldrh	r3, [r3, #4]
 8005882:	b29b      	uxth	r3, r3
 8005884:	461a      	mov	r2, r3
 8005886:	2364      	movs	r3, #100	; 0x64
 8005888:	fb03 f302 	mul.w	r3, r3, r2
 800588c:	461a      	mov	r2, r3
 800588e:	4b5a      	ldr	r3, [pc, #360]	; (80059f8 <Start_Motors_ByGCode+0x238>)
 8005890:	60da      	str	r2, [r3, #12]

			 if (htim3.State == HAL_TIM_STATE_READY) 		//Start timer3 to control motor1
 8005892:	4b59      	ldr	r3, [pc, #356]	; (80059f8 <Start_Motors_ByGCode+0x238>)
 8005894:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005898:	b2db      	uxtb	r3, r3
 800589a:	2b01      	cmp	r3, #1
 800589c:	d102      	bne.n	80058a4 <Start_Motors_ByGCode+0xe4>
			 {
				HAL_TIM_Base_Start_IT(&htim3);
 800589e:	4856      	ldr	r0, [pc, #344]	; (80059f8 <Start_Motors_ByGCode+0x238>)
 80058a0:	f7fc fb99 	bl	8001fd6 <HAL_TIM_Base_Start_IT>
			 }

		 }

		 if (stepMotor2.state == NOT_RUNNING)
 80058a4:	4b55      	ldr	r3, [pc, #340]	; (80059fc <Start_Motors_ByGCode+0x23c>)
 80058a6:	7a1b      	ldrb	r3, [r3, #8]
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d167      	bne.n	800597c <Start_Motors_ByGCode+0x1bc>
		 {
			stepMotor2.state = RUNNING;
 80058ac:	4b53      	ldr	r3, [pc, #332]	; (80059fc <Start_Motors_ByGCode+0x23c>)
 80058ae:	2200      	movs	r2, #0
 80058b0:	721a      	strb	r2, [r3, #8]
			Yk = G_Code.G_Line[i].coordY*10;
 80058b2:	494d      	ldr	r1, [pc, #308]	; (80059e8 <Start_Motors_ByGCode+0x228>)
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	4613      	mov	r3, r2
 80058b8:	005b      	lsls	r3, r3, #1
 80058ba:	4413      	add	r3, r2
 80058bc:	005b      	lsls	r3, r3, #1
 80058be:	440b      	add	r3, r1
 80058c0:	3304      	adds	r3, #4
 80058c2:	881b      	ldrh	r3, [r3, #0]
 80058c4:	461a      	mov	r2, r3
 80058c6:	0092      	lsls	r2, r2, #2
 80058c8:	4413      	add	r3, r2
 80058ca:	005b      	lsls	r3, r3, #1
 80058cc:	b29a      	uxth	r2, r3
 80058ce:	4b4c      	ldr	r3, [pc, #304]	; (8005a00 <Start_Motors_ByGCode+0x240>)
 80058d0:	801a      	strh	r2, [r3, #0]
			stepMotor2.stepNumb  = (Yk == temp_coordY)? 0: abs((Yk - temp_coordY));
 80058d2:	4b4b      	ldr	r3, [pc, #300]	; (8005a00 <Start_Motors_ByGCode+0x240>)
 80058d4:	881a      	ldrh	r2, [r3, #0]
 80058d6:	4b4b      	ldr	r3, [pc, #300]	; (8005a04 <Start_Motors_ByGCode+0x244>)
 80058d8:	881b      	ldrh	r3, [r3, #0]
 80058da:	b29b      	uxth	r3, r3
 80058dc:	429a      	cmp	r2, r3
 80058de:	d00b      	beq.n	80058f8 <Start_Motors_ByGCode+0x138>
 80058e0:	4b47      	ldr	r3, [pc, #284]	; (8005a00 <Start_Motors_ByGCode+0x240>)
 80058e2:	881b      	ldrh	r3, [r3, #0]
 80058e4:	461a      	mov	r2, r3
 80058e6:	4b47      	ldr	r3, [pc, #284]	; (8005a04 <Start_Motors_ByGCode+0x244>)
 80058e8:	881b      	ldrh	r3, [r3, #0]
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	1ad3      	subs	r3, r2, r3
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	bfb8      	it	lt
 80058f2:	425b      	neglt	r3, r3
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	e000      	b.n	80058fa <Start_Motors_ByGCode+0x13a>
 80058f8:	2300      	movs	r3, #0
 80058fa:	4a40      	ldr	r2, [pc, #256]	; (80059fc <Start_Motors_ByGCode+0x23c>)
 80058fc:	8053      	strh	r3, [r2, #2]
			stepMotor2.speed     = (uint8_t)(G_Code.G_Line[i].speed_ref/1000);
 80058fe:	493a      	ldr	r1, [pc, #232]	; (80059e8 <Start_Motors_ByGCode+0x228>)
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	4613      	mov	r3, r2
 8005904:	005b      	lsls	r3, r3, #1
 8005906:	4413      	add	r3, r2
 8005908:	005b      	lsls	r3, r3, #1
 800590a:	440b      	add	r3, r1
 800590c:	3306      	adds	r3, #6
 800590e:	881b      	ldrh	r3, [r3, #0]
 8005910:	4a38      	ldr	r2, [pc, #224]	; (80059f4 <Start_Motors_ByGCode+0x234>)
 8005912:	fba2 2303 	umull	r2, r3, r2, r3
 8005916:	099b      	lsrs	r3, r3, #6
 8005918:	b29b      	uxth	r3, r3
 800591a:	b2db      	uxtb	r3, r3
 800591c:	b29a      	uxth	r2, r3
 800591e:	4b37      	ldr	r3, [pc, #220]	; (80059fc <Start_Motors_ByGCode+0x23c>)
 8005920:	809a      	strh	r2, [r3, #4]
			stepMotor2.direction = (Yk >= temp_coordY)?CLOCKWISE : ANTICLOCKWISE;
 8005922:	4b37      	ldr	r3, [pc, #220]	; (8005a00 <Start_Motors_ByGCode+0x240>)
 8005924:	881a      	ldrh	r2, [r3, #0]
 8005926:	4b37      	ldr	r3, [pc, #220]	; (8005a04 <Start_Motors_ByGCode+0x244>)
 8005928:	881b      	ldrh	r3, [r3, #0]
 800592a:	b29b      	uxth	r3, r3
 800592c:	429a      	cmp	r2, r3
 800592e:	bf2c      	ite	cs
 8005930:	2301      	movcs	r3, #1
 8005932:	2300      	movcc	r3, #0
 8005934:	b2db      	uxtb	r3, r3
 8005936:	461a      	mov	r2, r3
 8005938:	4b30      	ldr	r3, [pc, #192]	; (80059fc <Start_Motors_ByGCode+0x23c>)
 800593a:	719a      	strb	r2, [r3, #6]
			stepMotor2.startStop = 1; 			//make it run
 800593c:	4b2f      	ldr	r3, [pc, #188]	; (80059fc <Start_Motors_ByGCode+0x23c>)
 800593e:	2201      	movs	r2, #1
 8005940:	71da      	strb	r2, [r3, #7]
			__HAL_TIM_SET_AUTORELOAD(&htim4, stepMotor2.speed*100);
 8005942:	4b2e      	ldr	r3, [pc, #184]	; (80059fc <Start_Motors_ByGCode+0x23c>)
 8005944:	889b      	ldrh	r3, [r3, #4]
 8005946:	b29b      	uxth	r3, r3
 8005948:	461a      	mov	r2, r3
 800594a:	2364      	movs	r3, #100	; 0x64
 800594c:	fb03 f202 	mul.w	r2, r3, r2
 8005950:	4b2d      	ldr	r3, [pc, #180]	; (8005a08 <Start_Motors_ByGCode+0x248>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	62da      	str	r2, [r3, #44]	; 0x2c
 8005956:	4b29      	ldr	r3, [pc, #164]	; (80059fc <Start_Motors_ByGCode+0x23c>)
 8005958:	889b      	ldrh	r3, [r3, #4]
 800595a:	b29b      	uxth	r3, r3
 800595c:	461a      	mov	r2, r3
 800595e:	2364      	movs	r3, #100	; 0x64
 8005960:	fb03 f302 	mul.w	r3, r3, r2
 8005964:	461a      	mov	r2, r3
 8005966:	4b28      	ldr	r3, [pc, #160]	; (8005a08 <Start_Motors_ByGCode+0x248>)
 8005968:	60da      	str	r2, [r3, #12]


			  if (htim4.State == HAL_TIM_STATE_READY)		//Start timer4 to control motor2
 800596a:	4b27      	ldr	r3, [pc, #156]	; (8005a08 <Start_Motors_ByGCode+0x248>)
 800596c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005970:	b2db      	uxtb	r3, r3
 8005972:	2b01      	cmp	r3, #1
 8005974:	d102      	bne.n	800597c <Start_Motors_ByGCode+0x1bc>
			  {
				  HAL_TIM_Base_Start_IT(&htim4);
 8005976:	4824      	ldr	r0, [pc, #144]	; (8005a08 <Start_Motors_ByGCode+0x248>)
 8005978:	f7fc fb2d 	bl	8001fd6 <HAL_TIM_Base_Start_IT>
			  }

		 }

		 while ((stepMotor1.state == RUNNING)||(stepMotor2.state == RUNNING)){};
 800597c:	bf00      	nop
 800597e:	4b19      	ldr	r3, [pc, #100]	; (80059e4 <Start_Motors_ByGCode+0x224>)
 8005980:	7a1b      	ldrb	r3, [r3, #8]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d0fb      	beq.n	800597e <Start_Motors_ByGCode+0x1be>
 8005986:	4b1d      	ldr	r3, [pc, #116]	; (80059fc <Start_Motors_ByGCode+0x23c>)
 8005988:	7a1b      	ldrb	r3, [r3, #8]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d0f7      	beq.n	800597e <Start_Motors_ByGCode+0x1be>
		 temp_coordX = Xk;
 800598e:	4b17      	ldr	r3, [pc, #92]	; (80059ec <Start_Motors_ByGCode+0x22c>)
 8005990:	881a      	ldrh	r2, [r3, #0]
 8005992:	4b17      	ldr	r3, [pc, #92]	; (80059f0 <Start_Motors_ByGCode+0x230>)
 8005994:	801a      	strh	r2, [r3, #0]
		 temp_coordY = Yk;
 8005996:	4b1a      	ldr	r3, [pc, #104]	; (8005a00 <Start_Motors_ByGCode+0x240>)
 8005998:	881a      	ldrh	r2, [r3, #0]
 800599a:	4b1a      	ldr	r3, [pc, #104]	; (8005a04 <Start_Motors_ByGCode+0x244>)
 800599c:	801a      	strh	r2, [r3, #0]

		 if (i!= G_Code.totalNumbOfLineGCode -1)
 800599e:	4b12      	ldr	r3, [pc, #72]	; (80059e8 <Start_Motors_ByGCode+0x228>)
 80059a0:	881b      	ldrh	r3, [r3, #0]
 80059a2:	3b01      	subs	r3, #1
 80059a4:	687a      	ldr	r2, [r7, #4]
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d00d      	beq.n	80059c6 <Start_Motors_ByGCode+0x206>
		 {
			 isDrilling = 1;
 80059aa:	4b18      	ldr	r3, [pc, #96]	; (8005a0c <Start_Motors_ByGCode+0x24c>)
 80059ac:	2201      	movs	r2, #1
 80059ae:	801a      	strh	r2, [r3, #0]
			 HAL_Delay(1000);						// Do anything desired
 80059b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80059b4:	f7fb fb62 	bl	800107c <HAL_Delay>
			 isDrilling = 0;
 80059b8:	4b14      	ldr	r3, [pc, #80]	; (8005a0c <Start_Motors_ByGCode+0x24c>)
 80059ba:	2200      	movs	r2, #0
 80059bc:	801a      	strh	r2, [r3, #0]
			 HAL_Delay(500);
 80059be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80059c2:	f7fb fb5b 	bl	800107c <HAL_Delay>
	 for (int i=0; i<G_Code.totalNumbOfLineGCode; i++)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	3301      	adds	r3, #1
 80059ca:	607b      	str	r3, [r7, #4]
 80059cc:	4b06      	ldr	r3, [pc, #24]	; (80059e8 <Start_Motors_ByGCode+0x228>)
 80059ce:	881b      	ldrh	r3, [r3, #0]
 80059d0:	461a      	mov	r2, r3
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4293      	cmp	r3, r2
 80059d6:	f6ff aef9 	blt.w	80057cc <Start_Motors_ByGCode+0xc>
		 }
	 }

 }
 80059da:	bf00      	nop
 80059dc:	3708      	adds	r7, #8
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
 80059e2:	bf00      	nop
 80059e4:	200043d8 	.word	0x200043d8
 80059e8:	20001b3c 	.word	0x20001b3c
 80059ec:	20000428 	.word	0x20000428
 80059f0:	200019a0 	.word	0x200019a0
 80059f4:	10624dd3 	.word	0x10624dd3
 80059f8:	20001c00 	.word	0x20001c00
 80059fc:	200043f0 	.word	0x200043f0
 8005a00:	2000042a 	.word	0x2000042a
 8005a04:	20001998 	.word	0x20001998
 8005a08:	20001bb8 	.word	0x20001bb8
 8005a0c:	2000044a 	.word	0x2000044a

08005a10 <runMotor>:

 void runMotor(stepMotor_typeDef* motor, uint16_t steps, uint8_t dir)
 {
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b082      	sub	sp, #8
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	460b      	mov	r3, r1
 8005a1a:	807b      	strh	r3, [r7, #2]
 8005a1c:	4613      	mov	r3, r2
 8005a1e:	707b      	strb	r3, [r7, #1]

		 while ((motor->state == RUNNING)){};
 8005a20:	bf00      	nop
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	7a1b      	ldrb	r3, [r3, #8]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d0fb      	beq.n	8005a22 <runMotor+0x12>
		 if (motor->state == NOT_RUNNING)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	7a1b      	ldrb	r3, [r3, #8]
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	d15a      	bne.n	8005ae8 <runMotor+0xd8>
		 {
			 motor->stepNumb  = steps ;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	887a      	ldrh	r2, [r7, #2]
 8005a36:	805a      	strh	r2, [r3, #2]
			 motor->speed     = 2;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2202      	movs	r2, #2
 8005a3c:	809a      	strh	r2, [r3, #4]
			 motor->direction = dir;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	787a      	ldrb	r2, [r7, #1]
 8005a42:	719a      	strb	r2, [r3, #6]
			 motor->startStop = 1;			//make it run
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	71da      	strb	r2, [r3, #7]


			 if (motor == &stepMotor1)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4a28      	ldr	r2, [pc, #160]	; (8005af0 <runMotor+0xe0>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d123      	bne.n	8005a9a <runMotor+0x8a>
			 {
				__HAL_TIM_SET_AUTORELOAD(&htim3, stepMotor1.speed*100);
 8005a52:	4b27      	ldr	r3, [pc, #156]	; (8005af0 <runMotor+0xe0>)
 8005a54:	889b      	ldrh	r3, [r3, #4]
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	461a      	mov	r2, r3
 8005a5a:	2364      	movs	r3, #100	; 0x64
 8005a5c:	fb03 f202 	mul.w	r2, r3, r2
 8005a60:	4b24      	ldr	r3, [pc, #144]	; (8005af4 <runMotor+0xe4>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	62da      	str	r2, [r3, #44]	; 0x2c
 8005a66:	4b22      	ldr	r3, [pc, #136]	; (8005af0 <runMotor+0xe0>)
 8005a68:	889b      	ldrh	r3, [r3, #4]
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	2364      	movs	r3, #100	; 0x64
 8005a70:	fb03 f302 	mul.w	r3, r3, r2
 8005a74:	461a      	mov	r2, r3
 8005a76:	4b1f      	ldr	r3, [pc, #124]	; (8005af4 <runMotor+0xe4>)
 8005a78:	60da      	str	r2, [r3, #12]
				temp_coordX = 0;
 8005a7a:	4b1f      	ldr	r3, [pc, #124]	; (8005af8 <runMotor+0xe8>)
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	801a      	strh	r2, [r3, #0]

				 if (htim3.State == HAL_TIM_STATE_READY) 		//Start timer3 to control motor1
 8005a80:	4b1c      	ldr	r3, [pc, #112]	; (8005af4 <runMotor+0xe4>)
 8005a82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d102      	bne.n	8005a92 <runMotor+0x82>
				 {
					HAL_TIM_Base_Start_IT(&htim3);
 8005a8c:	4819      	ldr	r0, [pc, #100]	; (8005af4 <runMotor+0xe4>)
 8005a8e:	f7fc faa2 	bl	8001fd6 <HAL_TIM_Base_Start_IT>
				 }
				 stepMotor1.state = RUNNING;
 8005a92:	4b17      	ldr	r3, [pc, #92]	; (8005af0 <runMotor+0xe0>)
 8005a94:	2200      	movs	r2, #0
 8005a96:	721a      	strb	r2, [r3, #8]
					  HAL_TIM_Base_Start_IT(&htim4);
				  }
				  stepMotor2.state = RUNNING;
			 }
		 }
 }
 8005a98:	e026      	b.n	8005ae8 <runMotor+0xd8>
			 else if (motor == &stepMotor2 )
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4a17      	ldr	r2, [pc, #92]	; (8005afc <runMotor+0xec>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d122      	bne.n	8005ae8 <runMotor+0xd8>
				__HAL_TIM_SET_AUTORELOAD(&htim4, stepMotor2.speed*100);
 8005aa2:	4b16      	ldr	r3, [pc, #88]	; (8005afc <runMotor+0xec>)
 8005aa4:	889b      	ldrh	r3, [r3, #4]
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	2364      	movs	r3, #100	; 0x64
 8005aac:	fb03 f202 	mul.w	r2, r3, r2
 8005ab0:	4b13      	ldr	r3, [pc, #76]	; (8005b00 <runMotor+0xf0>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	62da      	str	r2, [r3, #44]	; 0x2c
 8005ab6:	4b11      	ldr	r3, [pc, #68]	; (8005afc <runMotor+0xec>)
 8005ab8:	889b      	ldrh	r3, [r3, #4]
 8005aba:	b29b      	uxth	r3, r3
 8005abc:	461a      	mov	r2, r3
 8005abe:	2364      	movs	r3, #100	; 0x64
 8005ac0:	fb03 f302 	mul.w	r3, r3, r2
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	4b0e      	ldr	r3, [pc, #56]	; (8005b00 <runMotor+0xf0>)
 8005ac8:	60da      	str	r2, [r3, #12]
				temp_coordY = 0;
 8005aca:	4b0e      	ldr	r3, [pc, #56]	; (8005b04 <runMotor+0xf4>)
 8005acc:	2200      	movs	r2, #0
 8005ace:	801a      	strh	r2, [r3, #0]
				  if (htim4.State == HAL_TIM_STATE_READY)		//Start timer4 to control motor2
 8005ad0:	4b0b      	ldr	r3, [pc, #44]	; (8005b00 <runMotor+0xf0>)
 8005ad2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ad6:	b2db      	uxtb	r3, r3
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d102      	bne.n	8005ae2 <runMotor+0xd2>
					  HAL_TIM_Base_Start_IT(&htim4);
 8005adc:	4808      	ldr	r0, [pc, #32]	; (8005b00 <runMotor+0xf0>)
 8005ade:	f7fc fa7a 	bl	8001fd6 <HAL_TIM_Base_Start_IT>
				  stepMotor2.state = RUNNING;
 8005ae2:	4b06      	ldr	r3, [pc, #24]	; (8005afc <runMotor+0xec>)
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	721a      	strb	r2, [r3, #8]
 }
 8005ae8:	bf00      	nop
 8005aea:	3708      	adds	r7, #8
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}
 8005af0:	200043d8 	.word	0x200043d8
 8005af4:	20001c00 	.word	0x20001c00
 8005af8:	200019a0 	.word	0x200019a0
 8005afc:	200043f0 	.word	0x200043f0
 8005b00:	20001bb8 	.word	0x20001bb8
 8005b04:	20001998 	.word	0x20001998

08005b08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005b0c:	bf00      	nop
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr
	...

08005b18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b1e:	2300      	movs	r3, #0
 8005b20:	607b      	str	r3, [r7, #4]
 8005b22:	4b10      	ldr	r3, [pc, #64]	; (8005b64 <HAL_MspInit+0x4c>)
 8005b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b26:	4a0f      	ldr	r2, [pc, #60]	; (8005b64 <HAL_MspInit+0x4c>)
 8005b28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005b2c:	6453      	str	r3, [r2, #68]	; 0x44
 8005b2e:	4b0d      	ldr	r3, [pc, #52]	; (8005b64 <HAL_MspInit+0x4c>)
 8005b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b36:	607b      	str	r3, [r7, #4]
 8005b38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	603b      	str	r3, [r7, #0]
 8005b3e:	4b09      	ldr	r3, [pc, #36]	; (8005b64 <HAL_MspInit+0x4c>)
 8005b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b42:	4a08      	ldr	r2, [pc, #32]	; (8005b64 <HAL_MspInit+0x4c>)
 8005b44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b48:	6413      	str	r3, [r2, #64]	; 0x40
 8005b4a:	4b06      	ldr	r3, [pc, #24]	; (8005b64 <HAL_MspInit+0x4c>)
 8005b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b52:	603b      	str	r3, [r7, #0]
 8005b54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005b56:	bf00      	nop
 8005b58:	370c      	adds	r7, #12
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr
 8005b62:	bf00      	nop
 8005b64:	40023800 	.word	0x40023800

08005b68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b086      	sub	sp, #24
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b78:	d116      	bne.n	8005ba8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	617b      	str	r3, [r7, #20]
 8005b7e:	4b28      	ldr	r3, [pc, #160]	; (8005c20 <HAL_TIM_Base_MspInit+0xb8>)
 8005b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b82:	4a27      	ldr	r2, [pc, #156]	; (8005c20 <HAL_TIM_Base_MspInit+0xb8>)
 8005b84:	f043 0301 	orr.w	r3, r3, #1
 8005b88:	6413      	str	r3, [r2, #64]	; 0x40
 8005b8a:	4b25      	ldr	r3, [pc, #148]	; (8005c20 <HAL_TIM_Base_MspInit+0xb8>)
 8005b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b8e:	f003 0301 	and.w	r3, r3, #1
 8005b92:	617b      	str	r3, [r7, #20]
 8005b94:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8005b96:	2200      	movs	r2, #0
 8005b98:	2100      	movs	r1, #0
 8005b9a:	201c      	movs	r0, #28
 8005b9c:	f7fb fb6b 	bl	8001276 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005ba0:	201c      	movs	r0, #28
 8005ba2:	f7fb fb84 	bl	80012ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8005ba6:	e036      	b.n	8005c16 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM3)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a1d      	ldr	r2, [pc, #116]	; (8005c24 <HAL_TIM_Base_MspInit+0xbc>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d116      	bne.n	8005be0 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	613b      	str	r3, [r7, #16]
 8005bb6:	4b1a      	ldr	r3, [pc, #104]	; (8005c20 <HAL_TIM_Base_MspInit+0xb8>)
 8005bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bba:	4a19      	ldr	r2, [pc, #100]	; (8005c20 <HAL_TIM_Base_MspInit+0xb8>)
 8005bbc:	f043 0302 	orr.w	r3, r3, #2
 8005bc0:	6413      	str	r3, [r2, #64]	; 0x40
 8005bc2:	4b17      	ldr	r3, [pc, #92]	; (8005c20 <HAL_TIM_Base_MspInit+0xb8>)
 8005bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc6:	f003 0302 	and.w	r3, r3, #2
 8005bca:	613b      	str	r3, [r7, #16]
 8005bcc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8005bce:	2200      	movs	r2, #0
 8005bd0:	2100      	movs	r1, #0
 8005bd2:	201d      	movs	r0, #29
 8005bd4:	f7fb fb4f 	bl	8001276 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005bd8:	201d      	movs	r0, #29
 8005bda:	f7fb fb68 	bl	80012ae <HAL_NVIC_EnableIRQ>
}
 8005bde:	e01a      	b.n	8005c16 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM4)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a10      	ldr	r2, [pc, #64]	; (8005c28 <HAL_TIM_Base_MspInit+0xc0>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d115      	bne.n	8005c16 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005bea:	2300      	movs	r3, #0
 8005bec:	60fb      	str	r3, [r7, #12]
 8005bee:	4b0c      	ldr	r3, [pc, #48]	; (8005c20 <HAL_TIM_Base_MspInit+0xb8>)
 8005bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf2:	4a0b      	ldr	r2, [pc, #44]	; (8005c20 <HAL_TIM_Base_MspInit+0xb8>)
 8005bf4:	f043 0304 	orr.w	r3, r3, #4
 8005bf8:	6413      	str	r3, [r2, #64]	; 0x40
 8005bfa:	4b09      	ldr	r3, [pc, #36]	; (8005c20 <HAL_TIM_Base_MspInit+0xb8>)
 8005bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bfe:	f003 0304 	and.w	r3, r3, #4
 8005c02:	60fb      	str	r3, [r7, #12]
 8005c04:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8005c06:	2200      	movs	r2, #0
 8005c08:	2100      	movs	r1, #0
 8005c0a:	201e      	movs	r0, #30
 8005c0c:	f7fb fb33 	bl	8001276 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8005c10:	201e      	movs	r0, #30
 8005c12:	f7fb fb4c 	bl	80012ae <HAL_NVIC_EnableIRQ>
}
 8005c16:	bf00      	nop
 8005c18:	3718      	adds	r7, #24
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}
 8005c1e:	bf00      	nop
 8005c20:	40023800 	.word	0x40023800
 8005c24:	40000400 	.word	0x40000400
 8005c28:	40000800 	.word	0x40000800

08005c2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b08a      	sub	sp, #40	; 0x28
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c34:	f107 0314 	add.w	r3, r7, #20
 8005c38:	2200      	movs	r2, #0
 8005c3a:	601a      	str	r2, [r3, #0]
 8005c3c:	605a      	str	r2, [r3, #4]
 8005c3e:	609a      	str	r2, [r3, #8]
 8005c40:	60da      	str	r2, [r3, #12]
 8005c42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a1d      	ldr	r2, [pc, #116]	; (8005cc0 <HAL_UART_MspInit+0x94>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d133      	bne.n	8005cb6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8005c4e:	2300      	movs	r3, #0
 8005c50:	613b      	str	r3, [r7, #16]
 8005c52:	4b1c      	ldr	r3, [pc, #112]	; (8005cc4 <HAL_UART_MspInit+0x98>)
 8005c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c56:	4a1b      	ldr	r2, [pc, #108]	; (8005cc4 <HAL_UART_MspInit+0x98>)
 8005c58:	f043 0320 	orr.w	r3, r3, #32
 8005c5c:	6453      	str	r3, [r2, #68]	; 0x44
 8005c5e:	4b19      	ldr	r3, [pc, #100]	; (8005cc4 <HAL_UART_MspInit+0x98>)
 8005c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c62:	f003 0320 	and.w	r3, r3, #32
 8005c66:	613b      	str	r3, [r7, #16]
 8005c68:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	60fb      	str	r3, [r7, #12]
 8005c6e:	4b15      	ldr	r3, [pc, #84]	; (8005cc4 <HAL_UART_MspInit+0x98>)
 8005c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c72:	4a14      	ldr	r2, [pc, #80]	; (8005cc4 <HAL_UART_MspInit+0x98>)
 8005c74:	f043 0304 	orr.w	r3, r3, #4
 8005c78:	6313      	str	r3, [r2, #48]	; 0x30
 8005c7a:	4b12      	ldr	r3, [pc, #72]	; (8005cc4 <HAL_UART_MspInit+0x98>)
 8005c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c7e:	f003 0304 	and.w	r3, r3, #4
 8005c82:	60fb      	str	r3, [r7, #12]
 8005c84:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration    
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005c86:	23c0      	movs	r3, #192	; 0xc0
 8005c88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c8a:	2302      	movs	r3, #2
 8005c8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c92:	2303      	movs	r3, #3
 8005c94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8005c96:	2308      	movs	r3, #8
 8005c98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005c9a:	f107 0314 	add.w	r3, r7, #20
 8005c9e:	4619      	mov	r1, r3
 8005ca0:	4809      	ldr	r0, [pc, #36]	; (8005cc8 <HAL_UART_MspInit+0x9c>)
 8005ca2:	f7fb fb41 	bl	8001328 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	2100      	movs	r1, #0
 8005caa:	2047      	movs	r0, #71	; 0x47
 8005cac:	f7fb fae3 	bl	8001276 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8005cb0:	2047      	movs	r0, #71	; 0x47
 8005cb2:	f7fb fafc 	bl	80012ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8005cb6:	bf00      	nop
 8005cb8:	3728      	adds	r7, #40	; 0x28
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	bf00      	nop
 8005cc0:	40011400 	.word	0x40011400
 8005cc4:	40023800 	.word	0x40023800
 8005cc8:	40020800 	.word	0x40020800

08005ccc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005cd0:	bf00      	nop
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr

08005cda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005cda:	b480      	push	{r7}
 8005cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005cde:	e7fe      	b.n	8005cde <HardFault_Handler+0x4>

08005ce0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005ce4:	e7fe      	b.n	8005ce4 <MemManage_Handler+0x4>

08005ce6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005ce6:	b480      	push	{r7}
 8005ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005cea:	e7fe      	b.n	8005cea <BusFault_Handler+0x4>

08005cec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005cec:	b480      	push	{r7}
 8005cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005cf0:	e7fe      	b.n	8005cf0 <UsageFault_Handler+0x4>

08005cf2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005cf2:	b480      	push	{r7}
 8005cf4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005cf6:	bf00      	nop
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr

08005d00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005d00:	b480      	push	{r7}
 8005d02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005d04:	bf00      	nop
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr

08005d0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005d0e:	b480      	push	{r7}
 8005d10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005d12:	bf00      	nop
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr

08005d1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005d20:	f7fb f98c 	bl	800103c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005d24:	bf00      	nop
 8005d26:	bd80      	pop	{r7, pc}

08005d28 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8005d2c:	2001      	movs	r0, #1
 8005d2e:	f7fb fcaf 	bl	8001690 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8005d32:	bf00      	nop
 8005d34:	bd80      	pop	{r7, pc}
	...

08005d38 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005d3c:	4802      	ldr	r0, [pc, #8]	; (8005d48 <TIM2_IRQHandler+0x10>)
 8005d3e:	f7fc f999 	bl	8002074 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005d42:	bf00      	nop
 8005d44:	bd80      	pop	{r7, pc}
 8005d46:	bf00      	nop
 8005d48:	20004398 	.word	0x20004398

08005d4c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005d50:	4802      	ldr	r0, [pc, #8]	; (8005d5c <TIM3_IRQHandler+0x10>)
 8005d52:	f7fc f98f 	bl	8002074 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005d56:	bf00      	nop
 8005d58:	bd80      	pop	{r7, pc}
 8005d5a:	bf00      	nop
 8005d5c:	20001c00 	.word	0x20001c00

08005d60 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8005d64:	4802      	ldr	r0, [pc, #8]	; (8005d70 <TIM4_IRQHandler+0x10>)
 8005d66:	f7fc f985 	bl	8002074 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8005d6a:	bf00      	nop
 8005d6c:	bd80      	pop	{r7, pc}
 8005d6e:	bf00      	nop
 8005d70:	20001bb8 	.word	0x20001bb8

08005d74 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8005d78:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8005d7c:	f7fb fc88 	bl	8001690 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005d80:	bf00      	nop
 8005d82:	bd80      	pop	{r7, pc}

08005d84 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8005d88:	4802      	ldr	r0, [pc, #8]	; (8005d94 <USART6_IRQHandler+0x10>)
 8005d8a:	f7fc fe33 	bl	80029f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */


  /* USER CODE END USART6_IRQn 1 */
}
 8005d8e:	bf00      	nop
 8005d90:	bd80      	pop	{r7, pc}
 8005d92:	bf00      	nop
 8005d94:	20004354 	.word	0x20004354

08005d98 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b084      	sub	sp, #16
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005da0:	4b11      	ldr	r3, [pc, #68]	; (8005de8 <_sbrk+0x50>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d102      	bne.n	8005dae <_sbrk+0x16>
		heap_end = &end;
 8005da8:	4b0f      	ldr	r3, [pc, #60]	; (8005de8 <_sbrk+0x50>)
 8005daa:	4a10      	ldr	r2, [pc, #64]	; (8005dec <_sbrk+0x54>)
 8005dac:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8005dae:	4b0e      	ldr	r3, [pc, #56]	; (8005de8 <_sbrk+0x50>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8005db4:	4b0c      	ldr	r3, [pc, #48]	; (8005de8 <_sbrk+0x50>)
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	4413      	add	r3, r2
 8005dbc:	466a      	mov	r2, sp
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d907      	bls.n	8005dd2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8005dc2:	f000 f855 	bl	8005e70 <__errno>
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	230c      	movs	r3, #12
 8005dca:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8005dcc:	f04f 33ff 	mov.w	r3, #4294967295
 8005dd0:	e006      	b.n	8005de0 <_sbrk+0x48>
	}

	heap_end += incr;
 8005dd2:	4b05      	ldr	r3, [pc, #20]	; (8005de8 <_sbrk+0x50>)
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4413      	add	r3, r2
 8005dda:	4a03      	ldr	r2, [pc, #12]	; (8005de8 <_sbrk+0x50>)
 8005ddc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8005dde:	68fb      	ldr	r3, [r7, #12]
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3710      	adds	r7, #16
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}
 8005de8:	20000430 	.word	0x20000430
 8005dec:	20004410 	.word	0x20004410

08005df0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005df0:	b480      	push	{r7}
 8005df2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005df4:	4b08      	ldr	r3, [pc, #32]	; (8005e18 <SystemInit+0x28>)
 8005df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dfa:	4a07      	ldr	r2, [pc, #28]	; (8005e18 <SystemInit+0x28>)
 8005dfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005e00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005e04:	4b04      	ldr	r3, [pc, #16]	; (8005e18 <SystemInit+0x28>)
 8005e06:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005e0a:	609a      	str	r2, [r3, #8]
#endif
}
 8005e0c:	bf00      	nop
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr
 8005e16:	bf00      	nop
 8005e18:	e000ed00 	.word	0xe000ed00

08005e1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8005e1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005e54 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005e20:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005e22:	e003      	b.n	8005e2c <LoopCopyDataInit>

08005e24 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005e24:	4b0c      	ldr	r3, [pc, #48]	; (8005e58 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005e26:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005e28:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005e2a:	3104      	adds	r1, #4

08005e2c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005e2c:	480b      	ldr	r0, [pc, #44]	; (8005e5c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005e2e:	4b0c      	ldr	r3, [pc, #48]	; (8005e60 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005e30:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005e32:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005e34:	d3f6      	bcc.n	8005e24 <CopyDataInit>
  ldr  r2, =_sbss
 8005e36:	4a0b      	ldr	r2, [pc, #44]	; (8005e64 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005e38:	e002      	b.n	8005e40 <LoopFillZerobss>

08005e3a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005e3a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005e3c:	f842 3b04 	str.w	r3, [r2], #4

08005e40 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005e40:	4b09      	ldr	r3, [pc, #36]	; (8005e68 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005e42:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005e44:	d3f9      	bcc.n	8005e3a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005e46:	f7ff ffd3 	bl	8005df0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005e4a:	f000 f817 	bl	8005e7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005e4e:	f7fe fa09 	bl	8004264 <main>
  bx  lr    
 8005e52:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8005e54:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8005e58:	0800a604 	.word	0x0800a604
  ldr  r0, =_sdata
 8005e5c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005e60:	200003fc 	.word	0x200003fc
  ldr  r2, =_sbss
 8005e64:	200003fc 	.word	0x200003fc
  ldr  r3, = _ebss
 8005e68:	2000440c 	.word	0x2000440c

08005e6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005e6c:	e7fe      	b.n	8005e6c <ADC_IRQHandler>
	...

08005e70 <__errno>:
 8005e70:	4b01      	ldr	r3, [pc, #4]	; (8005e78 <__errno+0x8>)
 8005e72:	6818      	ldr	r0, [r3, #0]
 8005e74:	4770      	bx	lr
 8005e76:	bf00      	nop
 8005e78:	2000022c 	.word	0x2000022c

08005e7c <__libc_init_array>:
 8005e7c:	b570      	push	{r4, r5, r6, lr}
 8005e7e:	4e0d      	ldr	r6, [pc, #52]	; (8005eb4 <__libc_init_array+0x38>)
 8005e80:	4c0d      	ldr	r4, [pc, #52]	; (8005eb8 <__libc_init_array+0x3c>)
 8005e82:	1ba4      	subs	r4, r4, r6
 8005e84:	10a4      	asrs	r4, r4, #2
 8005e86:	2500      	movs	r5, #0
 8005e88:	42a5      	cmp	r5, r4
 8005e8a:	d109      	bne.n	8005ea0 <__libc_init_array+0x24>
 8005e8c:	4e0b      	ldr	r6, [pc, #44]	; (8005ebc <__libc_init_array+0x40>)
 8005e8e:	4c0c      	ldr	r4, [pc, #48]	; (8005ec0 <__libc_init_array+0x44>)
 8005e90:	f004 f98c 	bl	800a1ac <_init>
 8005e94:	1ba4      	subs	r4, r4, r6
 8005e96:	10a4      	asrs	r4, r4, #2
 8005e98:	2500      	movs	r5, #0
 8005e9a:	42a5      	cmp	r5, r4
 8005e9c:	d105      	bne.n	8005eaa <__libc_init_array+0x2e>
 8005e9e:	bd70      	pop	{r4, r5, r6, pc}
 8005ea0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005ea4:	4798      	blx	r3
 8005ea6:	3501      	adds	r5, #1
 8005ea8:	e7ee      	b.n	8005e88 <__libc_init_array+0xc>
 8005eaa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005eae:	4798      	blx	r3
 8005eb0:	3501      	adds	r5, #1
 8005eb2:	e7f2      	b.n	8005e9a <__libc_init_array+0x1e>
 8005eb4:	0800a5fc 	.word	0x0800a5fc
 8005eb8:	0800a5fc 	.word	0x0800a5fc
 8005ebc:	0800a5fc 	.word	0x0800a5fc
 8005ec0:	0800a600 	.word	0x0800a600

08005ec4 <memset>:
 8005ec4:	4402      	add	r2, r0
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d100      	bne.n	8005ece <memset+0xa>
 8005ecc:	4770      	bx	lr
 8005ece:	f803 1b01 	strb.w	r1, [r3], #1
 8005ed2:	e7f9      	b.n	8005ec8 <memset+0x4>

08005ed4 <__cvt>:
 8005ed4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ed8:	ec55 4b10 	vmov	r4, r5, d0
 8005edc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8005ede:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005ee2:	2d00      	cmp	r5, #0
 8005ee4:	460e      	mov	r6, r1
 8005ee6:	4691      	mov	r9, r2
 8005ee8:	4619      	mov	r1, r3
 8005eea:	bfb8      	it	lt
 8005eec:	4622      	movlt	r2, r4
 8005eee:	462b      	mov	r3, r5
 8005ef0:	f027 0720 	bic.w	r7, r7, #32
 8005ef4:	bfbb      	ittet	lt
 8005ef6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005efa:	461d      	movlt	r5, r3
 8005efc:	2300      	movge	r3, #0
 8005efe:	232d      	movlt	r3, #45	; 0x2d
 8005f00:	bfb8      	it	lt
 8005f02:	4614      	movlt	r4, r2
 8005f04:	2f46      	cmp	r7, #70	; 0x46
 8005f06:	700b      	strb	r3, [r1, #0]
 8005f08:	d004      	beq.n	8005f14 <__cvt+0x40>
 8005f0a:	2f45      	cmp	r7, #69	; 0x45
 8005f0c:	d100      	bne.n	8005f10 <__cvt+0x3c>
 8005f0e:	3601      	adds	r6, #1
 8005f10:	2102      	movs	r1, #2
 8005f12:	e000      	b.n	8005f16 <__cvt+0x42>
 8005f14:	2103      	movs	r1, #3
 8005f16:	ab03      	add	r3, sp, #12
 8005f18:	9301      	str	r3, [sp, #4]
 8005f1a:	ab02      	add	r3, sp, #8
 8005f1c:	9300      	str	r3, [sp, #0]
 8005f1e:	4632      	mov	r2, r6
 8005f20:	4653      	mov	r3, sl
 8005f22:	ec45 4b10 	vmov	d0, r4, r5
 8005f26:	f001 fda3 	bl	8007a70 <_dtoa_r>
 8005f2a:	2f47      	cmp	r7, #71	; 0x47
 8005f2c:	4680      	mov	r8, r0
 8005f2e:	d102      	bne.n	8005f36 <__cvt+0x62>
 8005f30:	f019 0f01 	tst.w	r9, #1
 8005f34:	d026      	beq.n	8005f84 <__cvt+0xb0>
 8005f36:	2f46      	cmp	r7, #70	; 0x46
 8005f38:	eb08 0906 	add.w	r9, r8, r6
 8005f3c:	d111      	bne.n	8005f62 <__cvt+0x8e>
 8005f3e:	f898 3000 	ldrb.w	r3, [r8]
 8005f42:	2b30      	cmp	r3, #48	; 0x30
 8005f44:	d10a      	bne.n	8005f5c <__cvt+0x88>
 8005f46:	2200      	movs	r2, #0
 8005f48:	2300      	movs	r3, #0
 8005f4a:	4620      	mov	r0, r4
 8005f4c:	4629      	mov	r1, r5
 8005f4e:	f7fa fdc3 	bl	8000ad8 <__aeabi_dcmpeq>
 8005f52:	b918      	cbnz	r0, 8005f5c <__cvt+0x88>
 8005f54:	f1c6 0601 	rsb	r6, r6, #1
 8005f58:	f8ca 6000 	str.w	r6, [sl]
 8005f5c:	f8da 3000 	ldr.w	r3, [sl]
 8005f60:	4499      	add	r9, r3
 8005f62:	2200      	movs	r2, #0
 8005f64:	2300      	movs	r3, #0
 8005f66:	4620      	mov	r0, r4
 8005f68:	4629      	mov	r1, r5
 8005f6a:	f7fa fdb5 	bl	8000ad8 <__aeabi_dcmpeq>
 8005f6e:	b938      	cbnz	r0, 8005f80 <__cvt+0xac>
 8005f70:	2230      	movs	r2, #48	; 0x30
 8005f72:	9b03      	ldr	r3, [sp, #12]
 8005f74:	454b      	cmp	r3, r9
 8005f76:	d205      	bcs.n	8005f84 <__cvt+0xb0>
 8005f78:	1c59      	adds	r1, r3, #1
 8005f7a:	9103      	str	r1, [sp, #12]
 8005f7c:	701a      	strb	r2, [r3, #0]
 8005f7e:	e7f8      	b.n	8005f72 <__cvt+0x9e>
 8005f80:	f8cd 900c 	str.w	r9, [sp, #12]
 8005f84:	9b03      	ldr	r3, [sp, #12]
 8005f86:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005f88:	eba3 0308 	sub.w	r3, r3, r8
 8005f8c:	4640      	mov	r0, r8
 8005f8e:	6013      	str	r3, [r2, #0]
 8005f90:	b004      	add	sp, #16
 8005f92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005f96 <__exponent>:
 8005f96:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f98:	2900      	cmp	r1, #0
 8005f9a:	4604      	mov	r4, r0
 8005f9c:	bfba      	itte	lt
 8005f9e:	4249      	neglt	r1, r1
 8005fa0:	232d      	movlt	r3, #45	; 0x2d
 8005fa2:	232b      	movge	r3, #43	; 0x2b
 8005fa4:	2909      	cmp	r1, #9
 8005fa6:	f804 2b02 	strb.w	r2, [r4], #2
 8005faa:	7043      	strb	r3, [r0, #1]
 8005fac:	dd20      	ble.n	8005ff0 <__exponent+0x5a>
 8005fae:	f10d 0307 	add.w	r3, sp, #7
 8005fb2:	461f      	mov	r7, r3
 8005fb4:	260a      	movs	r6, #10
 8005fb6:	fb91 f5f6 	sdiv	r5, r1, r6
 8005fba:	fb06 1115 	mls	r1, r6, r5, r1
 8005fbe:	3130      	adds	r1, #48	; 0x30
 8005fc0:	2d09      	cmp	r5, #9
 8005fc2:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005fc6:	f103 32ff 	add.w	r2, r3, #4294967295
 8005fca:	4629      	mov	r1, r5
 8005fcc:	dc09      	bgt.n	8005fe2 <__exponent+0x4c>
 8005fce:	3130      	adds	r1, #48	; 0x30
 8005fd0:	3b02      	subs	r3, #2
 8005fd2:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005fd6:	42bb      	cmp	r3, r7
 8005fd8:	4622      	mov	r2, r4
 8005fda:	d304      	bcc.n	8005fe6 <__exponent+0x50>
 8005fdc:	1a10      	subs	r0, r2, r0
 8005fde:	b003      	add	sp, #12
 8005fe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fe2:	4613      	mov	r3, r2
 8005fe4:	e7e7      	b.n	8005fb6 <__exponent+0x20>
 8005fe6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005fea:	f804 2b01 	strb.w	r2, [r4], #1
 8005fee:	e7f2      	b.n	8005fd6 <__exponent+0x40>
 8005ff0:	2330      	movs	r3, #48	; 0x30
 8005ff2:	4419      	add	r1, r3
 8005ff4:	7083      	strb	r3, [r0, #2]
 8005ff6:	1d02      	adds	r2, r0, #4
 8005ff8:	70c1      	strb	r1, [r0, #3]
 8005ffa:	e7ef      	b.n	8005fdc <__exponent+0x46>

08005ffc <_printf_float>:
 8005ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006000:	b08d      	sub	sp, #52	; 0x34
 8006002:	460c      	mov	r4, r1
 8006004:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8006008:	4616      	mov	r6, r2
 800600a:	461f      	mov	r7, r3
 800600c:	4605      	mov	r5, r0
 800600e:	f002 fe21 	bl	8008c54 <_localeconv_r>
 8006012:	6803      	ldr	r3, [r0, #0]
 8006014:	9304      	str	r3, [sp, #16]
 8006016:	4618      	mov	r0, r3
 8006018:	f7fa f8e2 	bl	80001e0 <strlen>
 800601c:	2300      	movs	r3, #0
 800601e:	930a      	str	r3, [sp, #40]	; 0x28
 8006020:	f8d8 3000 	ldr.w	r3, [r8]
 8006024:	9005      	str	r0, [sp, #20]
 8006026:	3307      	adds	r3, #7
 8006028:	f023 0307 	bic.w	r3, r3, #7
 800602c:	f103 0208 	add.w	r2, r3, #8
 8006030:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006034:	f8d4 b000 	ldr.w	fp, [r4]
 8006038:	f8c8 2000 	str.w	r2, [r8]
 800603c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006040:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006044:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006048:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800604c:	9307      	str	r3, [sp, #28]
 800604e:	f8cd 8018 	str.w	r8, [sp, #24]
 8006052:	f04f 32ff 	mov.w	r2, #4294967295
 8006056:	4ba7      	ldr	r3, [pc, #668]	; (80062f4 <_printf_float+0x2f8>)
 8006058:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800605c:	f7fa fd6e 	bl	8000b3c <__aeabi_dcmpun>
 8006060:	bb70      	cbnz	r0, 80060c0 <_printf_float+0xc4>
 8006062:	f04f 32ff 	mov.w	r2, #4294967295
 8006066:	4ba3      	ldr	r3, [pc, #652]	; (80062f4 <_printf_float+0x2f8>)
 8006068:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800606c:	f7fa fd48 	bl	8000b00 <__aeabi_dcmple>
 8006070:	bb30      	cbnz	r0, 80060c0 <_printf_float+0xc4>
 8006072:	2200      	movs	r2, #0
 8006074:	2300      	movs	r3, #0
 8006076:	4640      	mov	r0, r8
 8006078:	4649      	mov	r1, r9
 800607a:	f7fa fd37 	bl	8000aec <__aeabi_dcmplt>
 800607e:	b110      	cbz	r0, 8006086 <_printf_float+0x8a>
 8006080:	232d      	movs	r3, #45	; 0x2d
 8006082:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006086:	4a9c      	ldr	r2, [pc, #624]	; (80062f8 <_printf_float+0x2fc>)
 8006088:	4b9c      	ldr	r3, [pc, #624]	; (80062fc <_printf_float+0x300>)
 800608a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800608e:	bf8c      	ite	hi
 8006090:	4690      	movhi	r8, r2
 8006092:	4698      	movls	r8, r3
 8006094:	2303      	movs	r3, #3
 8006096:	f02b 0204 	bic.w	r2, fp, #4
 800609a:	6123      	str	r3, [r4, #16]
 800609c:	6022      	str	r2, [r4, #0]
 800609e:	f04f 0900 	mov.w	r9, #0
 80060a2:	9700      	str	r7, [sp, #0]
 80060a4:	4633      	mov	r3, r6
 80060a6:	aa0b      	add	r2, sp, #44	; 0x2c
 80060a8:	4621      	mov	r1, r4
 80060aa:	4628      	mov	r0, r5
 80060ac:	f000 f9e6 	bl	800647c <_printf_common>
 80060b0:	3001      	adds	r0, #1
 80060b2:	f040 808d 	bne.w	80061d0 <_printf_float+0x1d4>
 80060b6:	f04f 30ff 	mov.w	r0, #4294967295
 80060ba:	b00d      	add	sp, #52	; 0x34
 80060bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060c0:	4642      	mov	r2, r8
 80060c2:	464b      	mov	r3, r9
 80060c4:	4640      	mov	r0, r8
 80060c6:	4649      	mov	r1, r9
 80060c8:	f7fa fd38 	bl	8000b3c <__aeabi_dcmpun>
 80060cc:	b110      	cbz	r0, 80060d4 <_printf_float+0xd8>
 80060ce:	4a8c      	ldr	r2, [pc, #560]	; (8006300 <_printf_float+0x304>)
 80060d0:	4b8c      	ldr	r3, [pc, #560]	; (8006304 <_printf_float+0x308>)
 80060d2:	e7da      	b.n	800608a <_printf_float+0x8e>
 80060d4:	6861      	ldr	r1, [r4, #4]
 80060d6:	1c4b      	adds	r3, r1, #1
 80060d8:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80060dc:	a80a      	add	r0, sp, #40	; 0x28
 80060de:	d13e      	bne.n	800615e <_printf_float+0x162>
 80060e0:	2306      	movs	r3, #6
 80060e2:	6063      	str	r3, [r4, #4]
 80060e4:	2300      	movs	r3, #0
 80060e6:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80060ea:	ab09      	add	r3, sp, #36	; 0x24
 80060ec:	9300      	str	r3, [sp, #0]
 80060ee:	ec49 8b10 	vmov	d0, r8, r9
 80060f2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80060f6:	6022      	str	r2, [r4, #0]
 80060f8:	f8cd a004 	str.w	sl, [sp, #4]
 80060fc:	6861      	ldr	r1, [r4, #4]
 80060fe:	4628      	mov	r0, r5
 8006100:	f7ff fee8 	bl	8005ed4 <__cvt>
 8006104:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8006108:	2b47      	cmp	r3, #71	; 0x47
 800610a:	4680      	mov	r8, r0
 800610c:	d109      	bne.n	8006122 <_printf_float+0x126>
 800610e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006110:	1cd8      	adds	r0, r3, #3
 8006112:	db02      	blt.n	800611a <_printf_float+0x11e>
 8006114:	6862      	ldr	r2, [r4, #4]
 8006116:	4293      	cmp	r3, r2
 8006118:	dd47      	ble.n	80061aa <_printf_float+0x1ae>
 800611a:	f1aa 0a02 	sub.w	sl, sl, #2
 800611e:	fa5f fa8a 	uxtb.w	sl, sl
 8006122:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006126:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006128:	d824      	bhi.n	8006174 <_printf_float+0x178>
 800612a:	3901      	subs	r1, #1
 800612c:	4652      	mov	r2, sl
 800612e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006132:	9109      	str	r1, [sp, #36]	; 0x24
 8006134:	f7ff ff2f 	bl	8005f96 <__exponent>
 8006138:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800613a:	1813      	adds	r3, r2, r0
 800613c:	2a01      	cmp	r2, #1
 800613e:	4681      	mov	r9, r0
 8006140:	6123      	str	r3, [r4, #16]
 8006142:	dc02      	bgt.n	800614a <_printf_float+0x14e>
 8006144:	6822      	ldr	r2, [r4, #0]
 8006146:	07d1      	lsls	r1, r2, #31
 8006148:	d501      	bpl.n	800614e <_printf_float+0x152>
 800614a:	3301      	adds	r3, #1
 800614c:	6123      	str	r3, [r4, #16]
 800614e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006152:	2b00      	cmp	r3, #0
 8006154:	d0a5      	beq.n	80060a2 <_printf_float+0xa6>
 8006156:	232d      	movs	r3, #45	; 0x2d
 8006158:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800615c:	e7a1      	b.n	80060a2 <_printf_float+0xa6>
 800615e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8006162:	f000 8177 	beq.w	8006454 <_printf_float+0x458>
 8006166:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800616a:	d1bb      	bne.n	80060e4 <_printf_float+0xe8>
 800616c:	2900      	cmp	r1, #0
 800616e:	d1b9      	bne.n	80060e4 <_printf_float+0xe8>
 8006170:	2301      	movs	r3, #1
 8006172:	e7b6      	b.n	80060e2 <_printf_float+0xe6>
 8006174:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8006178:	d119      	bne.n	80061ae <_printf_float+0x1b2>
 800617a:	2900      	cmp	r1, #0
 800617c:	6863      	ldr	r3, [r4, #4]
 800617e:	dd0c      	ble.n	800619a <_printf_float+0x19e>
 8006180:	6121      	str	r1, [r4, #16]
 8006182:	b913      	cbnz	r3, 800618a <_printf_float+0x18e>
 8006184:	6822      	ldr	r2, [r4, #0]
 8006186:	07d2      	lsls	r2, r2, #31
 8006188:	d502      	bpl.n	8006190 <_printf_float+0x194>
 800618a:	3301      	adds	r3, #1
 800618c:	440b      	add	r3, r1
 800618e:	6123      	str	r3, [r4, #16]
 8006190:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006192:	65a3      	str	r3, [r4, #88]	; 0x58
 8006194:	f04f 0900 	mov.w	r9, #0
 8006198:	e7d9      	b.n	800614e <_printf_float+0x152>
 800619a:	b913      	cbnz	r3, 80061a2 <_printf_float+0x1a6>
 800619c:	6822      	ldr	r2, [r4, #0]
 800619e:	07d0      	lsls	r0, r2, #31
 80061a0:	d501      	bpl.n	80061a6 <_printf_float+0x1aa>
 80061a2:	3302      	adds	r3, #2
 80061a4:	e7f3      	b.n	800618e <_printf_float+0x192>
 80061a6:	2301      	movs	r3, #1
 80061a8:	e7f1      	b.n	800618e <_printf_float+0x192>
 80061aa:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80061ae:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80061b2:	4293      	cmp	r3, r2
 80061b4:	db05      	blt.n	80061c2 <_printf_float+0x1c6>
 80061b6:	6822      	ldr	r2, [r4, #0]
 80061b8:	6123      	str	r3, [r4, #16]
 80061ba:	07d1      	lsls	r1, r2, #31
 80061bc:	d5e8      	bpl.n	8006190 <_printf_float+0x194>
 80061be:	3301      	adds	r3, #1
 80061c0:	e7e5      	b.n	800618e <_printf_float+0x192>
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	bfd4      	ite	le
 80061c6:	f1c3 0302 	rsble	r3, r3, #2
 80061ca:	2301      	movgt	r3, #1
 80061cc:	4413      	add	r3, r2
 80061ce:	e7de      	b.n	800618e <_printf_float+0x192>
 80061d0:	6823      	ldr	r3, [r4, #0]
 80061d2:	055a      	lsls	r2, r3, #21
 80061d4:	d407      	bmi.n	80061e6 <_printf_float+0x1ea>
 80061d6:	6923      	ldr	r3, [r4, #16]
 80061d8:	4642      	mov	r2, r8
 80061da:	4631      	mov	r1, r6
 80061dc:	4628      	mov	r0, r5
 80061de:	47b8      	blx	r7
 80061e0:	3001      	adds	r0, #1
 80061e2:	d12b      	bne.n	800623c <_printf_float+0x240>
 80061e4:	e767      	b.n	80060b6 <_printf_float+0xba>
 80061e6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80061ea:	f240 80dc 	bls.w	80063a6 <_printf_float+0x3aa>
 80061ee:	2200      	movs	r2, #0
 80061f0:	2300      	movs	r3, #0
 80061f2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80061f6:	f7fa fc6f 	bl	8000ad8 <__aeabi_dcmpeq>
 80061fa:	2800      	cmp	r0, #0
 80061fc:	d033      	beq.n	8006266 <_printf_float+0x26a>
 80061fe:	2301      	movs	r3, #1
 8006200:	4a41      	ldr	r2, [pc, #260]	; (8006308 <_printf_float+0x30c>)
 8006202:	4631      	mov	r1, r6
 8006204:	4628      	mov	r0, r5
 8006206:	47b8      	blx	r7
 8006208:	3001      	adds	r0, #1
 800620a:	f43f af54 	beq.w	80060b6 <_printf_float+0xba>
 800620e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006212:	429a      	cmp	r2, r3
 8006214:	db02      	blt.n	800621c <_printf_float+0x220>
 8006216:	6823      	ldr	r3, [r4, #0]
 8006218:	07d8      	lsls	r0, r3, #31
 800621a:	d50f      	bpl.n	800623c <_printf_float+0x240>
 800621c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006220:	4631      	mov	r1, r6
 8006222:	4628      	mov	r0, r5
 8006224:	47b8      	blx	r7
 8006226:	3001      	adds	r0, #1
 8006228:	f43f af45 	beq.w	80060b6 <_printf_float+0xba>
 800622c:	f04f 0800 	mov.w	r8, #0
 8006230:	f104 091a 	add.w	r9, r4, #26
 8006234:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006236:	3b01      	subs	r3, #1
 8006238:	4543      	cmp	r3, r8
 800623a:	dc09      	bgt.n	8006250 <_printf_float+0x254>
 800623c:	6823      	ldr	r3, [r4, #0]
 800623e:	079b      	lsls	r3, r3, #30
 8006240:	f100 8103 	bmi.w	800644a <_printf_float+0x44e>
 8006244:	68e0      	ldr	r0, [r4, #12]
 8006246:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006248:	4298      	cmp	r0, r3
 800624a:	bfb8      	it	lt
 800624c:	4618      	movlt	r0, r3
 800624e:	e734      	b.n	80060ba <_printf_float+0xbe>
 8006250:	2301      	movs	r3, #1
 8006252:	464a      	mov	r2, r9
 8006254:	4631      	mov	r1, r6
 8006256:	4628      	mov	r0, r5
 8006258:	47b8      	blx	r7
 800625a:	3001      	adds	r0, #1
 800625c:	f43f af2b 	beq.w	80060b6 <_printf_float+0xba>
 8006260:	f108 0801 	add.w	r8, r8, #1
 8006264:	e7e6      	b.n	8006234 <_printf_float+0x238>
 8006266:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006268:	2b00      	cmp	r3, #0
 800626a:	dc2b      	bgt.n	80062c4 <_printf_float+0x2c8>
 800626c:	2301      	movs	r3, #1
 800626e:	4a26      	ldr	r2, [pc, #152]	; (8006308 <_printf_float+0x30c>)
 8006270:	4631      	mov	r1, r6
 8006272:	4628      	mov	r0, r5
 8006274:	47b8      	blx	r7
 8006276:	3001      	adds	r0, #1
 8006278:	f43f af1d 	beq.w	80060b6 <_printf_float+0xba>
 800627c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800627e:	b923      	cbnz	r3, 800628a <_printf_float+0x28e>
 8006280:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006282:	b913      	cbnz	r3, 800628a <_printf_float+0x28e>
 8006284:	6823      	ldr	r3, [r4, #0]
 8006286:	07d9      	lsls	r1, r3, #31
 8006288:	d5d8      	bpl.n	800623c <_printf_float+0x240>
 800628a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800628e:	4631      	mov	r1, r6
 8006290:	4628      	mov	r0, r5
 8006292:	47b8      	blx	r7
 8006294:	3001      	adds	r0, #1
 8006296:	f43f af0e 	beq.w	80060b6 <_printf_float+0xba>
 800629a:	f04f 0900 	mov.w	r9, #0
 800629e:	f104 0a1a 	add.w	sl, r4, #26
 80062a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062a4:	425b      	negs	r3, r3
 80062a6:	454b      	cmp	r3, r9
 80062a8:	dc01      	bgt.n	80062ae <_printf_float+0x2b2>
 80062aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062ac:	e794      	b.n	80061d8 <_printf_float+0x1dc>
 80062ae:	2301      	movs	r3, #1
 80062b0:	4652      	mov	r2, sl
 80062b2:	4631      	mov	r1, r6
 80062b4:	4628      	mov	r0, r5
 80062b6:	47b8      	blx	r7
 80062b8:	3001      	adds	r0, #1
 80062ba:	f43f aefc 	beq.w	80060b6 <_printf_float+0xba>
 80062be:	f109 0901 	add.w	r9, r9, #1
 80062c2:	e7ee      	b.n	80062a2 <_printf_float+0x2a6>
 80062c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80062c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80062c8:	429a      	cmp	r2, r3
 80062ca:	bfa8      	it	ge
 80062cc:	461a      	movge	r2, r3
 80062ce:	2a00      	cmp	r2, #0
 80062d0:	4691      	mov	r9, r2
 80062d2:	dd07      	ble.n	80062e4 <_printf_float+0x2e8>
 80062d4:	4613      	mov	r3, r2
 80062d6:	4631      	mov	r1, r6
 80062d8:	4642      	mov	r2, r8
 80062da:	4628      	mov	r0, r5
 80062dc:	47b8      	blx	r7
 80062de:	3001      	adds	r0, #1
 80062e0:	f43f aee9 	beq.w	80060b6 <_printf_float+0xba>
 80062e4:	f104 031a 	add.w	r3, r4, #26
 80062e8:	f04f 0b00 	mov.w	fp, #0
 80062ec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80062f0:	9306      	str	r3, [sp, #24]
 80062f2:	e015      	b.n	8006320 <_printf_float+0x324>
 80062f4:	7fefffff 	.word	0x7fefffff
 80062f8:	0800a2cc 	.word	0x0800a2cc
 80062fc:	0800a2c8 	.word	0x0800a2c8
 8006300:	0800a2d4 	.word	0x0800a2d4
 8006304:	0800a2d0 	.word	0x0800a2d0
 8006308:	0800a48b 	.word	0x0800a48b
 800630c:	2301      	movs	r3, #1
 800630e:	9a06      	ldr	r2, [sp, #24]
 8006310:	4631      	mov	r1, r6
 8006312:	4628      	mov	r0, r5
 8006314:	47b8      	blx	r7
 8006316:	3001      	adds	r0, #1
 8006318:	f43f aecd 	beq.w	80060b6 <_printf_float+0xba>
 800631c:	f10b 0b01 	add.w	fp, fp, #1
 8006320:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006324:	ebaa 0309 	sub.w	r3, sl, r9
 8006328:	455b      	cmp	r3, fp
 800632a:	dcef      	bgt.n	800630c <_printf_float+0x310>
 800632c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006330:	429a      	cmp	r2, r3
 8006332:	44d0      	add	r8, sl
 8006334:	db15      	blt.n	8006362 <_printf_float+0x366>
 8006336:	6823      	ldr	r3, [r4, #0]
 8006338:	07da      	lsls	r2, r3, #31
 800633a:	d412      	bmi.n	8006362 <_printf_float+0x366>
 800633c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800633e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006340:	eba3 020a 	sub.w	r2, r3, sl
 8006344:	eba3 0a01 	sub.w	sl, r3, r1
 8006348:	4592      	cmp	sl, r2
 800634a:	bfa8      	it	ge
 800634c:	4692      	movge	sl, r2
 800634e:	f1ba 0f00 	cmp.w	sl, #0
 8006352:	dc0e      	bgt.n	8006372 <_printf_float+0x376>
 8006354:	f04f 0800 	mov.w	r8, #0
 8006358:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800635c:	f104 091a 	add.w	r9, r4, #26
 8006360:	e019      	b.n	8006396 <_printf_float+0x39a>
 8006362:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006366:	4631      	mov	r1, r6
 8006368:	4628      	mov	r0, r5
 800636a:	47b8      	blx	r7
 800636c:	3001      	adds	r0, #1
 800636e:	d1e5      	bne.n	800633c <_printf_float+0x340>
 8006370:	e6a1      	b.n	80060b6 <_printf_float+0xba>
 8006372:	4653      	mov	r3, sl
 8006374:	4642      	mov	r2, r8
 8006376:	4631      	mov	r1, r6
 8006378:	4628      	mov	r0, r5
 800637a:	47b8      	blx	r7
 800637c:	3001      	adds	r0, #1
 800637e:	d1e9      	bne.n	8006354 <_printf_float+0x358>
 8006380:	e699      	b.n	80060b6 <_printf_float+0xba>
 8006382:	2301      	movs	r3, #1
 8006384:	464a      	mov	r2, r9
 8006386:	4631      	mov	r1, r6
 8006388:	4628      	mov	r0, r5
 800638a:	47b8      	blx	r7
 800638c:	3001      	adds	r0, #1
 800638e:	f43f ae92 	beq.w	80060b6 <_printf_float+0xba>
 8006392:	f108 0801 	add.w	r8, r8, #1
 8006396:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800639a:	1a9b      	subs	r3, r3, r2
 800639c:	eba3 030a 	sub.w	r3, r3, sl
 80063a0:	4543      	cmp	r3, r8
 80063a2:	dcee      	bgt.n	8006382 <_printf_float+0x386>
 80063a4:	e74a      	b.n	800623c <_printf_float+0x240>
 80063a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80063a8:	2a01      	cmp	r2, #1
 80063aa:	dc01      	bgt.n	80063b0 <_printf_float+0x3b4>
 80063ac:	07db      	lsls	r3, r3, #31
 80063ae:	d53a      	bpl.n	8006426 <_printf_float+0x42a>
 80063b0:	2301      	movs	r3, #1
 80063b2:	4642      	mov	r2, r8
 80063b4:	4631      	mov	r1, r6
 80063b6:	4628      	mov	r0, r5
 80063b8:	47b8      	blx	r7
 80063ba:	3001      	adds	r0, #1
 80063bc:	f43f ae7b 	beq.w	80060b6 <_printf_float+0xba>
 80063c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80063c4:	4631      	mov	r1, r6
 80063c6:	4628      	mov	r0, r5
 80063c8:	47b8      	blx	r7
 80063ca:	3001      	adds	r0, #1
 80063cc:	f108 0801 	add.w	r8, r8, #1
 80063d0:	f43f ae71 	beq.w	80060b6 <_printf_float+0xba>
 80063d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063d6:	2200      	movs	r2, #0
 80063d8:	f103 3aff 	add.w	sl, r3, #4294967295
 80063dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80063e0:	2300      	movs	r3, #0
 80063e2:	f7fa fb79 	bl	8000ad8 <__aeabi_dcmpeq>
 80063e6:	b9c8      	cbnz	r0, 800641c <_printf_float+0x420>
 80063e8:	4653      	mov	r3, sl
 80063ea:	4642      	mov	r2, r8
 80063ec:	4631      	mov	r1, r6
 80063ee:	4628      	mov	r0, r5
 80063f0:	47b8      	blx	r7
 80063f2:	3001      	adds	r0, #1
 80063f4:	d10e      	bne.n	8006414 <_printf_float+0x418>
 80063f6:	e65e      	b.n	80060b6 <_printf_float+0xba>
 80063f8:	2301      	movs	r3, #1
 80063fa:	4652      	mov	r2, sl
 80063fc:	4631      	mov	r1, r6
 80063fe:	4628      	mov	r0, r5
 8006400:	47b8      	blx	r7
 8006402:	3001      	adds	r0, #1
 8006404:	f43f ae57 	beq.w	80060b6 <_printf_float+0xba>
 8006408:	f108 0801 	add.w	r8, r8, #1
 800640c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800640e:	3b01      	subs	r3, #1
 8006410:	4543      	cmp	r3, r8
 8006412:	dcf1      	bgt.n	80063f8 <_printf_float+0x3fc>
 8006414:	464b      	mov	r3, r9
 8006416:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800641a:	e6de      	b.n	80061da <_printf_float+0x1de>
 800641c:	f04f 0800 	mov.w	r8, #0
 8006420:	f104 0a1a 	add.w	sl, r4, #26
 8006424:	e7f2      	b.n	800640c <_printf_float+0x410>
 8006426:	2301      	movs	r3, #1
 8006428:	e7df      	b.n	80063ea <_printf_float+0x3ee>
 800642a:	2301      	movs	r3, #1
 800642c:	464a      	mov	r2, r9
 800642e:	4631      	mov	r1, r6
 8006430:	4628      	mov	r0, r5
 8006432:	47b8      	blx	r7
 8006434:	3001      	adds	r0, #1
 8006436:	f43f ae3e 	beq.w	80060b6 <_printf_float+0xba>
 800643a:	f108 0801 	add.w	r8, r8, #1
 800643e:	68e3      	ldr	r3, [r4, #12]
 8006440:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006442:	1a9b      	subs	r3, r3, r2
 8006444:	4543      	cmp	r3, r8
 8006446:	dcf0      	bgt.n	800642a <_printf_float+0x42e>
 8006448:	e6fc      	b.n	8006244 <_printf_float+0x248>
 800644a:	f04f 0800 	mov.w	r8, #0
 800644e:	f104 0919 	add.w	r9, r4, #25
 8006452:	e7f4      	b.n	800643e <_printf_float+0x442>
 8006454:	2900      	cmp	r1, #0
 8006456:	f43f ae8b 	beq.w	8006170 <_printf_float+0x174>
 800645a:	2300      	movs	r3, #0
 800645c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006460:	ab09      	add	r3, sp, #36	; 0x24
 8006462:	9300      	str	r3, [sp, #0]
 8006464:	ec49 8b10 	vmov	d0, r8, r9
 8006468:	6022      	str	r2, [r4, #0]
 800646a:	f8cd a004 	str.w	sl, [sp, #4]
 800646e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006472:	4628      	mov	r0, r5
 8006474:	f7ff fd2e 	bl	8005ed4 <__cvt>
 8006478:	4680      	mov	r8, r0
 800647a:	e648      	b.n	800610e <_printf_float+0x112>

0800647c <_printf_common>:
 800647c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006480:	4691      	mov	r9, r2
 8006482:	461f      	mov	r7, r3
 8006484:	688a      	ldr	r2, [r1, #8]
 8006486:	690b      	ldr	r3, [r1, #16]
 8006488:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800648c:	4293      	cmp	r3, r2
 800648e:	bfb8      	it	lt
 8006490:	4613      	movlt	r3, r2
 8006492:	f8c9 3000 	str.w	r3, [r9]
 8006496:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800649a:	4606      	mov	r6, r0
 800649c:	460c      	mov	r4, r1
 800649e:	b112      	cbz	r2, 80064a6 <_printf_common+0x2a>
 80064a0:	3301      	adds	r3, #1
 80064a2:	f8c9 3000 	str.w	r3, [r9]
 80064a6:	6823      	ldr	r3, [r4, #0]
 80064a8:	0699      	lsls	r1, r3, #26
 80064aa:	bf42      	ittt	mi
 80064ac:	f8d9 3000 	ldrmi.w	r3, [r9]
 80064b0:	3302      	addmi	r3, #2
 80064b2:	f8c9 3000 	strmi.w	r3, [r9]
 80064b6:	6825      	ldr	r5, [r4, #0]
 80064b8:	f015 0506 	ands.w	r5, r5, #6
 80064bc:	d107      	bne.n	80064ce <_printf_common+0x52>
 80064be:	f104 0a19 	add.w	sl, r4, #25
 80064c2:	68e3      	ldr	r3, [r4, #12]
 80064c4:	f8d9 2000 	ldr.w	r2, [r9]
 80064c8:	1a9b      	subs	r3, r3, r2
 80064ca:	42ab      	cmp	r3, r5
 80064cc:	dc28      	bgt.n	8006520 <_printf_common+0xa4>
 80064ce:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80064d2:	6822      	ldr	r2, [r4, #0]
 80064d4:	3300      	adds	r3, #0
 80064d6:	bf18      	it	ne
 80064d8:	2301      	movne	r3, #1
 80064da:	0692      	lsls	r2, r2, #26
 80064dc:	d42d      	bmi.n	800653a <_printf_common+0xbe>
 80064de:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80064e2:	4639      	mov	r1, r7
 80064e4:	4630      	mov	r0, r6
 80064e6:	47c0      	blx	r8
 80064e8:	3001      	adds	r0, #1
 80064ea:	d020      	beq.n	800652e <_printf_common+0xb2>
 80064ec:	6823      	ldr	r3, [r4, #0]
 80064ee:	68e5      	ldr	r5, [r4, #12]
 80064f0:	f8d9 2000 	ldr.w	r2, [r9]
 80064f4:	f003 0306 	and.w	r3, r3, #6
 80064f8:	2b04      	cmp	r3, #4
 80064fa:	bf08      	it	eq
 80064fc:	1aad      	subeq	r5, r5, r2
 80064fe:	68a3      	ldr	r3, [r4, #8]
 8006500:	6922      	ldr	r2, [r4, #16]
 8006502:	bf0c      	ite	eq
 8006504:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006508:	2500      	movne	r5, #0
 800650a:	4293      	cmp	r3, r2
 800650c:	bfc4      	itt	gt
 800650e:	1a9b      	subgt	r3, r3, r2
 8006510:	18ed      	addgt	r5, r5, r3
 8006512:	f04f 0900 	mov.w	r9, #0
 8006516:	341a      	adds	r4, #26
 8006518:	454d      	cmp	r5, r9
 800651a:	d11a      	bne.n	8006552 <_printf_common+0xd6>
 800651c:	2000      	movs	r0, #0
 800651e:	e008      	b.n	8006532 <_printf_common+0xb6>
 8006520:	2301      	movs	r3, #1
 8006522:	4652      	mov	r2, sl
 8006524:	4639      	mov	r1, r7
 8006526:	4630      	mov	r0, r6
 8006528:	47c0      	blx	r8
 800652a:	3001      	adds	r0, #1
 800652c:	d103      	bne.n	8006536 <_printf_common+0xba>
 800652e:	f04f 30ff 	mov.w	r0, #4294967295
 8006532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006536:	3501      	adds	r5, #1
 8006538:	e7c3      	b.n	80064c2 <_printf_common+0x46>
 800653a:	18e1      	adds	r1, r4, r3
 800653c:	1c5a      	adds	r2, r3, #1
 800653e:	2030      	movs	r0, #48	; 0x30
 8006540:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006544:	4422      	add	r2, r4
 8006546:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800654a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800654e:	3302      	adds	r3, #2
 8006550:	e7c5      	b.n	80064de <_printf_common+0x62>
 8006552:	2301      	movs	r3, #1
 8006554:	4622      	mov	r2, r4
 8006556:	4639      	mov	r1, r7
 8006558:	4630      	mov	r0, r6
 800655a:	47c0      	blx	r8
 800655c:	3001      	adds	r0, #1
 800655e:	d0e6      	beq.n	800652e <_printf_common+0xb2>
 8006560:	f109 0901 	add.w	r9, r9, #1
 8006564:	e7d8      	b.n	8006518 <_printf_common+0x9c>
	...

08006568 <_printf_i>:
 8006568:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800656c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006570:	460c      	mov	r4, r1
 8006572:	7e09      	ldrb	r1, [r1, #24]
 8006574:	b085      	sub	sp, #20
 8006576:	296e      	cmp	r1, #110	; 0x6e
 8006578:	4617      	mov	r7, r2
 800657a:	4606      	mov	r6, r0
 800657c:	4698      	mov	r8, r3
 800657e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006580:	f000 80b3 	beq.w	80066ea <_printf_i+0x182>
 8006584:	d822      	bhi.n	80065cc <_printf_i+0x64>
 8006586:	2963      	cmp	r1, #99	; 0x63
 8006588:	d036      	beq.n	80065f8 <_printf_i+0x90>
 800658a:	d80a      	bhi.n	80065a2 <_printf_i+0x3a>
 800658c:	2900      	cmp	r1, #0
 800658e:	f000 80b9 	beq.w	8006704 <_printf_i+0x19c>
 8006592:	2958      	cmp	r1, #88	; 0x58
 8006594:	f000 8083 	beq.w	800669e <_printf_i+0x136>
 8006598:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800659c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80065a0:	e032      	b.n	8006608 <_printf_i+0xa0>
 80065a2:	2964      	cmp	r1, #100	; 0x64
 80065a4:	d001      	beq.n	80065aa <_printf_i+0x42>
 80065a6:	2969      	cmp	r1, #105	; 0x69
 80065a8:	d1f6      	bne.n	8006598 <_printf_i+0x30>
 80065aa:	6820      	ldr	r0, [r4, #0]
 80065ac:	6813      	ldr	r3, [r2, #0]
 80065ae:	0605      	lsls	r5, r0, #24
 80065b0:	f103 0104 	add.w	r1, r3, #4
 80065b4:	d52a      	bpl.n	800660c <_printf_i+0xa4>
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	6011      	str	r1, [r2, #0]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	da03      	bge.n	80065c6 <_printf_i+0x5e>
 80065be:	222d      	movs	r2, #45	; 0x2d
 80065c0:	425b      	negs	r3, r3
 80065c2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80065c6:	486f      	ldr	r0, [pc, #444]	; (8006784 <_printf_i+0x21c>)
 80065c8:	220a      	movs	r2, #10
 80065ca:	e039      	b.n	8006640 <_printf_i+0xd8>
 80065cc:	2973      	cmp	r1, #115	; 0x73
 80065ce:	f000 809d 	beq.w	800670c <_printf_i+0x1a4>
 80065d2:	d808      	bhi.n	80065e6 <_printf_i+0x7e>
 80065d4:	296f      	cmp	r1, #111	; 0x6f
 80065d6:	d020      	beq.n	800661a <_printf_i+0xb2>
 80065d8:	2970      	cmp	r1, #112	; 0x70
 80065da:	d1dd      	bne.n	8006598 <_printf_i+0x30>
 80065dc:	6823      	ldr	r3, [r4, #0]
 80065de:	f043 0320 	orr.w	r3, r3, #32
 80065e2:	6023      	str	r3, [r4, #0]
 80065e4:	e003      	b.n	80065ee <_printf_i+0x86>
 80065e6:	2975      	cmp	r1, #117	; 0x75
 80065e8:	d017      	beq.n	800661a <_printf_i+0xb2>
 80065ea:	2978      	cmp	r1, #120	; 0x78
 80065ec:	d1d4      	bne.n	8006598 <_printf_i+0x30>
 80065ee:	2378      	movs	r3, #120	; 0x78
 80065f0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80065f4:	4864      	ldr	r0, [pc, #400]	; (8006788 <_printf_i+0x220>)
 80065f6:	e055      	b.n	80066a4 <_printf_i+0x13c>
 80065f8:	6813      	ldr	r3, [r2, #0]
 80065fa:	1d19      	adds	r1, r3, #4
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	6011      	str	r1, [r2, #0]
 8006600:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006604:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006608:	2301      	movs	r3, #1
 800660a:	e08c      	b.n	8006726 <_printf_i+0x1be>
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	6011      	str	r1, [r2, #0]
 8006610:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006614:	bf18      	it	ne
 8006616:	b21b      	sxthne	r3, r3
 8006618:	e7cf      	b.n	80065ba <_printf_i+0x52>
 800661a:	6813      	ldr	r3, [r2, #0]
 800661c:	6825      	ldr	r5, [r4, #0]
 800661e:	1d18      	adds	r0, r3, #4
 8006620:	6010      	str	r0, [r2, #0]
 8006622:	0628      	lsls	r0, r5, #24
 8006624:	d501      	bpl.n	800662a <_printf_i+0xc2>
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	e002      	b.n	8006630 <_printf_i+0xc8>
 800662a:	0668      	lsls	r0, r5, #25
 800662c:	d5fb      	bpl.n	8006626 <_printf_i+0xbe>
 800662e:	881b      	ldrh	r3, [r3, #0]
 8006630:	4854      	ldr	r0, [pc, #336]	; (8006784 <_printf_i+0x21c>)
 8006632:	296f      	cmp	r1, #111	; 0x6f
 8006634:	bf14      	ite	ne
 8006636:	220a      	movne	r2, #10
 8006638:	2208      	moveq	r2, #8
 800663a:	2100      	movs	r1, #0
 800663c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006640:	6865      	ldr	r5, [r4, #4]
 8006642:	60a5      	str	r5, [r4, #8]
 8006644:	2d00      	cmp	r5, #0
 8006646:	f2c0 8095 	blt.w	8006774 <_printf_i+0x20c>
 800664a:	6821      	ldr	r1, [r4, #0]
 800664c:	f021 0104 	bic.w	r1, r1, #4
 8006650:	6021      	str	r1, [r4, #0]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d13d      	bne.n	80066d2 <_printf_i+0x16a>
 8006656:	2d00      	cmp	r5, #0
 8006658:	f040 808e 	bne.w	8006778 <_printf_i+0x210>
 800665c:	4665      	mov	r5, ip
 800665e:	2a08      	cmp	r2, #8
 8006660:	d10b      	bne.n	800667a <_printf_i+0x112>
 8006662:	6823      	ldr	r3, [r4, #0]
 8006664:	07db      	lsls	r3, r3, #31
 8006666:	d508      	bpl.n	800667a <_printf_i+0x112>
 8006668:	6923      	ldr	r3, [r4, #16]
 800666a:	6862      	ldr	r2, [r4, #4]
 800666c:	429a      	cmp	r2, r3
 800666e:	bfde      	ittt	le
 8006670:	2330      	movle	r3, #48	; 0x30
 8006672:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006676:	f105 35ff 	addle.w	r5, r5, #4294967295
 800667a:	ebac 0305 	sub.w	r3, ip, r5
 800667e:	6123      	str	r3, [r4, #16]
 8006680:	f8cd 8000 	str.w	r8, [sp]
 8006684:	463b      	mov	r3, r7
 8006686:	aa03      	add	r2, sp, #12
 8006688:	4621      	mov	r1, r4
 800668a:	4630      	mov	r0, r6
 800668c:	f7ff fef6 	bl	800647c <_printf_common>
 8006690:	3001      	adds	r0, #1
 8006692:	d14d      	bne.n	8006730 <_printf_i+0x1c8>
 8006694:	f04f 30ff 	mov.w	r0, #4294967295
 8006698:	b005      	add	sp, #20
 800669a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800669e:	4839      	ldr	r0, [pc, #228]	; (8006784 <_printf_i+0x21c>)
 80066a0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80066a4:	6813      	ldr	r3, [r2, #0]
 80066a6:	6821      	ldr	r1, [r4, #0]
 80066a8:	1d1d      	adds	r5, r3, #4
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	6015      	str	r5, [r2, #0]
 80066ae:	060a      	lsls	r2, r1, #24
 80066b0:	d50b      	bpl.n	80066ca <_printf_i+0x162>
 80066b2:	07ca      	lsls	r2, r1, #31
 80066b4:	bf44      	itt	mi
 80066b6:	f041 0120 	orrmi.w	r1, r1, #32
 80066ba:	6021      	strmi	r1, [r4, #0]
 80066bc:	b91b      	cbnz	r3, 80066c6 <_printf_i+0x15e>
 80066be:	6822      	ldr	r2, [r4, #0]
 80066c0:	f022 0220 	bic.w	r2, r2, #32
 80066c4:	6022      	str	r2, [r4, #0]
 80066c6:	2210      	movs	r2, #16
 80066c8:	e7b7      	b.n	800663a <_printf_i+0xd2>
 80066ca:	064d      	lsls	r5, r1, #25
 80066cc:	bf48      	it	mi
 80066ce:	b29b      	uxthmi	r3, r3
 80066d0:	e7ef      	b.n	80066b2 <_printf_i+0x14a>
 80066d2:	4665      	mov	r5, ip
 80066d4:	fbb3 f1f2 	udiv	r1, r3, r2
 80066d8:	fb02 3311 	mls	r3, r2, r1, r3
 80066dc:	5cc3      	ldrb	r3, [r0, r3]
 80066de:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80066e2:	460b      	mov	r3, r1
 80066e4:	2900      	cmp	r1, #0
 80066e6:	d1f5      	bne.n	80066d4 <_printf_i+0x16c>
 80066e8:	e7b9      	b.n	800665e <_printf_i+0xf6>
 80066ea:	6813      	ldr	r3, [r2, #0]
 80066ec:	6825      	ldr	r5, [r4, #0]
 80066ee:	6961      	ldr	r1, [r4, #20]
 80066f0:	1d18      	adds	r0, r3, #4
 80066f2:	6010      	str	r0, [r2, #0]
 80066f4:	0628      	lsls	r0, r5, #24
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	d501      	bpl.n	80066fe <_printf_i+0x196>
 80066fa:	6019      	str	r1, [r3, #0]
 80066fc:	e002      	b.n	8006704 <_printf_i+0x19c>
 80066fe:	066a      	lsls	r2, r5, #25
 8006700:	d5fb      	bpl.n	80066fa <_printf_i+0x192>
 8006702:	8019      	strh	r1, [r3, #0]
 8006704:	2300      	movs	r3, #0
 8006706:	6123      	str	r3, [r4, #16]
 8006708:	4665      	mov	r5, ip
 800670a:	e7b9      	b.n	8006680 <_printf_i+0x118>
 800670c:	6813      	ldr	r3, [r2, #0]
 800670e:	1d19      	adds	r1, r3, #4
 8006710:	6011      	str	r1, [r2, #0]
 8006712:	681d      	ldr	r5, [r3, #0]
 8006714:	6862      	ldr	r2, [r4, #4]
 8006716:	2100      	movs	r1, #0
 8006718:	4628      	mov	r0, r5
 800671a:	f7f9 fd69 	bl	80001f0 <memchr>
 800671e:	b108      	cbz	r0, 8006724 <_printf_i+0x1bc>
 8006720:	1b40      	subs	r0, r0, r5
 8006722:	6060      	str	r0, [r4, #4]
 8006724:	6863      	ldr	r3, [r4, #4]
 8006726:	6123      	str	r3, [r4, #16]
 8006728:	2300      	movs	r3, #0
 800672a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800672e:	e7a7      	b.n	8006680 <_printf_i+0x118>
 8006730:	6923      	ldr	r3, [r4, #16]
 8006732:	462a      	mov	r2, r5
 8006734:	4639      	mov	r1, r7
 8006736:	4630      	mov	r0, r6
 8006738:	47c0      	blx	r8
 800673a:	3001      	adds	r0, #1
 800673c:	d0aa      	beq.n	8006694 <_printf_i+0x12c>
 800673e:	6823      	ldr	r3, [r4, #0]
 8006740:	079b      	lsls	r3, r3, #30
 8006742:	d413      	bmi.n	800676c <_printf_i+0x204>
 8006744:	68e0      	ldr	r0, [r4, #12]
 8006746:	9b03      	ldr	r3, [sp, #12]
 8006748:	4298      	cmp	r0, r3
 800674a:	bfb8      	it	lt
 800674c:	4618      	movlt	r0, r3
 800674e:	e7a3      	b.n	8006698 <_printf_i+0x130>
 8006750:	2301      	movs	r3, #1
 8006752:	464a      	mov	r2, r9
 8006754:	4639      	mov	r1, r7
 8006756:	4630      	mov	r0, r6
 8006758:	47c0      	blx	r8
 800675a:	3001      	adds	r0, #1
 800675c:	d09a      	beq.n	8006694 <_printf_i+0x12c>
 800675e:	3501      	adds	r5, #1
 8006760:	68e3      	ldr	r3, [r4, #12]
 8006762:	9a03      	ldr	r2, [sp, #12]
 8006764:	1a9b      	subs	r3, r3, r2
 8006766:	42ab      	cmp	r3, r5
 8006768:	dcf2      	bgt.n	8006750 <_printf_i+0x1e8>
 800676a:	e7eb      	b.n	8006744 <_printf_i+0x1dc>
 800676c:	2500      	movs	r5, #0
 800676e:	f104 0919 	add.w	r9, r4, #25
 8006772:	e7f5      	b.n	8006760 <_printf_i+0x1f8>
 8006774:	2b00      	cmp	r3, #0
 8006776:	d1ac      	bne.n	80066d2 <_printf_i+0x16a>
 8006778:	7803      	ldrb	r3, [r0, #0]
 800677a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800677e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006782:	e76c      	b.n	800665e <_printf_i+0xf6>
 8006784:	0800a2d8 	.word	0x0800a2d8
 8006788:	0800a2e9 	.word	0x0800a2e9

0800678c <_scanf_float>:
 800678c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006790:	469a      	mov	sl, r3
 8006792:	688b      	ldr	r3, [r1, #8]
 8006794:	4616      	mov	r6, r2
 8006796:	1e5a      	subs	r2, r3, #1
 8006798:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800679c:	b087      	sub	sp, #28
 800679e:	bf83      	ittte	hi
 80067a0:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 80067a4:	189b      	addhi	r3, r3, r2
 80067a6:	9301      	strhi	r3, [sp, #4]
 80067a8:	2300      	movls	r3, #0
 80067aa:	bf86      	itte	hi
 80067ac:	f240 135d 	movwhi	r3, #349	; 0x15d
 80067b0:	608b      	strhi	r3, [r1, #8]
 80067b2:	9301      	strls	r3, [sp, #4]
 80067b4:	680b      	ldr	r3, [r1, #0]
 80067b6:	4688      	mov	r8, r1
 80067b8:	f04f 0b00 	mov.w	fp, #0
 80067bc:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80067c0:	f848 3b1c 	str.w	r3, [r8], #28
 80067c4:	e9cd bb03 	strd	fp, fp, [sp, #12]
 80067c8:	4607      	mov	r7, r0
 80067ca:	460c      	mov	r4, r1
 80067cc:	4645      	mov	r5, r8
 80067ce:	465a      	mov	r2, fp
 80067d0:	46d9      	mov	r9, fp
 80067d2:	f8cd b008 	str.w	fp, [sp, #8]
 80067d6:	68a1      	ldr	r1, [r4, #8]
 80067d8:	b181      	cbz	r1, 80067fc <_scanf_float+0x70>
 80067da:	6833      	ldr	r3, [r6, #0]
 80067dc:	781b      	ldrb	r3, [r3, #0]
 80067de:	2b49      	cmp	r3, #73	; 0x49
 80067e0:	d071      	beq.n	80068c6 <_scanf_float+0x13a>
 80067e2:	d84d      	bhi.n	8006880 <_scanf_float+0xf4>
 80067e4:	2b39      	cmp	r3, #57	; 0x39
 80067e6:	d840      	bhi.n	800686a <_scanf_float+0xde>
 80067e8:	2b31      	cmp	r3, #49	; 0x31
 80067ea:	f080 8088 	bcs.w	80068fe <_scanf_float+0x172>
 80067ee:	2b2d      	cmp	r3, #45	; 0x2d
 80067f0:	f000 8090 	beq.w	8006914 <_scanf_float+0x188>
 80067f4:	d815      	bhi.n	8006822 <_scanf_float+0x96>
 80067f6:	2b2b      	cmp	r3, #43	; 0x2b
 80067f8:	f000 808c 	beq.w	8006914 <_scanf_float+0x188>
 80067fc:	f1b9 0f00 	cmp.w	r9, #0
 8006800:	d003      	beq.n	800680a <_scanf_float+0x7e>
 8006802:	6823      	ldr	r3, [r4, #0]
 8006804:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006808:	6023      	str	r3, [r4, #0]
 800680a:	3a01      	subs	r2, #1
 800680c:	2a01      	cmp	r2, #1
 800680e:	f200 80ea 	bhi.w	80069e6 <_scanf_float+0x25a>
 8006812:	4545      	cmp	r5, r8
 8006814:	f200 80dc 	bhi.w	80069d0 <_scanf_float+0x244>
 8006818:	2601      	movs	r6, #1
 800681a:	4630      	mov	r0, r6
 800681c:	b007      	add	sp, #28
 800681e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006822:	2b2e      	cmp	r3, #46	; 0x2e
 8006824:	f000 809f 	beq.w	8006966 <_scanf_float+0x1da>
 8006828:	2b30      	cmp	r3, #48	; 0x30
 800682a:	d1e7      	bne.n	80067fc <_scanf_float+0x70>
 800682c:	6820      	ldr	r0, [r4, #0]
 800682e:	f410 7f80 	tst.w	r0, #256	; 0x100
 8006832:	d064      	beq.n	80068fe <_scanf_float+0x172>
 8006834:	9b01      	ldr	r3, [sp, #4]
 8006836:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800683a:	6020      	str	r0, [r4, #0]
 800683c:	f109 0901 	add.w	r9, r9, #1
 8006840:	b11b      	cbz	r3, 800684a <_scanf_float+0xbe>
 8006842:	3b01      	subs	r3, #1
 8006844:	3101      	adds	r1, #1
 8006846:	9301      	str	r3, [sp, #4]
 8006848:	60a1      	str	r1, [r4, #8]
 800684a:	68a3      	ldr	r3, [r4, #8]
 800684c:	3b01      	subs	r3, #1
 800684e:	60a3      	str	r3, [r4, #8]
 8006850:	6923      	ldr	r3, [r4, #16]
 8006852:	3301      	adds	r3, #1
 8006854:	6123      	str	r3, [r4, #16]
 8006856:	6873      	ldr	r3, [r6, #4]
 8006858:	3b01      	subs	r3, #1
 800685a:	2b00      	cmp	r3, #0
 800685c:	6073      	str	r3, [r6, #4]
 800685e:	f340 80ac 	ble.w	80069ba <_scanf_float+0x22e>
 8006862:	6833      	ldr	r3, [r6, #0]
 8006864:	3301      	adds	r3, #1
 8006866:	6033      	str	r3, [r6, #0]
 8006868:	e7b5      	b.n	80067d6 <_scanf_float+0x4a>
 800686a:	2b45      	cmp	r3, #69	; 0x45
 800686c:	f000 8085 	beq.w	800697a <_scanf_float+0x1ee>
 8006870:	2b46      	cmp	r3, #70	; 0x46
 8006872:	d06a      	beq.n	800694a <_scanf_float+0x1be>
 8006874:	2b41      	cmp	r3, #65	; 0x41
 8006876:	d1c1      	bne.n	80067fc <_scanf_float+0x70>
 8006878:	2a01      	cmp	r2, #1
 800687a:	d1bf      	bne.n	80067fc <_scanf_float+0x70>
 800687c:	2202      	movs	r2, #2
 800687e:	e046      	b.n	800690e <_scanf_float+0x182>
 8006880:	2b65      	cmp	r3, #101	; 0x65
 8006882:	d07a      	beq.n	800697a <_scanf_float+0x1ee>
 8006884:	d818      	bhi.n	80068b8 <_scanf_float+0x12c>
 8006886:	2b54      	cmp	r3, #84	; 0x54
 8006888:	d066      	beq.n	8006958 <_scanf_float+0x1cc>
 800688a:	d811      	bhi.n	80068b0 <_scanf_float+0x124>
 800688c:	2b4e      	cmp	r3, #78	; 0x4e
 800688e:	d1b5      	bne.n	80067fc <_scanf_float+0x70>
 8006890:	2a00      	cmp	r2, #0
 8006892:	d146      	bne.n	8006922 <_scanf_float+0x196>
 8006894:	f1b9 0f00 	cmp.w	r9, #0
 8006898:	d145      	bne.n	8006926 <_scanf_float+0x19a>
 800689a:	6821      	ldr	r1, [r4, #0]
 800689c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80068a0:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80068a4:	d13f      	bne.n	8006926 <_scanf_float+0x19a>
 80068a6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80068aa:	6021      	str	r1, [r4, #0]
 80068ac:	2201      	movs	r2, #1
 80068ae:	e02e      	b.n	800690e <_scanf_float+0x182>
 80068b0:	2b59      	cmp	r3, #89	; 0x59
 80068b2:	d01e      	beq.n	80068f2 <_scanf_float+0x166>
 80068b4:	2b61      	cmp	r3, #97	; 0x61
 80068b6:	e7de      	b.n	8006876 <_scanf_float+0xea>
 80068b8:	2b6e      	cmp	r3, #110	; 0x6e
 80068ba:	d0e9      	beq.n	8006890 <_scanf_float+0x104>
 80068bc:	d815      	bhi.n	80068ea <_scanf_float+0x15e>
 80068be:	2b66      	cmp	r3, #102	; 0x66
 80068c0:	d043      	beq.n	800694a <_scanf_float+0x1be>
 80068c2:	2b69      	cmp	r3, #105	; 0x69
 80068c4:	d19a      	bne.n	80067fc <_scanf_float+0x70>
 80068c6:	f1bb 0f00 	cmp.w	fp, #0
 80068ca:	d138      	bne.n	800693e <_scanf_float+0x1b2>
 80068cc:	f1b9 0f00 	cmp.w	r9, #0
 80068d0:	d197      	bne.n	8006802 <_scanf_float+0x76>
 80068d2:	6821      	ldr	r1, [r4, #0]
 80068d4:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80068d8:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80068dc:	d195      	bne.n	800680a <_scanf_float+0x7e>
 80068de:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80068e2:	6021      	str	r1, [r4, #0]
 80068e4:	f04f 0b01 	mov.w	fp, #1
 80068e8:	e011      	b.n	800690e <_scanf_float+0x182>
 80068ea:	2b74      	cmp	r3, #116	; 0x74
 80068ec:	d034      	beq.n	8006958 <_scanf_float+0x1cc>
 80068ee:	2b79      	cmp	r3, #121	; 0x79
 80068f0:	d184      	bne.n	80067fc <_scanf_float+0x70>
 80068f2:	f1bb 0f07 	cmp.w	fp, #7
 80068f6:	d181      	bne.n	80067fc <_scanf_float+0x70>
 80068f8:	f04f 0b08 	mov.w	fp, #8
 80068fc:	e007      	b.n	800690e <_scanf_float+0x182>
 80068fe:	eb12 0f0b 	cmn.w	r2, fp
 8006902:	f47f af7b 	bne.w	80067fc <_scanf_float+0x70>
 8006906:	6821      	ldr	r1, [r4, #0]
 8006908:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800690c:	6021      	str	r1, [r4, #0]
 800690e:	702b      	strb	r3, [r5, #0]
 8006910:	3501      	adds	r5, #1
 8006912:	e79a      	b.n	800684a <_scanf_float+0xbe>
 8006914:	6821      	ldr	r1, [r4, #0]
 8006916:	0608      	lsls	r0, r1, #24
 8006918:	f57f af70 	bpl.w	80067fc <_scanf_float+0x70>
 800691c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006920:	e7f4      	b.n	800690c <_scanf_float+0x180>
 8006922:	2a02      	cmp	r2, #2
 8006924:	d047      	beq.n	80069b6 <_scanf_float+0x22a>
 8006926:	f1bb 0f01 	cmp.w	fp, #1
 800692a:	d003      	beq.n	8006934 <_scanf_float+0x1a8>
 800692c:	f1bb 0f04 	cmp.w	fp, #4
 8006930:	f47f af64 	bne.w	80067fc <_scanf_float+0x70>
 8006934:	f10b 0b01 	add.w	fp, fp, #1
 8006938:	fa5f fb8b 	uxtb.w	fp, fp
 800693c:	e7e7      	b.n	800690e <_scanf_float+0x182>
 800693e:	f1bb 0f03 	cmp.w	fp, #3
 8006942:	d0f7      	beq.n	8006934 <_scanf_float+0x1a8>
 8006944:	f1bb 0f05 	cmp.w	fp, #5
 8006948:	e7f2      	b.n	8006930 <_scanf_float+0x1a4>
 800694a:	f1bb 0f02 	cmp.w	fp, #2
 800694e:	f47f af55 	bne.w	80067fc <_scanf_float+0x70>
 8006952:	f04f 0b03 	mov.w	fp, #3
 8006956:	e7da      	b.n	800690e <_scanf_float+0x182>
 8006958:	f1bb 0f06 	cmp.w	fp, #6
 800695c:	f47f af4e 	bne.w	80067fc <_scanf_float+0x70>
 8006960:	f04f 0b07 	mov.w	fp, #7
 8006964:	e7d3      	b.n	800690e <_scanf_float+0x182>
 8006966:	6821      	ldr	r1, [r4, #0]
 8006968:	0588      	lsls	r0, r1, #22
 800696a:	f57f af47 	bpl.w	80067fc <_scanf_float+0x70>
 800696e:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8006972:	6021      	str	r1, [r4, #0]
 8006974:	f8cd 9008 	str.w	r9, [sp, #8]
 8006978:	e7c9      	b.n	800690e <_scanf_float+0x182>
 800697a:	6821      	ldr	r1, [r4, #0]
 800697c:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8006980:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8006984:	d006      	beq.n	8006994 <_scanf_float+0x208>
 8006986:	0548      	lsls	r0, r1, #21
 8006988:	f57f af38 	bpl.w	80067fc <_scanf_float+0x70>
 800698c:	f1b9 0f00 	cmp.w	r9, #0
 8006990:	f43f af3b 	beq.w	800680a <_scanf_float+0x7e>
 8006994:	0588      	lsls	r0, r1, #22
 8006996:	bf58      	it	pl
 8006998:	9802      	ldrpl	r0, [sp, #8]
 800699a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800699e:	bf58      	it	pl
 80069a0:	eba9 0000 	subpl.w	r0, r9, r0
 80069a4:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 80069a8:	bf58      	it	pl
 80069aa:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 80069ae:	6021      	str	r1, [r4, #0]
 80069b0:	f04f 0900 	mov.w	r9, #0
 80069b4:	e7ab      	b.n	800690e <_scanf_float+0x182>
 80069b6:	2203      	movs	r2, #3
 80069b8:	e7a9      	b.n	800690e <_scanf_float+0x182>
 80069ba:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80069be:	9205      	str	r2, [sp, #20]
 80069c0:	4631      	mov	r1, r6
 80069c2:	4638      	mov	r0, r7
 80069c4:	4798      	blx	r3
 80069c6:	9a05      	ldr	r2, [sp, #20]
 80069c8:	2800      	cmp	r0, #0
 80069ca:	f43f af04 	beq.w	80067d6 <_scanf_float+0x4a>
 80069ce:	e715      	b.n	80067fc <_scanf_float+0x70>
 80069d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80069d4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80069d8:	4632      	mov	r2, r6
 80069da:	4638      	mov	r0, r7
 80069dc:	4798      	blx	r3
 80069de:	6923      	ldr	r3, [r4, #16]
 80069e0:	3b01      	subs	r3, #1
 80069e2:	6123      	str	r3, [r4, #16]
 80069e4:	e715      	b.n	8006812 <_scanf_float+0x86>
 80069e6:	f10b 33ff 	add.w	r3, fp, #4294967295
 80069ea:	2b06      	cmp	r3, #6
 80069ec:	d80a      	bhi.n	8006a04 <_scanf_float+0x278>
 80069ee:	f1bb 0f02 	cmp.w	fp, #2
 80069f2:	d968      	bls.n	8006ac6 <_scanf_float+0x33a>
 80069f4:	f1ab 0b03 	sub.w	fp, fp, #3
 80069f8:	fa5f fb8b 	uxtb.w	fp, fp
 80069fc:	eba5 0b0b 	sub.w	fp, r5, fp
 8006a00:	455d      	cmp	r5, fp
 8006a02:	d14b      	bne.n	8006a9c <_scanf_float+0x310>
 8006a04:	6823      	ldr	r3, [r4, #0]
 8006a06:	05da      	lsls	r2, r3, #23
 8006a08:	d51f      	bpl.n	8006a4a <_scanf_float+0x2be>
 8006a0a:	055b      	lsls	r3, r3, #21
 8006a0c:	d468      	bmi.n	8006ae0 <_scanf_float+0x354>
 8006a0e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8006a12:	6923      	ldr	r3, [r4, #16]
 8006a14:	2965      	cmp	r1, #101	; 0x65
 8006a16:	f103 33ff 	add.w	r3, r3, #4294967295
 8006a1a:	f105 3bff 	add.w	fp, r5, #4294967295
 8006a1e:	6123      	str	r3, [r4, #16]
 8006a20:	d00d      	beq.n	8006a3e <_scanf_float+0x2b2>
 8006a22:	2945      	cmp	r1, #69	; 0x45
 8006a24:	d00b      	beq.n	8006a3e <_scanf_float+0x2b2>
 8006a26:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006a2a:	4632      	mov	r2, r6
 8006a2c:	4638      	mov	r0, r7
 8006a2e:	4798      	blx	r3
 8006a30:	6923      	ldr	r3, [r4, #16]
 8006a32:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8006a36:	3b01      	subs	r3, #1
 8006a38:	f1a5 0b02 	sub.w	fp, r5, #2
 8006a3c:	6123      	str	r3, [r4, #16]
 8006a3e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006a42:	4632      	mov	r2, r6
 8006a44:	4638      	mov	r0, r7
 8006a46:	4798      	blx	r3
 8006a48:	465d      	mov	r5, fp
 8006a4a:	6826      	ldr	r6, [r4, #0]
 8006a4c:	f016 0610 	ands.w	r6, r6, #16
 8006a50:	d17a      	bne.n	8006b48 <_scanf_float+0x3bc>
 8006a52:	702e      	strb	r6, [r5, #0]
 8006a54:	6823      	ldr	r3, [r4, #0]
 8006a56:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006a5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a5e:	d142      	bne.n	8006ae6 <_scanf_float+0x35a>
 8006a60:	9b02      	ldr	r3, [sp, #8]
 8006a62:	eba9 0303 	sub.w	r3, r9, r3
 8006a66:	425a      	negs	r2, r3
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d149      	bne.n	8006b00 <_scanf_float+0x374>
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	4641      	mov	r1, r8
 8006a70:	4638      	mov	r0, r7
 8006a72:	f000 fed1 	bl	8007818 <_strtod_r>
 8006a76:	6825      	ldr	r5, [r4, #0]
 8006a78:	f8da 3000 	ldr.w	r3, [sl]
 8006a7c:	f015 0f02 	tst.w	r5, #2
 8006a80:	f103 0204 	add.w	r2, r3, #4
 8006a84:	ec59 8b10 	vmov	r8, r9, d0
 8006a88:	f8ca 2000 	str.w	r2, [sl]
 8006a8c:	d043      	beq.n	8006b16 <_scanf_float+0x38a>
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	e9c3 8900 	strd	r8, r9, [r3]
 8006a94:	68e3      	ldr	r3, [r4, #12]
 8006a96:	3301      	adds	r3, #1
 8006a98:	60e3      	str	r3, [r4, #12]
 8006a9a:	e6be      	b.n	800681a <_scanf_float+0x8e>
 8006a9c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006aa0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006aa4:	4632      	mov	r2, r6
 8006aa6:	4638      	mov	r0, r7
 8006aa8:	4798      	blx	r3
 8006aaa:	6923      	ldr	r3, [r4, #16]
 8006aac:	3b01      	subs	r3, #1
 8006aae:	6123      	str	r3, [r4, #16]
 8006ab0:	e7a6      	b.n	8006a00 <_scanf_float+0x274>
 8006ab2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006ab6:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006aba:	4632      	mov	r2, r6
 8006abc:	4638      	mov	r0, r7
 8006abe:	4798      	blx	r3
 8006ac0:	6923      	ldr	r3, [r4, #16]
 8006ac2:	3b01      	subs	r3, #1
 8006ac4:	6123      	str	r3, [r4, #16]
 8006ac6:	4545      	cmp	r5, r8
 8006ac8:	d8f3      	bhi.n	8006ab2 <_scanf_float+0x326>
 8006aca:	e6a5      	b.n	8006818 <_scanf_float+0x8c>
 8006acc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006ad0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006ad4:	4632      	mov	r2, r6
 8006ad6:	4638      	mov	r0, r7
 8006ad8:	4798      	blx	r3
 8006ada:	6923      	ldr	r3, [r4, #16]
 8006adc:	3b01      	subs	r3, #1
 8006ade:	6123      	str	r3, [r4, #16]
 8006ae0:	4545      	cmp	r5, r8
 8006ae2:	d8f3      	bhi.n	8006acc <_scanf_float+0x340>
 8006ae4:	e698      	b.n	8006818 <_scanf_float+0x8c>
 8006ae6:	9b03      	ldr	r3, [sp, #12]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d0bf      	beq.n	8006a6c <_scanf_float+0x2e0>
 8006aec:	9904      	ldr	r1, [sp, #16]
 8006aee:	230a      	movs	r3, #10
 8006af0:	4632      	mov	r2, r6
 8006af2:	3101      	adds	r1, #1
 8006af4:	4638      	mov	r0, r7
 8006af6:	f000 ff1b 	bl	8007930 <_strtol_r>
 8006afa:	9b03      	ldr	r3, [sp, #12]
 8006afc:	9d04      	ldr	r5, [sp, #16]
 8006afe:	1ac2      	subs	r2, r0, r3
 8006b00:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006b04:	429d      	cmp	r5, r3
 8006b06:	bf28      	it	cs
 8006b08:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8006b0c:	490f      	ldr	r1, [pc, #60]	; (8006b4c <_scanf_float+0x3c0>)
 8006b0e:	4628      	mov	r0, r5
 8006b10:	f000 f824 	bl	8006b5c <siprintf>
 8006b14:	e7aa      	b.n	8006a6c <_scanf_float+0x2e0>
 8006b16:	f015 0504 	ands.w	r5, r5, #4
 8006b1a:	d1b8      	bne.n	8006a8e <_scanf_float+0x302>
 8006b1c:	681f      	ldr	r7, [r3, #0]
 8006b1e:	ee10 2a10 	vmov	r2, s0
 8006b22:	464b      	mov	r3, r9
 8006b24:	ee10 0a10 	vmov	r0, s0
 8006b28:	4649      	mov	r1, r9
 8006b2a:	f7fa f807 	bl	8000b3c <__aeabi_dcmpun>
 8006b2e:	b128      	cbz	r0, 8006b3c <_scanf_float+0x3b0>
 8006b30:	4628      	mov	r0, r5
 8006b32:	f000 f80d 	bl	8006b50 <nanf>
 8006b36:	ed87 0a00 	vstr	s0, [r7]
 8006b3a:	e7ab      	b.n	8006a94 <_scanf_float+0x308>
 8006b3c:	4640      	mov	r0, r8
 8006b3e:	4649      	mov	r1, r9
 8006b40:	f7fa f85a 	bl	8000bf8 <__aeabi_d2f>
 8006b44:	6038      	str	r0, [r7, #0]
 8006b46:	e7a5      	b.n	8006a94 <_scanf_float+0x308>
 8006b48:	2600      	movs	r6, #0
 8006b4a:	e666      	b.n	800681a <_scanf_float+0x8e>
 8006b4c:	0800a2fa 	.word	0x0800a2fa

08006b50 <nanf>:
 8006b50:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006b58 <nanf+0x8>
 8006b54:	4770      	bx	lr
 8006b56:	bf00      	nop
 8006b58:	7fc00000 	.word	0x7fc00000

08006b5c <siprintf>:
 8006b5c:	b40e      	push	{r1, r2, r3}
 8006b5e:	b500      	push	{lr}
 8006b60:	b09c      	sub	sp, #112	; 0x70
 8006b62:	ab1d      	add	r3, sp, #116	; 0x74
 8006b64:	9002      	str	r0, [sp, #8]
 8006b66:	9006      	str	r0, [sp, #24]
 8006b68:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006b6c:	4809      	ldr	r0, [pc, #36]	; (8006b94 <siprintf+0x38>)
 8006b6e:	9107      	str	r1, [sp, #28]
 8006b70:	9104      	str	r1, [sp, #16]
 8006b72:	4909      	ldr	r1, [pc, #36]	; (8006b98 <siprintf+0x3c>)
 8006b74:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b78:	9105      	str	r1, [sp, #20]
 8006b7a:	6800      	ldr	r0, [r0, #0]
 8006b7c:	9301      	str	r3, [sp, #4]
 8006b7e:	a902      	add	r1, sp, #8
 8006b80:	f002 fdaa 	bl	80096d8 <_svfiprintf_r>
 8006b84:	9b02      	ldr	r3, [sp, #8]
 8006b86:	2200      	movs	r2, #0
 8006b88:	701a      	strb	r2, [r3, #0]
 8006b8a:	b01c      	add	sp, #112	; 0x70
 8006b8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b90:	b003      	add	sp, #12
 8006b92:	4770      	bx	lr
 8006b94:	2000022c 	.word	0x2000022c
 8006b98:	ffff0208 	.word	0xffff0208

08006b9c <siscanf>:
 8006b9c:	b40e      	push	{r1, r2, r3}
 8006b9e:	b530      	push	{r4, r5, lr}
 8006ba0:	b09c      	sub	sp, #112	; 0x70
 8006ba2:	ac1f      	add	r4, sp, #124	; 0x7c
 8006ba4:	f44f 7201 	mov.w	r2, #516	; 0x204
 8006ba8:	f854 5b04 	ldr.w	r5, [r4], #4
 8006bac:	f8ad 2014 	strh.w	r2, [sp, #20]
 8006bb0:	9002      	str	r0, [sp, #8]
 8006bb2:	9006      	str	r0, [sp, #24]
 8006bb4:	f7f9 fb14 	bl	80001e0 <strlen>
 8006bb8:	4b0b      	ldr	r3, [pc, #44]	; (8006be8 <siscanf+0x4c>)
 8006bba:	9003      	str	r0, [sp, #12]
 8006bbc:	9007      	str	r0, [sp, #28]
 8006bbe:	930b      	str	r3, [sp, #44]	; 0x2c
 8006bc0:	480a      	ldr	r0, [pc, #40]	; (8006bec <siscanf+0x50>)
 8006bc2:	9401      	str	r4, [sp, #4]
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	930f      	str	r3, [sp, #60]	; 0x3c
 8006bc8:	9314      	str	r3, [sp, #80]	; 0x50
 8006bca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006bce:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006bd2:	462a      	mov	r2, r5
 8006bd4:	4623      	mov	r3, r4
 8006bd6:	a902      	add	r1, sp, #8
 8006bd8:	6800      	ldr	r0, [r0, #0]
 8006bda:	f002 fecf 	bl	800997c <__ssvfiscanf_r>
 8006bde:	b01c      	add	sp, #112	; 0x70
 8006be0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006be4:	b003      	add	sp, #12
 8006be6:	4770      	bx	lr
 8006be8:	08006bf1 	.word	0x08006bf1
 8006bec:	2000022c 	.word	0x2000022c

08006bf0 <__seofread>:
 8006bf0:	2000      	movs	r0, #0
 8006bf2:	4770      	bx	lr

08006bf4 <sulp>:
 8006bf4:	b570      	push	{r4, r5, r6, lr}
 8006bf6:	4604      	mov	r4, r0
 8006bf8:	460d      	mov	r5, r1
 8006bfa:	ec45 4b10 	vmov	d0, r4, r5
 8006bfe:	4616      	mov	r6, r2
 8006c00:	f002 fb26 	bl	8009250 <__ulp>
 8006c04:	ec51 0b10 	vmov	r0, r1, d0
 8006c08:	b17e      	cbz	r6, 8006c2a <sulp+0x36>
 8006c0a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006c0e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	dd09      	ble.n	8006c2a <sulp+0x36>
 8006c16:	051b      	lsls	r3, r3, #20
 8006c18:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006c1c:	2400      	movs	r4, #0
 8006c1e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006c22:	4622      	mov	r2, r4
 8006c24:	462b      	mov	r3, r5
 8006c26:	f7f9 fcef 	bl	8000608 <__aeabi_dmul>
 8006c2a:	bd70      	pop	{r4, r5, r6, pc}
 8006c2c:	0000      	movs	r0, r0
	...

08006c30 <_strtod_l>:
 8006c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c34:	461f      	mov	r7, r3
 8006c36:	b0a1      	sub	sp, #132	; 0x84
 8006c38:	2300      	movs	r3, #0
 8006c3a:	4681      	mov	r9, r0
 8006c3c:	4638      	mov	r0, r7
 8006c3e:	460e      	mov	r6, r1
 8006c40:	9217      	str	r2, [sp, #92]	; 0x5c
 8006c42:	931c      	str	r3, [sp, #112]	; 0x70
 8006c44:	f002 f804 	bl	8008c50 <__localeconv_l>
 8006c48:	4680      	mov	r8, r0
 8006c4a:	6800      	ldr	r0, [r0, #0]
 8006c4c:	f7f9 fac8 	bl	80001e0 <strlen>
 8006c50:	f04f 0a00 	mov.w	sl, #0
 8006c54:	4604      	mov	r4, r0
 8006c56:	f04f 0b00 	mov.w	fp, #0
 8006c5a:	961b      	str	r6, [sp, #108]	; 0x6c
 8006c5c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006c5e:	781a      	ldrb	r2, [r3, #0]
 8006c60:	2a0d      	cmp	r2, #13
 8006c62:	d832      	bhi.n	8006cca <_strtod_l+0x9a>
 8006c64:	2a09      	cmp	r2, #9
 8006c66:	d236      	bcs.n	8006cd6 <_strtod_l+0xa6>
 8006c68:	2a00      	cmp	r2, #0
 8006c6a:	d03e      	beq.n	8006cea <_strtod_l+0xba>
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	930d      	str	r3, [sp, #52]	; 0x34
 8006c70:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8006c72:	782b      	ldrb	r3, [r5, #0]
 8006c74:	2b30      	cmp	r3, #48	; 0x30
 8006c76:	f040 80ac 	bne.w	8006dd2 <_strtod_l+0x1a2>
 8006c7a:	786b      	ldrb	r3, [r5, #1]
 8006c7c:	2b58      	cmp	r3, #88	; 0x58
 8006c7e:	d001      	beq.n	8006c84 <_strtod_l+0x54>
 8006c80:	2b78      	cmp	r3, #120	; 0x78
 8006c82:	d167      	bne.n	8006d54 <_strtod_l+0x124>
 8006c84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006c86:	9301      	str	r3, [sp, #4]
 8006c88:	ab1c      	add	r3, sp, #112	; 0x70
 8006c8a:	9300      	str	r3, [sp, #0]
 8006c8c:	9702      	str	r7, [sp, #8]
 8006c8e:	ab1d      	add	r3, sp, #116	; 0x74
 8006c90:	4a88      	ldr	r2, [pc, #544]	; (8006eb4 <_strtod_l+0x284>)
 8006c92:	a91b      	add	r1, sp, #108	; 0x6c
 8006c94:	4648      	mov	r0, r9
 8006c96:	f001 fcf2 	bl	800867e <__gethex>
 8006c9a:	f010 0407 	ands.w	r4, r0, #7
 8006c9e:	4606      	mov	r6, r0
 8006ca0:	d005      	beq.n	8006cae <_strtod_l+0x7e>
 8006ca2:	2c06      	cmp	r4, #6
 8006ca4:	d12b      	bne.n	8006cfe <_strtod_l+0xce>
 8006ca6:	3501      	adds	r5, #1
 8006ca8:	2300      	movs	r3, #0
 8006caa:	951b      	str	r5, [sp, #108]	; 0x6c
 8006cac:	930d      	str	r3, [sp, #52]	; 0x34
 8006cae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	f040 859a 	bne.w	80077ea <_strtod_l+0xbba>
 8006cb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006cb8:	b1e3      	cbz	r3, 8006cf4 <_strtod_l+0xc4>
 8006cba:	4652      	mov	r2, sl
 8006cbc:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006cc0:	ec43 2b10 	vmov	d0, r2, r3
 8006cc4:	b021      	add	sp, #132	; 0x84
 8006cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cca:	2a2b      	cmp	r2, #43	; 0x2b
 8006ccc:	d015      	beq.n	8006cfa <_strtod_l+0xca>
 8006cce:	2a2d      	cmp	r2, #45	; 0x2d
 8006cd0:	d004      	beq.n	8006cdc <_strtod_l+0xac>
 8006cd2:	2a20      	cmp	r2, #32
 8006cd4:	d1ca      	bne.n	8006c6c <_strtod_l+0x3c>
 8006cd6:	3301      	adds	r3, #1
 8006cd8:	931b      	str	r3, [sp, #108]	; 0x6c
 8006cda:	e7bf      	b.n	8006c5c <_strtod_l+0x2c>
 8006cdc:	2201      	movs	r2, #1
 8006cde:	920d      	str	r2, [sp, #52]	; 0x34
 8006ce0:	1c5a      	adds	r2, r3, #1
 8006ce2:	921b      	str	r2, [sp, #108]	; 0x6c
 8006ce4:	785b      	ldrb	r3, [r3, #1]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d1c2      	bne.n	8006c70 <_strtod_l+0x40>
 8006cea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006cec:	961b      	str	r6, [sp, #108]	; 0x6c
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	f040 8579 	bne.w	80077e6 <_strtod_l+0xbb6>
 8006cf4:	4652      	mov	r2, sl
 8006cf6:	465b      	mov	r3, fp
 8006cf8:	e7e2      	b.n	8006cc0 <_strtod_l+0x90>
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	e7ef      	b.n	8006cde <_strtod_l+0xae>
 8006cfe:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006d00:	b13a      	cbz	r2, 8006d12 <_strtod_l+0xe2>
 8006d02:	2135      	movs	r1, #53	; 0x35
 8006d04:	a81e      	add	r0, sp, #120	; 0x78
 8006d06:	f002 fb9b 	bl	8009440 <__copybits>
 8006d0a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006d0c:	4648      	mov	r0, r9
 8006d0e:	f002 f808 	bl	8008d22 <_Bfree>
 8006d12:	3c01      	subs	r4, #1
 8006d14:	2c04      	cmp	r4, #4
 8006d16:	d806      	bhi.n	8006d26 <_strtod_l+0xf6>
 8006d18:	e8df f004 	tbb	[pc, r4]
 8006d1c:	1714030a 	.word	0x1714030a
 8006d20:	0a          	.byte	0x0a
 8006d21:	00          	.byte	0x00
 8006d22:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8006d26:	0730      	lsls	r0, r6, #28
 8006d28:	d5c1      	bpl.n	8006cae <_strtod_l+0x7e>
 8006d2a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006d2e:	e7be      	b.n	8006cae <_strtod_l+0x7e>
 8006d30:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8006d34:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8006d36:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006d3a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006d3e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006d42:	e7f0      	b.n	8006d26 <_strtod_l+0xf6>
 8006d44:	f8df b170 	ldr.w	fp, [pc, #368]	; 8006eb8 <_strtod_l+0x288>
 8006d48:	e7ed      	b.n	8006d26 <_strtod_l+0xf6>
 8006d4a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8006d4e:	f04f 3aff 	mov.w	sl, #4294967295
 8006d52:	e7e8      	b.n	8006d26 <_strtod_l+0xf6>
 8006d54:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006d56:	1c5a      	adds	r2, r3, #1
 8006d58:	921b      	str	r2, [sp, #108]	; 0x6c
 8006d5a:	785b      	ldrb	r3, [r3, #1]
 8006d5c:	2b30      	cmp	r3, #48	; 0x30
 8006d5e:	d0f9      	beq.n	8006d54 <_strtod_l+0x124>
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d0a4      	beq.n	8006cae <_strtod_l+0x7e>
 8006d64:	2301      	movs	r3, #1
 8006d66:	2500      	movs	r5, #0
 8006d68:	9306      	str	r3, [sp, #24]
 8006d6a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006d6c:	9308      	str	r3, [sp, #32]
 8006d6e:	9507      	str	r5, [sp, #28]
 8006d70:	9505      	str	r5, [sp, #20]
 8006d72:	220a      	movs	r2, #10
 8006d74:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8006d76:	7807      	ldrb	r7, [r0, #0]
 8006d78:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8006d7c:	b2d9      	uxtb	r1, r3
 8006d7e:	2909      	cmp	r1, #9
 8006d80:	d929      	bls.n	8006dd6 <_strtod_l+0x1a6>
 8006d82:	4622      	mov	r2, r4
 8006d84:	f8d8 1000 	ldr.w	r1, [r8]
 8006d88:	f003 f8e2 	bl	8009f50 <strncmp>
 8006d8c:	2800      	cmp	r0, #0
 8006d8e:	d031      	beq.n	8006df4 <_strtod_l+0x1c4>
 8006d90:	2000      	movs	r0, #0
 8006d92:	9c05      	ldr	r4, [sp, #20]
 8006d94:	9004      	str	r0, [sp, #16]
 8006d96:	463b      	mov	r3, r7
 8006d98:	4602      	mov	r2, r0
 8006d9a:	2b65      	cmp	r3, #101	; 0x65
 8006d9c:	d001      	beq.n	8006da2 <_strtod_l+0x172>
 8006d9e:	2b45      	cmp	r3, #69	; 0x45
 8006da0:	d114      	bne.n	8006dcc <_strtod_l+0x19c>
 8006da2:	b924      	cbnz	r4, 8006dae <_strtod_l+0x17e>
 8006da4:	b910      	cbnz	r0, 8006dac <_strtod_l+0x17c>
 8006da6:	9b06      	ldr	r3, [sp, #24]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d09e      	beq.n	8006cea <_strtod_l+0xba>
 8006dac:	2400      	movs	r4, #0
 8006dae:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8006db0:	1c73      	adds	r3, r6, #1
 8006db2:	931b      	str	r3, [sp, #108]	; 0x6c
 8006db4:	7873      	ldrb	r3, [r6, #1]
 8006db6:	2b2b      	cmp	r3, #43	; 0x2b
 8006db8:	d078      	beq.n	8006eac <_strtod_l+0x27c>
 8006dba:	2b2d      	cmp	r3, #45	; 0x2d
 8006dbc:	d070      	beq.n	8006ea0 <_strtod_l+0x270>
 8006dbe:	f04f 0c00 	mov.w	ip, #0
 8006dc2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8006dc6:	2f09      	cmp	r7, #9
 8006dc8:	d97c      	bls.n	8006ec4 <_strtod_l+0x294>
 8006dca:	961b      	str	r6, [sp, #108]	; 0x6c
 8006dcc:	f04f 0e00 	mov.w	lr, #0
 8006dd0:	e09a      	b.n	8006f08 <_strtod_l+0x2d8>
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	e7c7      	b.n	8006d66 <_strtod_l+0x136>
 8006dd6:	9905      	ldr	r1, [sp, #20]
 8006dd8:	2908      	cmp	r1, #8
 8006dda:	bfdd      	ittte	le
 8006ddc:	9907      	ldrle	r1, [sp, #28]
 8006dde:	fb02 3301 	mlale	r3, r2, r1, r3
 8006de2:	9307      	strle	r3, [sp, #28]
 8006de4:	fb02 3505 	mlagt	r5, r2, r5, r3
 8006de8:	9b05      	ldr	r3, [sp, #20]
 8006dea:	3001      	adds	r0, #1
 8006dec:	3301      	adds	r3, #1
 8006dee:	9305      	str	r3, [sp, #20]
 8006df0:	901b      	str	r0, [sp, #108]	; 0x6c
 8006df2:	e7bf      	b.n	8006d74 <_strtod_l+0x144>
 8006df4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006df6:	191a      	adds	r2, r3, r4
 8006df8:	921b      	str	r2, [sp, #108]	; 0x6c
 8006dfa:	9a05      	ldr	r2, [sp, #20]
 8006dfc:	5d1b      	ldrb	r3, [r3, r4]
 8006dfe:	2a00      	cmp	r2, #0
 8006e00:	d037      	beq.n	8006e72 <_strtod_l+0x242>
 8006e02:	9c05      	ldr	r4, [sp, #20]
 8006e04:	4602      	mov	r2, r0
 8006e06:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8006e0a:	2909      	cmp	r1, #9
 8006e0c:	d913      	bls.n	8006e36 <_strtod_l+0x206>
 8006e0e:	2101      	movs	r1, #1
 8006e10:	9104      	str	r1, [sp, #16]
 8006e12:	e7c2      	b.n	8006d9a <_strtod_l+0x16a>
 8006e14:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006e16:	1c5a      	adds	r2, r3, #1
 8006e18:	921b      	str	r2, [sp, #108]	; 0x6c
 8006e1a:	785b      	ldrb	r3, [r3, #1]
 8006e1c:	3001      	adds	r0, #1
 8006e1e:	2b30      	cmp	r3, #48	; 0x30
 8006e20:	d0f8      	beq.n	8006e14 <_strtod_l+0x1e4>
 8006e22:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8006e26:	2a08      	cmp	r2, #8
 8006e28:	f200 84e4 	bhi.w	80077f4 <_strtod_l+0xbc4>
 8006e2c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006e2e:	9208      	str	r2, [sp, #32]
 8006e30:	4602      	mov	r2, r0
 8006e32:	2000      	movs	r0, #0
 8006e34:	4604      	mov	r4, r0
 8006e36:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8006e3a:	f100 0101 	add.w	r1, r0, #1
 8006e3e:	d012      	beq.n	8006e66 <_strtod_l+0x236>
 8006e40:	440a      	add	r2, r1
 8006e42:	eb00 0c04 	add.w	ip, r0, r4
 8006e46:	4621      	mov	r1, r4
 8006e48:	270a      	movs	r7, #10
 8006e4a:	458c      	cmp	ip, r1
 8006e4c:	d113      	bne.n	8006e76 <_strtod_l+0x246>
 8006e4e:	1821      	adds	r1, r4, r0
 8006e50:	2908      	cmp	r1, #8
 8006e52:	f104 0401 	add.w	r4, r4, #1
 8006e56:	4404      	add	r4, r0
 8006e58:	dc19      	bgt.n	8006e8e <_strtod_l+0x25e>
 8006e5a:	9b07      	ldr	r3, [sp, #28]
 8006e5c:	210a      	movs	r1, #10
 8006e5e:	fb01 e303 	mla	r3, r1, r3, lr
 8006e62:	9307      	str	r3, [sp, #28]
 8006e64:	2100      	movs	r1, #0
 8006e66:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006e68:	1c58      	adds	r0, r3, #1
 8006e6a:	901b      	str	r0, [sp, #108]	; 0x6c
 8006e6c:	785b      	ldrb	r3, [r3, #1]
 8006e6e:	4608      	mov	r0, r1
 8006e70:	e7c9      	b.n	8006e06 <_strtod_l+0x1d6>
 8006e72:	9805      	ldr	r0, [sp, #20]
 8006e74:	e7d3      	b.n	8006e1e <_strtod_l+0x1ee>
 8006e76:	2908      	cmp	r1, #8
 8006e78:	f101 0101 	add.w	r1, r1, #1
 8006e7c:	dc03      	bgt.n	8006e86 <_strtod_l+0x256>
 8006e7e:	9b07      	ldr	r3, [sp, #28]
 8006e80:	437b      	muls	r3, r7
 8006e82:	9307      	str	r3, [sp, #28]
 8006e84:	e7e1      	b.n	8006e4a <_strtod_l+0x21a>
 8006e86:	2910      	cmp	r1, #16
 8006e88:	bfd8      	it	le
 8006e8a:	437d      	mulle	r5, r7
 8006e8c:	e7dd      	b.n	8006e4a <_strtod_l+0x21a>
 8006e8e:	2c10      	cmp	r4, #16
 8006e90:	bfdc      	itt	le
 8006e92:	210a      	movle	r1, #10
 8006e94:	fb01 e505 	mlale	r5, r1, r5, lr
 8006e98:	e7e4      	b.n	8006e64 <_strtod_l+0x234>
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	9304      	str	r3, [sp, #16]
 8006e9e:	e781      	b.n	8006da4 <_strtod_l+0x174>
 8006ea0:	f04f 0c01 	mov.w	ip, #1
 8006ea4:	1cb3      	adds	r3, r6, #2
 8006ea6:	931b      	str	r3, [sp, #108]	; 0x6c
 8006ea8:	78b3      	ldrb	r3, [r6, #2]
 8006eaa:	e78a      	b.n	8006dc2 <_strtod_l+0x192>
 8006eac:	f04f 0c00 	mov.w	ip, #0
 8006eb0:	e7f8      	b.n	8006ea4 <_strtod_l+0x274>
 8006eb2:	bf00      	nop
 8006eb4:	0800a300 	.word	0x0800a300
 8006eb8:	7ff00000 	.word	0x7ff00000
 8006ebc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006ebe:	1c5f      	adds	r7, r3, #1
 8006ec0:	971b      	str	r7, [sp, #108]	; 0x6c
 8006ec2:	785b      	ldrb	r3, [r3, #1]
 8006ec4:	2b30      	cmp	r3, #48	; 0x30
 8006ec6:	d0f9      	beq.n	8006ebc <_strtod_l+0x28c>
 8006ec8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8006ecc:	2f08      	cmp	r7, #8
 8006ece:	f63f af7d 	bhi.w	8006dcc <_strtod_l+0x19c>
 8006ed2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8006ed6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006ed8:	930a      	str	r3, [sp, #40]	; 0x28
 8006eda:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006edc:	1c5f      	adds	r7, r3, #1
 8006ede:	971b      	str	r7, [sp, #108]	; 0x6c
 8006ee0:	785b      	ldrb	r3, [r3, #1]
 8006ee2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8006ee6:	f1b8 0f09 	cmp.w	r8, #9
 8006eea:	d937      	bls.n	8006f5c <_strtod_l+0x32c>
 8006eec:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006eee:	1a7f      	subs	r7, r7, r1
 8006ef0:	2f08      	cmp	r7, #8
 8006ef2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8006ef6:	dc37      	bgt.n	8006f68 <_strtod_l+0x338>
 8006ef8:	45be      	cmp	lr, r7
 8006efa:	bfa8      	it	ge
 8006efc:	46be      	movge	lr, r7
 8006efe:	f1bc 0f00 	cmp.w	ip, #0
 8006f02:	d001      	beq.n	8006f08 <_strtod_l+0x2d8>
 8006f04:	f1ce 0e00 	rsb	lr, lr, #0
 8006f08:	2c00      	cmp	r4, #0
 8006f0a:	d151      	bne.n	8006fb0 <_strtod_l+0x380>
 8006f0c:	2800      	cmp	r0, #0
 8006f0e:	f47f aece 	bne.w	8006cae <_strtod_l+0x7e>
 8006f12:	9a06      	ldr	r2, [sp, #24]
 8006f14:	2a00      	cmp	r2, #0
 8006f16:	f47f aeca 	bne.w	8006cae <_strtod_l+0x7e>
 8006f1a:	9a04      	ldr	r2, [sp, #16]
 8006f1c:	2a00      	cmp	r2, #0
 8006f1e:	f47f aee4 	bne.w	8006cea <_strtod_l+0xba>
 8006f22:	2b4e      	cmp	r3, #78	; 0x4e
 8006f24:	d027      	beq.n	8006f76 <_strtod_l+0x346>
 8006f26:	dc21      	bgt.n	8006f6c <_strtod_l+0x33c>
 8006f28:	2b49      	cmp	r3, #73	; 0x49
 8006f2a:	f47f aede 	bne.w	8006cea <_strtod_l+0xba>
 8006f2e:	49a0      	ldr	r1, [pc, #640]	; (80071b0 <_strtod_l+0x580>)
 8006f30:	a81b      	add	r0, sp, #108	; 0x6c
 8006f32:	f001 fdd7 	bl	8008ae4 <__match>
 8006f36:	2800      	cmp	r0, #0
 8006f38:	f43f aed7 	beq.w	8006cea <_strtod_l+0xba>
 8006f3c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006f3e:	499d      	ldr	r1, [pc, #628]	; (80071b4 <_strtod_l+0x584>)
 8006f40:	3b01      	subs	r3, #1
 8006f42:	a81b      	add	r0, sp, #108	; 0x6c
 8006f44:	931b      	str	r3, [sp, #108]	; 0x6c
 8006f46:	f001 fdcd 	bl	8008ae4 <__match>
 8006f4a:	b910      	cbnz	r0, 8006f52 <_strtod_l+0x322>
 8006f4c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006f4e:	3301      	adds	r3, #1
 8006f50:	931b      	str	r3, [sp, #108]	; 0x6c
 8006f52:	f8df b274 	ldr.w	fp, [pc, #628]	; 80071c8 <_strtod_l+0x598>
 8006f56:	f04f 0a00 	mov.w	sl, #0
 8006f5a:	e6a8      	b.n	8006cae <_strtod_l+0x7e>
 8006f5c:	210a      	movs	r1, #10
 8006f5e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8006f62:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8006f66:	e7b8      	b.n	8006eda <_strtod_l+0x2aa>
 8006f68:	46be      	mov	lr, r7
 8006f6a:	e7c8      	b.n	8006efe <_strtod_l+0x2ce>
 8006f6c:	2b69      	cmp	r3, #105	; 0x69
 8006f6e:	d0de      	beq.n	8006f2e <_strtod_l+0x2fe>
 8006f70:	2b6e      	cmp	r3, #110	; 0x6e
 8006f72:	f47f aeba 	bne.w	8006cea <_strtod_l+0xba>
 8006f76:	4990      	ldr	r1, [pc, #576]	; (80071b8 <_strtod_l+0x588>)
 8006f78:	a81b      	add	r0, sp, #108	; 0x6c
 8006f7a:	f001 fdb3 	bl	8008ae4 <__match>
 8006f7e:	2800      	cmp	r0, #0
 8006f80:	f43f aeb3 	beq.w	8006cea <_strtod_l+0xba>
 8006f84:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	2b28      	cmp	r3, #40	; 0x28
 8006f8a:	d10e      	bne.n	8006faa <_strtod_l+0x37a>
 8006f8c:	aa1e      	add	r2, sp, #120	; 0x78
 8006f8e:	498b      	ldr	r1, [pc, #556]	; (80071bc <_strtod_l+0x58c>)
 8006f90:	a81b      	add	r0, sp, #108	; 0x6c
 8006f92:	f001 fdbb 	bl	8008b0c <__hexnan>
 8006f96:	2805      	cmp	r0, #5
 8006f98:	d107      	bne.n	8006faa <_strtod_l+0x37a>
 8006f9a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006f9c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8006fa0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8006fa4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8006fa8:	e681      	b.n	8006cae <_strtod_l+0x7e>
 8006faa:	f8df b224 	ldr.w	fp, [pc, #548]	; 80071d0 <_strtod_l+0x5a0>
 8006fae:	e7d2      	b.n	8006f56 <_strtod_l+0x326>
 8006fb0:	ebae 0302 	sub.w	r3, lr, r2
 8006fb4:	9306      	str	r3, [sp, #24]
 8006fb6:	9b05      	ldr	r3, [sp, #20]
 8006fb8:	9807      	ldr	r0, [sp, #28]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	bf08      	it	eq
 8006fbe:	4623      	moveq	r3, r4
 8006fc0:	2c10      	cmp	r4, #16
 8006fc2:	9305      	str	r3, [sp, #20]
 8006fc4:	46a0      	mov	r8, r4
 8006fc6:	bfa8      	it	ge
 8006fc8:	f04f 0810 	movge.w	r8, #16
 8006fcc:	f7f9 faa2 	bl	8000514 <__aeabi_ui2d>
 8006fd0:	2c09      	cmp	r4, #9
 8006fd2:	4682      	mov	sl, r0
 8006fd4:	468b      	mov	fp, r1
 8006fd6:	dc13      	bgt.n	8007000 <_strtod_l+0x3d0>
 8006fd8:	9b06      	ldr	r3, [sp, #24]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	f43f ae67 	beq.w	8006cae <_strtod_l+0x7e>
 8006fe0:	9b06      	ldr	r3, [sp, #24]
 8006fe2:	dd7a      	ble.n	80070da <_strtod_l+0x4aa>
 8006fe4:	2b16      	cmp	r3, #22
 8006fe6:	dc61      	bgt.n	80070ac <_strtod_l+0x47c>
 8006fe8:	4a75      	ldr	r2, [pc, #468]	; (80071c0 <_strtod_l+0x590>)
 8006fea:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8006fee:	e9de 0100 	ldrd	r0, r1, [lr]
 8006ff2:	4652      	mov	r2, sl
 8006ff4:	465b      	mov	r3, fp
 8006ff6:	f7f9 fb07 	bl	8000608 <__aeabi_dmul>
 8006ffa:	4682      	mov	sl, r0
 8006ffc:	468b      	mov	fp, r1
 8006ffe:	e656      	b.n	8006cae <_strtod_l+0x7e>
 8007000:	4b6f      	ldr	r3, [pc, #444]	; (80071c0 <_strtod_l+0x590>)
 8007002:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007006:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800700a:	f7f9 fafd 	bl	8000608 <__aeabi_dmul>
 800700e:	4606      	mov	r6, r0
 8007010:	4628      	mov	r0, r5
 8007012:	460f      	mov	r7, r1
 8007014:	f7f9 fa7e 	bl	8000514 <__aeabi_ui2d>
 8007018:	4602      	mov	r2, r0
 800701a:	460b      	mov	r3, r1
 800701c:	4630      	mov	r0, r6
 800701e:	4639      	mov	r1, r7
 8007020:	f7f9 f93c 	bl	800029c <__adddf3>
 8007024:	2c0f      	cmp	r4, #15
 8007026:	4682      	mov	sl, r0
 8007028:	468b      	mov	fp, r1
 800702a:	ddd5      	ble.n	8006fd8 <_strtod_l+0x3a8>
 800702c:	9b06      	ldr	r3, [sp, #24]
 800702e:	eba4 0808 	sub.w	r8, r4, r8
 8007032:	4498      	add	r8, r3
 8007034:	f1b8 0f00 	cmp.w	r8, #0
 8007038:	f340 8096 	ble.w	8007168 <_strtod_l+0x538>
 800703c:	f018 030f 	ands.w	r3, r8, #15
 8007040:	d00a      	beq.n	8007058 <_strtod_l+0x428>
 8007042:	495f      	ldr	r1, [pc, #380]	; (80071c0 <_strtod_l+0x590>)
 8007044:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007048:	4652      	mov	r2, sl
 800704a:	465b      	mov	r3, fp
 800704c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007050:	f7f9 fada 	bl	8000608 <__aeabi_dmul>
 8007054:	4682      	mov	sl, r0
 8007056:	468b      	mov	fp, r1
 8007058:	f038 080f 	bics.w	r8, r8, #15
 800705c:	d073      	beq.n	8007146 <_strtod_l+0x516>
 800705e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007062:	dd47      	ble.n	80070f4 <_strtod_l+0x4c4>
 8007064:	2400      	movs	r4, #0
 8007066:	46a0      	mov	r8, r4
 8007068:	9407      	str	r4, [sp, #28]
 800706a:	9405      	str	r4, [sp, #20]
 800706c:	2322      	movs	r3, #34	; 0x22
 800706e:	f8df b158 	ldr.w	fp, [pc, #344]	; 80071c8 <_strtod_l+0x598>
 8007072:	f8c9 3000 	str.w	r3, [r9]
 8007076:	f04f 0a00 	mov.w	sl, #0
 800707a:	9b07      	ldr	r3, [sp, #28]
 800707c:	2b00      	cmp	r3, #0
 800707e:	f43f ae16 	beq.w	8006cae <_strtod_l+0x7e>
 8007082:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007084:	4648      	mov	r0, r9
 8007086:	f001 fe4c 	bl	8008d22 <_Bfree>
 800708a:	9905      	ldr	r1, [sp, #20]
 800708c:	4648      	mov	r0, r9
 800708e:	f001 fe48 	bl	8008d22 <_Bfree>
 8007092:	4641      	mov	r1, r8
 8007094:	4648      	mov	r0, r9
 8007096:	f001 fe44 	bl	8008d22 <_Bfree>
 800709a:	9907      	ldr	r1, [sp, #28]
 800709c:	4648      	mov	r0, r9
 800709e:	f001 fe40 	bl	8008d22 <_Bfree>
 80070a2:	4621      	mov	r1, r4
 80070a4:	4648      	mov	r0, r9
 80070a6:	f001 fe3c 	bl	8008d22 <_Bfree>
 80070aa:	e600      	b.n	8006cae <_strtod_l+0x7e>
 80070ac:	9a06      	ldr	r2, [sp, #24]
 80070ae:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80070b2:	4293      	cmp	r3, r2
 80070b4:	dbba      	blt.n	800702c <_strtod_l+0x3fc>
 80070b6:	4d42      	ldr	r5, [pc, #264]	; (80071c0 <_strtod_l+0x590>)
 80070b8:	f1c4 040f 	rsb	r4, r4, #15
 80070bc:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80070c0:	4652      	mov	r2, sl
 80070c2:	465b      	mov	r3, fp
 80070c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80070c8:	f7f9 fa9e 	bl	8000608 <__aeabi_dmul>
 80070cc:	9b06      	ldr	r3, [sp, #24]
 80070ce:	1b1c      	subs	r4, r3, r4
 80070d0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80070d4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80070d8:	e78d      	b.n	8006ff6 <_strtod_l+0x3c6>
 80070da:	f113 0f16 	cmn.w	r3, #22
 80070de:	dba5      	blt.n	800702c <_strtod_l+0x3fc>
 80070e0:	4a37      	ldr	r2, [pc, #220]	; (80071c0 <_strtod_l+0x590>)
 80070e2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80070e6:	e9d2 2300 	ldrd	r2, r3, [r2]
 80070ea:	4650      	mov	r0, sl
 80070ec:	4659      	mov	r1, fp
 80070ee:	f7f9 fbb5 	bl	800085c <__aeabi_ddiv>
 80070f2:	e782      	b.n	8006ffa <_strtod_l+0x3ca>
 80070f4:	2300      	movs	r3, #0
 80070f6:	4e33      	ldr	r6, [pc, #204]	; (80071c4 <_strtod_l+0x594>)
 80070f8:	ea4f 1828 	mov.w	r8, r8, asr #4
 80070fc:	4650      	mov	r0, sl
 80070fe:	4659      	mov	r1, fp
 8007100:	461d      	mov	r5, r3
 8007102:	f1b8 0f01 	cmp.w	r8, #1
 8007106:	dc21      	bgt.n	800714c <_strtod_l+0x51c>
 8007108:	b10b      	cbz	r3, 800710e <_strtod_l+0x4de>
 800710a:	4682      	mov	sl, r0
 800710c:	468b      	mov	fp, r1
 800710e:	4b2d      	ldr	r3, [pc, #180]	; (80071c4 <_strtod_l+0x594>)
 8007110:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007114:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007118:	4652      	mov	r2, sl
 800711a:	465b      	mov	r3, fp
 800711c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8007120:	f7f9 fa72 	bl	8000608 <__aeabi_dmul>
 8007124:	4b28      	ldr	r3, [pc, #160]	; (80071c8 <_strtod_l+0x598>)
 8007126:	460a      	mov	r2, r1
 8007128:	400b      	ands	r3, r1
 800712a:	4928      	ldr	r1, [pc, #160]	; (80071cc <_strtod_l+0x59c>)
 800712c:	428b      	cmp	r3, r1
 800712e:	4682      	mov	sl, r0
 8007130:	d898      	bhi.n	8007064 <_strtod_l+0x434>
 8007132:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007136:	428b      	cmp	r3, r1
 8007138:	bf86      	itte	hi
 800713a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80071d4 <_strtod_l+0x5a4>
 800713e:	f04f 3aff 	movhi.w	sl, #4294967295
 8007142:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007146:	2300      	movs	r3, #0
 8007148:	9304      	str	r3, [sp, #16]
 800714a:	e077      	b.n	800723c <_strtod_l+0x60c>
 800714c:	f018 0f01 	tst.w	r8, #1
 8007150:	d006      	beq.n	8007160 <_strtod_l+0x530>
 8007152:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8007156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800715a:	f7f9 fa55 	bl	8000608 <__aeabi_dmul>
 800715e:	2301      	movs	r3, #1
 8007160:	3501      	adds	r5, #1
 8007162:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007166:	e7cc      	b.n	8007102 <_strtod_l+0x4d2>
 8007168:	d0ed      	beq.n	8007146 <_strtod_l+0x516>
 800716a:	f1c8 0800 	rsb	r8, r8, #0
 800716e:	f018 020f 	ands.w	r2, r8, #15
 8007172:	d00a      	beq.n	800718a <_strtod_l+0x55a>
 8007174:	4b12      	ldr	r3, [pc, #72]	; (80071c0 <_strtod_l+0x590>)
 8007176:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800717a:	4650      	mov	r0, sl
 800717c:	4659      	mov	r1, fp
 800717e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007182:	f7f9 fb6b 	bl	800085c <__aeabi_ddiv>
 8007186:	4682      	mov	sl, r0
 8007188:	468b      	mov	fp, r1
 800718a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800718e:	d0da      	beq.n	8007146 <_strtod_l+0x516>
 8007190:	f1b8 0f1f 	cmp.w	r8, #31
 8007194:	dd20      	ble.n	80071d8 <_strtod_l+0x5a8>
 8007196:	2400      	movs	r4, #0
 8007198:	46a0      	mov	r8, r4
 800719a:	9407      	str	r4, [sp, #28]
 800719c:	9405      	str	r4, [sp, #20]
 800719e:	2322      	movs	r3, #34	; 0x22
 80071a0:	f04f 0a00 	mov.w	sl, #0
 80071a4:	f04f 0b00 	mov.w	fp, #0
 80071a8:	f8c9 3000 	str.w	r3, [r9]
 80071ac:	e765      	b.n	800707a <_strtod_l+0x44a>
 80071ae:	bf00      	nop
 80071b0:	0800a2cd 	.word	0x0800a2cd
 80071b4:	0800a353 	.word	0x0800a353
 80071b8:	0800a2d5 	.word	0x0800a2d5
 80071bc:	0800a314 	.word	0x0800a314
 80071c0:	0800a390 	.word	0x0800a390
 80071c4:	0800a368 	.word	0x0800a368
 80071c8:	7ff00000 	.word	0x7ff00000
 80071cc:	7ca00000 	.word	0x7ca00000
 80071d0:	fff80000 	.word	0xfff80000
 80071d4:	7fefffff 	.word	0x7fefffff
 80071d8:	f018 0310 	ands.w	r3, r8, #16
 80071dc:	bf18      	it	ne
 80071de:	236a      	movne	r3, #106	; 0x6a
 80071e0:	4da0      	ldr	r5, [pc, #640]	; (8007464 <_strtod_l+0x834>)
 80071e2:	9304      	str	r3, [sp, #16]
 80071e4:	4650      	mov	r0, sl
 80071e6:	4659      	mov	r1, fp
 80071e8:	2300      	movs	r3, #0
 80071ea:	f1b8 0f00 	cmp.w	r8, #0
 80071ee:	f300 810a 	bgt.w	8007406 <_strtod_l+0x7d6>
 80071f2:	b10b      	cbz	r3, 80071f8 <_strtod_l+0x5c8>
 80071f4:	4682      	mov	sl, r0
 80071f6:	468b      	mov	fp, r1
 80071f8:	9b04      	ldr	r3, [sp, #16]
 80071fa:	b1bb      	cbz	r3, 800722c <_strtod_l+0x5fc>
 80071fc:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8007200:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007204:	2b00      	cmp	r3, #0
 8007206:	4659      	mov	r1, fp
 8007208:	dd10      	ble.n	800722c <_strtod_l+0x5fc>
 800720a:	2b1f      	cmp	r3, #31
 800720c:	f340 8107 	ble.w	800741e <_strtod_l+0x7ee>
 8007210:	2b34      	cmp	r3, #52	; 0x34
 8007212:	bfde      	ittt	le
 8007214:	3b20      	suble	r3, #32
 8007216:	f04f 32ff 	movle.w	r2, #4294967295
 800721a:	fa02 f303 	lslle.w	r3, r2, r3
 800721e:	f04f 0a00 	mov.w	sl, #0
 8007222:	bfcc      	ite	gt
 8007224:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007228:	ea03 0b01 	andle.w	fp, r3, r1
 800722c:	2200      	movs	r2, #0
 800722e:	2300      	movs	r3, #0
 8007230:	4650      	mov	r0, sl
 8007232:	4659      	mov	r1, fp
 8007234:	f7f9 fc50 	bl	8000ad8 <__aeabi_dcmpeq>
 8007238:	2800      	cmp	r0, #0
 800723a:	d1ac      	bne.n	8007196 <_strtod_l+0x566>
 800723c:	9b07      	ldr	r3, [sp, #28]
 800723e:	9300      	str	r3, [sp, #0]
 8007240:	9a05      	ldr	r2, [sp, #20]
 8007242:	9908      	ldr	r1, [sp, #32]
 8007244:	4623      	mov	r3, r4
 8007246:	4648      	mov	r0, r9
 8007248:	f001 fdbd 	bl	8008dc6 <__s2b>
 800724c:	9007      	str	r0, [sp, #28]
 800724e:	2800      	cmp	r0, #0
 8007250:	f43f af08 	beq.w	8007064 <_strtod_l+0x434>
 8007254:	9a06      	ldr	r2, [sp, #24]
 8007256:	9b06      	ldr	r3, [sp, #24]
 8007258:	2a00      	cmp	r2, #0
 800725a:	f1c3 0300 	rsb	r3, r3, #0
 800725e:	bfa8      	it	ge
 8007260:	2300      	movge	r3, #0
 8007262:	930e      	str	r3, [sp, #56]	; 0x38
 8007264:	2400      	movs	r4, #0
 8007266:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800726a:	9316      	str	r3, [sp, #88]	; 0x58
 800726c:	46a0      	mov	r8, r4
 800726e:	9b07      	ldr	r3, [sp, #28]
 8007270:	4648      	mov	r0, r9
 8007272:	6859      	ldr	r1, [r3, #4]
 8007274:	f001 fd21 	bl	8008cba <_Balloc>
 8007278:	9005      	str	r0, [sp, #20]
 800727a:	2800      	cmp	r0, #0
 800727c:	f43f aef6 	beq.w	800706c <_strtod_l+0x43c>
 8007280:	9b07      	ldr	r3, [sp, #28]
 8007282:	691a      	ldr	r2, [r3, #16]
 8007284:	3202      	adds	r2, #2
 8007286:	f103 010c 	add.w	r1, r3, #12
 800728a:	0092      	lsls	r2, r2, #2
 800728c:	300c      	adds	r0, #12
 800728e:	f001 fd09 	bl	8008ca4 <memcpy>
 8007292:	aa1e      	add	r2, sp, #120	; 0x78
 8007294:	a91d      	add	r1, sp, #116	; 0x74
 8007296:	ec4b ab10 	vmov	d0, sl, fp
 800729a:	4648      	mov	r0, r9
 800729c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80072a0:	f002 f84c 	bl	800933c <__d2b>
 80072a4:	901c      	str	r0, [sp, #112]	; 0x70
 80072a6:	2800      	cmp	r0, #0
 80072a8:	f43f aee0 	beq.w	800706c <_strtod_l+0x43c>
 80072ac:	2101      	movs	r1, #1
 80072ae:	4648      	mov	r0, r9
 80072b0:	f001 fe15 	bl	8008ede <__i2b>
 80072b4:	4680      	mov	r8, r0
 80072b6:	2800      	cmp	r0, #0
 80072b8:	f43f aed8 	beq.w	800706c <_strtod_l+0x43c>
 80072bc:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80072be:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80072c0:	2e00      	cmp	r6, #0
 80072c2:	bfab      	itete	ge
 80072c4:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80072c6:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80072c8:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80072ca:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 80072cc:	bfac      	ite	ge
 80072ce:	18f7      	addge	r7, r6, r3
 80072d0:	1b9d      	sublt	r5, r3, r6
 80072d2:	9b04      	ldr	r3, [sp, #16]
 80072d4:	1af6      	subs	r6, r6, r3
 80072d6:	4416      	add	r6, r2
 80072d8:	4b63      	ldr	r3, [pc, #396]	; (8007468 <_strtod_l+0x838>)
 80072da:	3e01      	subs	r6, #1
 80072dc:	429e      	cmp	r6, r3
 80072de:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80072e2:	f280 80af 	bge.w	8007444 <_strtod_l+0x814>
 80072e6:	1b9b      	subs	r3, r3, r6
 80072e8:	2b1f      	cmp	r3, #31
 80072ea:	eba2 0203 	sub.w	r2, r2, r3
 80072ee:	f04f 0101 	mov.w	r1, #1
 80072f2:	f300 809b 	bgt.w	800742c <_strtod_l+0x7fc>
 80072f6:	fa01 f303 	lsl.w	r3, r1, r3
 80072fa:	930f      	str	r3, [sp, #60]	; 0x3c
 80072fc:	2300      	movs	r3, #0
 80072fe:	930a      	str	r3, [sp, #40]	; 0x28
 8007300:	18be      	adds	r6, r7, r2
 8007302:	9b04      	ldr	r3, [sp, #16]
 8007304:	42b7      	cmp	r7, r6
 8007306:	4415      	add	r5, r2
 8007308:	441d      	add	r5, r3
 800730a:	463b      	mov	r3, r7
 800730c:	bfa8      	it	ge
 800730e:	4633      	movge	r3, r6
 8007310:	42ab      	cmp	r3, r5
 8007312:	bfa8      	it	ge
 8007314:	462b      	movge	r3, r5
 8007316:	2b00      	cmp	r3, #0
 8007318:	bfc2      	ittt	gt
 800731a:	1af6      	subgt	r6, r6, r3
 800731c:	1aed      	subgt	r5, r5, r3
 800731e:	1aff      	subgt	r7, r7, r3
 8007320:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007322:	b1bb      	cbz	r3, 8007354 <_strtod_l+0x724>
 8007324:	4641      	mov	r1, r8
 8007326:	461a      	mov	r2, r3
 8007328:	4648      	mov	r0, r9
 800732a:	f001 fe77 	bl	800901c <__pow5mult>
 800732e:	4680      	mov	r8, r0
 8007330:	2800      	cmp	r0, #0
 8007332:	f43f ae9b 	beq.w	800706c <_strtod_l+0x43c>
 8007336:	4601      	mov	r1, r0
 8007338:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800733a:	4648      	mov	r0, r9
 800733c:	f001 fdd8 	bl	8008ef0 <__multiply>
 8007340:	900c      	str	r0, [sp, #48]	; 0x30
 8007342:	2800      	cmp	r0, #0
 8007344:	f43f ae92 	beq.w	800706c <_strtod_l+0x43c>
 8007348:	991c      	ldr	r1, [sp, #112]	; 0x70
 800734a:	4648      	mov	r0, r9
 800734c:	f001 fce9 	bl	8008d22 <_Bfree>
 8007350:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007352:	931c      	str	r3, [sp, #112]	; 0x70
 8007354:	2e00      	cmp	r6, #0
 8007356:	dc7a      	bgt.n	800744e <_strtod_l+0x81e>
 8007358:	9b06      	ldr	r3, [sp, #24]
 800735a:	2b00      	cmp	r3, #0
 800735c:	dd08      	ble.n	8007370 <_strtod_l+0x740>
 800735e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007360:	9905      	ldr	r1, [sp, #20]
 8007362:	4648      	mov	r0, r9
 8007364:	f001 fe5a 	bl	800901c <__pow5mult>
 8007368:	9005      	str	r0, [sp, #20]
 800736a:	2800      	cmp	r0, #0
 800736c:	f43f ae7e 	beq.w	800706c <_strtod_l+0x43c>
 8007370:	2d00      	cmp	r5, #0
 8007372:	dd08      	ble.n	8007386 <_strtod_l+0x756>
 8007374:	462a      	mov	r2, r5
 8007376:	9905      	ldr	r1, [sp, #20]
 8007378:	4648      	mov	r0, r9
 800737a:	f001 fe9d 	bl	80090b8 <__lshift>
 800737e:	9005      	str	r0, [sp, #20]
 8007380:	2800      	cmp	r0, #0
 8007382:	f43f ae73 	beq.w	800706c <_strtod_l+0x43c>
 8007386:	2f00      	cmp	r7, #0
 8007388:	dd08      	ble.n	800739c <_strtod_l+0x76c>
 800738a:	4641      	mov	r1, r8
 800738c:	463a      	mov	r2, r7
 800738e:	4648      	mov	r0, r9
 8007390:	f001 fe92 	bl	80090b8 <__lshift>
 8007394:	4680      	mov	r8, r0
 8007396:	2800      	cmp	r0, #0
 8007398:	f43f ae68 	beq.w	800706c <_strtod_l+0x43c>
 800739c:	9a05      	ldr	r2, [sp, #20]
 800739e:	991c      	ldr	r1, [sp, #112]	; 0x70
 80073a0:	4648      	mov	r0, r9
 80073a2:	f001 fef7 	bl	8009194 <__mdiff>
 80073a6:	4604      	mov	r4, r0
 80073a8:	2800      	cmp	r0, #0
 80073aa:	f43f ae5f 	beq.w	800706c <_strtod_l+0x43c>
 80073ae:	68c3      	ldr	r3, [r0, #12]
 80073b0:	930c      	str	r3, [sp, #48]	; 0x30
 80073b2:	2300      	movs	r3, #0
 80073b4:	60c3      	str	r3, [r0, #12]
 80073b6:	4641      	mov	r1, r8
 80073b8:	f001 fed2 	bl	8009160 <__mcmp>
 80073bc:	2800      	cmp	r0, #0
 80073be:	da55      	bge.n	800746c <_strtod_l+0x83c>
 80073c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80073c2:	b9e3      	cbnz	r3, 80073fe <_strtod_l+0x7ce>
 80073c4:	f1ba 0f00 	cmp.w	sl, #0
 80073c8:	d119      	bne.n	80073fe <_strtod_l+0x7ce>
 80073ca:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80073ce:	b9b3      	cbnz	r3, 80073fe <_strtod_l+0x7ce>
 80073d0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80073d4:	0d1b      	lsrs	r3, r3, #20
 80073d6:	051b      	lsls	r3, r3, #20
 80073d8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80073dc:	d90f      	bls.n	80073fe <_strtod_l+0x7ce>
 80073de:	6963      	ldr	r3, [r4, #20]
 80073e0:	b913      	cbnz	r3, 80073e8 <_strtod_l+0x7b8>
 80073e2:	6923      	ldr	r3, [r4, #16]
 80073e4:	2b01      	cmp	r3, #1
 80073e6:	dd0a      	ble.n	80073fe <_strtod_l+0x7ce>
 80073e8:	4621      	mov	r1, r4
 80073ea:	2201      	movs	r2, #1
 80073ec:	4648      	mov	r0, r9
 80073ee:	f001 fe63 	bl	80090b8 <__lshift>
 80073f2:	4641      	mov	r1, r8
 80073f4:	4604      	mov	r4, r0
 80073f6:	f001 feb3 	bl	8009160 <__mcmp>
 80073fa:	2800      	cmp	r0, #0
 80073fc:	dc67      	bgt.n	80074ce <_strtod_l+0x89e>
 80073fe:	9b04      	ldr	r3, [sp, #16]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d171      	bne.n	80074e8 <_strtod_l+0x8b8>
 8007404:	e63d      	b.n	8007082 <_strtod_l+0x452>
 8007406:	f018 0f01 	tst.w	r8, #1
 800740a:	d004      	beq.n	8007416 <_strtod_l+0x7e6>
 800740c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007410:	f7f9 f8fa 	bl	8000608 <__aeabi_dmul>
 8007414:	2301      	movs	r3, #1
 8007416:	ea4f 0868 	mov.w	r8, r8, asr #1
 800741a:	3508      	adds	r5, #8
 800741c:	e6e5      	b.n	80071ea <_strtod_l+0x5ba>
 800741e:	f04f 32ff 	mov.w	r2, #4294967295
 8007422:	fa02 f303 	lsl.w	r3, r2, r3
 8007426:	ea03 0a0a 	and.w	sl, r3, sl
 800742a:	e6ff      	b.n	800722c <_strtod_l+0x5fc>
 800742c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8007430:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8007434:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8007438:	36e2      	adds	r6, #226	; 0xe2
 800743a:	fa01 f306 	lsl.w	r3, r1, r6
 800743e:	930a      	str	r3, [sp, #40]	; 0x28
 8007440:	910f      	str	r1, [sp, #60]	; 0x3c
 8007442:	e75d      	b.n	8007300 <_strtod_l+0x6d0>
 8007444:	2300      	movs	r3, #0
 8007446:	930a      	str	r3, [sp, #40]	; 0x28
 8007448:	2301      	movs	r3, #1
 800744a:	930f      	str	r3, [sp, #60]	; 0x3c
 800744c:	e758      	b.n	8007300 <_strtod_l+0x6d0>
 800744e:	4632      	mov	r2, r6
 8007450:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007452:	4648      	mov	r0, r9
 8007454:	f001 fe30 	bl	80090b8 <__lshift>
 8007458:	901c      	str	r0, [sp, #112]	; 0x70
 800745a:	2800      	cmp	r0, #0
 800745c:	f47f af7c 	bne.w	8007358 <_strtod_l+0x728>
 8007460:	e604      	b.n	800706c <_strtod_l+0x43c>
 8007462:	bf00      	nop
 8007464:	0800a328 	.word	0x0800a328
 8007468:	fffffc02 	.word	0xfffffc02
 800746c:	465d      	mov	r5, fp
 800746e:	f040 8086 	bne.w	800757e <_strtod_l+0x94e>
 8007472:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007474:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007478:	b32a      	cbz	r2, 80074c6 <_strtod_l+0x896>
 800747a:	4aaf      	ldr	r2, [pc, #700]	; (8007738 <_strtod_l+0xb08>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d153      	bne.n	8007528 <_strtod_l+0x8f8>
 8007480:	9b04      	ldr	r3, [sp, #16]
 8007482:	4650      	mov	r0, sl
 8007484:	b1d3      	cbz	r3, 80074bc <_strtod_l+0x88c>
 8007486:	4aad      	ldr	r2, [pc, #692]	; (800773c <_strtod_l+0xb0c>)
 8007488:	402a      	ands	r2, r5
 800748a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800748e:	f04f 31ff 	mov.w	r1, #4294967295
 8007492:	d816      	bhi.n	80074c2 <_strtod_l+0x892>
 8007494:	0d12      	lsrs	r2, r2, #20
 8007496:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800749a:	fa01 f303 	lsl.w	r3, r1, r3
 800749e:	4298      	cmp	r0, r3
 80074a0:	d142      	bne.n	8007528 <_strtod_l+0x8f8>
 80074a2:	4ba7      	ldr	r3, [pc, #668]	; (8007740 <_strtod_l+0xb10>)
 80074a4:	429d      	cmp	r5, r3
 80074a6:	d102      	bne.n	80074ae <_strtod_l+0x87e>
 80074a8:	3001      	adds	r0, #1
 80074aa:	f43f addf 	beq.w	800706c <_strtod_l+0x43c>
 80074ae:	4ba3      	ldr	r3, [pc, #652]	; (800773c <_strtod_l+0xb0c>)
 80074b0:	402b      	ands	r3, r5
 80074b2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80074b6:	f04f 0a00 	mov.w	sl, #0
 80074ba:	e7a0      	b.n	80073fe <_strtod_l+0x7ce>
 80074bc:	f04f 33ff 	mov.w	r3, #4294967295
 80074c0:	e7ed      	b.n	800749e <_strtod_l+0x86e>
 80074c2:	460b      	mov	r3, r1
 80074c4:	e7eb      	b.n	800749e <_strtod_l+0x86e>
 80074c6:	bb7b      	cbnz	r3, 8007528 <_strtod_l+0x8f8>
 80074c8:	f1ba 0f00 	cmp.w	sl, #0
 80074cc:	d12c      	bne.n	8007528 <_strtod_l+0x8f8>
 80074ce:	9904      	ldr	r1, [sp, #16]
 80074d0:	4a9a      	ldr	r2, [pc, #616]	; (800773c <_strtod_l+0xb0c>)
 80074d2:	465b      	mov	r3, fp
 80074d4:	b1f1      	cbz	r1, 8007514 <_strtod_l+0x8e4>
 80074d6:	ea02 010b 	and.w	r1, r2, fp
 80074da:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80074de:	dc19      	bgt.n	8007514 <_strtod_l+0x8e4>
 80074e0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80074e4:	f77f ae5b 	ble.w	800719e <_strtod_l+0x56e>
 80074e8:	4a96      	ldr	r2, [pc, #600]	; (8007744 <_strtod_l+0xb14>)
 80074ea:	2300      	movs	r3, #0
 80074ec:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80074f0:	4650      	mov	r0, sl
 80074f2:	4659      	mov	r1, fp
 80074f4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80074f8:	f7f9 f886 	bl	8000608 <__aeabi_dmul>
 80074fc:	4682      	mov	sl, r0
 80074fe:	468b      	mov	fp, r1
 8007500:	2900      	cmp	r1, #0
 8007502:	f47f adbe 	bne.w	8007082 <_strtod_l+0x452>
 8007506:	2800      	cmp	r0, #0
 8007508:	f47f adbb 	bne.w	8007082 <_strtod_l+0x452>
 800750c:	2322      	movs	r3, #34	; 0x22
 800750e:	f8c9 3000 	str.w	r3, [r9]
 8007512:	e5b6      	b.n	8007082 <_strtod_l+0x452>
 8007514:	4013      	ands	r3, r2
 8007516:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800751a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800751e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007522:	f04f 3aff 	mov.w	sl, #4294967295
 8007526:	e76a      	b.n	80073fe <_strtod_l+0x7ce>
 8007528:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800752a:	b193      	cbz	r3, 8007552 <_strtod_l+0x922>
 800752c:	422b      	tst	r3, r5
 800752e:	f43f af66 	beq.w	80073fe <_strtod_l+0x7ce>
 8007532:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007534:	9a04      	ldr	r2, [sp, #16]
 8007536:	4650      	mov	r0, sl
 8007538:	4659      	mov	r1, fp
 800753a:	b173      	cbz	r3, 800755a <_strtod_l+0x92a>
 800753c:	f7ff fb5a 	bl	8006bf4 <sulp>
 8007540:	4602      	mov	r2, r0
 8007542:	460b      	mov	r3, r1
 8007544:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007548:	f7f8 fea8 	bl	800029c <__adddf3>
 800754c:	4682      	mov	sl, r0
 800754e:	468b      	mov	fp, r1
 8007550:	e755      	b.n	80073fe <_strtod_l+0x7ce>
 8007552:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007554:	ea13 0f0a 	tst.w	r3, sl
 8007558:	e7e9      	b.n	800752e <_strtod_l+0x8fe>
 800755a:	f7ff fb4b 	bl	8006bf4 <sulp>
 800755e:	4602      	mov	r2, r0
 8007560:	460b      	mov	r3, r1
 8007562:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007566:	f7f8 fe97 	bl	8000298 <__aeabi_dsub>
 800756a:	2200      	movs	r2, #0
 800756c:	2300      	movs	r3, #0
 800756e:	4682      	mov	sl, r0
 8007570:	468b      	mov	fp, r1
 8007572:	f7f9 fab1 	bl	8000ad8 <__aeabi_dcmpeq>
 8007576:	2800      	cmp	r0, #0
 8007578:	f47f ae11 	bne.w	800719e <_strtod_l+0x56e>
 800757c:	e73f      	b.n	80073fe <_strtod_l+0x7ce>
 800757e:	4641      	mov	r1, r8
 8007580:	4620      	mov	r0, r4
 8007582:	f001 ff2a 	bl	80093da <__ratio>
 8007586:	ec57 6b10 	vmov	r6, r7, d0
 800758a:	2200      	movs	r2, #0
 800758c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007590:	ee10 0a10 	vmov	r0, s0
 8007594:	4639      	mov	r1, r7
 8007596:	f7f9 fab3 	bl	8000b00 <__aeabi_dcmple>
 800759a:	2800      	cmp	r0, #0
 800759c:	d077      	beq.n	800768e <_strtod_l+0xa5e>
 800759e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d04a      	beq.n	800763a <_strtod_l+0xa0a>
 80075a4:	4b68      	ldr	r3, [pc, #416]	; (8007748 <_strtod_l+0xb18>)
 80075a6:	2200      	movs	r2, #0
 80075a8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80075ac:	4f66      	ldr	r7, [pc, #408]	; (8007748 <_strtod_l+0xb18>)
 80075ae:	2600      	movs	r6, #0
 80075b0:	4b62      	ldr	r3, [pc, #392]	; (800773c <_strtod_l+0xb0c>)
 80075b2:	402b      	ands	r3, r5
 80075b4:	930f      	str	r3, [sp, #60]	; 0x3c
 80075b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80075b8:	4b64      	ldr	r3, [pc, #400]	; (800774c <_strtod_l+0xb1c>)
 80075ba:	429a      	cmp	r2, r3
 80075bc:	f040 80ce 	bne.w	800775c <_strtod_l+0xb2c>
 80075c0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80075c4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80075c8:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 80075cc:	ec4b ab10 	vmov	d0, sl, fp
 80075d0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80075d4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80075d8:	f001 fe3a 	bl	8009250 <__ulp>
 80075dc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80075e0:	ec53 2b10 	vmov	r2, r3, d0
 80075e4:	f7f9 f810 	bl	8000608 <__aeabi_dmul>
 80075e8:	4652      	mov	r2, sl
 80075ea:	465b      	mov	r3, fp
 80075ec:	f7f8 fe56 	bl	800029c <__adddf3>
 80075f0:	460b      	mov	r3, r1
 80075f2:	4952      	ldr	r1, [pc, #328]	; (800773c <_strtod_l+0xb0c>)
 80075f4:	4a56      	ldr	r2, [pc, #344]	; (8007750 <_strtod_l+0xb20>)
 80075f6:	4019      	ands	r1, r3
 80075f8:	4291      	cmp	r1, r2
 80075fa:	4682      	mov	sl, r0
 80075fc:	d95b      	bls.n	80076b6 <_strtod_l+0xa86>
 80075fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007600:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007604:	4293      	cmp	r3, r2
 8007606:	d103      	bne.n	8007610 <_strtod_l+0x9e0>
 8007608:	9b08      	ldr	r3, [sp, #32]
 800760a:	3301      	adds	r3, #1
 800760c:	f43f ad2e 	beq.w	800706c <_strtod_l+0x43c>
 8007610:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8007740 <_strtod_l+0xb10>
 8007614:	f04f 3aff 	mov.w	sl, #4294967295
 8007618:	991c      	ldr	r1, [sp, #112]	; 0x70
 800761a:	4648      	mov	r0, r9
 800761c:	f001 fb81 	bl	8008d22 <_Bfree>
 8007620:	9905      	ldr	r1, [sp, #20]
 8007622:	4648      	mov	r0, r9
 8007624:	f001 fb7d 	bl	8008d22 <_Bfree>
 8007628:	4641      	mov	r1, r8
 800762a:	4648      	mov	r0, r9
 800762c:	f001 fb79 	bl	8008d22 <_Bfree>
 8007630:	4621      	mov	r1, r4
 8007632:	4648      	mov	r0, r9
 8007634:	f001 fb75 	bl	8008d22 <_Bfree>
 8007638:	e619      	b.n	800726e <_strtod_l+0x63e>
 800763a:	f1ba 0f00 	cmp.w	sl, #0
 800763e:	d11a      	bne.n	8007676 <_strtod_l+0xa46>
 8007640:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007644:	b9eb      	cbnz	r3, 8007682 <_strtod_l+0xa52>
 8007646:	2200      	movs	r2, #0
 8007648:	4b3f      	ldr	r3, [pc, #252]	; (8007748 <_strtod_l+0xb18>)
 800764a:	4630      	mov	r0, r6
 800764c:	4639      	mov	r1, r7
 800764e:	f7f9 fa4d 	bl	8000aec <__aeabi_dcmplt>
 8007652:	b9c8      	cbnz	r0, 8007688 <_strtod_l+0xa58>
 8007654:	4630      	mov	r0, r6
 8007656:	4639      	mov	r1, r7
 8007658:	2200      	movs	r2, #0
 800765a:	4b3e      	ldr	r3, [pc, #248]	; (8007754 <_strtod_l+0xb24>)
 800765c:	f7f8 ffd4 	bl	8000608 <__aeabi_dmul>
 8007660:	4606      	mov	r6, r0
 8007662:	460f      	mov	r7, r1
 8007664:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8007668:	9618      	str	r6, [sp, #96]	; 0x60
 800766a:	9319      	str	r3, [sp, #100]	; 0x64
 800766c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8007670:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007674:	e79c      	b.n	80075b0 <_strtod_l+0x980>
 8007676:	f1ba 0f01 	cmp.w	sl, #1
 800767a:	d102      	bne.n	8007682 <_strtod_l+0xa52>
 800767c:	2d00      	cmp	r5, #0
 800767e:	f43f ad8e 	beq.w	800719e <_strtod_l+0x56e>
 8007682:	2200      	movs	r2, #0
 8007684:	4b34      	ldr	r3, [pc, #208]	; (8007758 <_strtod_l+0xb28>)
 8007686:	e78f      	b.n	80075a8 <_strtod_l+0x978>
 8007688:	2600      	movs	r6, #0
 800768a:	4f32      	ldr	r7, [pc, #200]	; (8007754 <_strtod_l+0xb24>)
 800768c:	e7ea      	b.n	8007664 <_strtod_l+0xa34>
 800768e:	4b31      	ldr	r3, [pc, #196]	; (8007754 <_strtod_l+0xb24>)
 8007690:	4630      	mov	r0, r6
 8007692:	4639      	mov	r1, r7
 8007694:	2200      	movs	r2, #0
 8007696:	f7f8 ffb7 	bl	8000608 <__aeabi_dmul>
 800769a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800769c:	4606      	mov	r6, r0
 800769e:	460f      	mov	r7, r1
 80076a0:	b933      	cbnz	r3, 80076b0 <_strtod_l+0xa80>
 80076a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80076a6:	9010      	str	r0, [sp, #64]	; 0x40
 80076a8:	9311      	str	r3, [sp, #68]	; 0x44
 80076aa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80076ae:	e7df      	b.n	8007670 <_strtod_l+0xa40>
 80076b0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80076b4:	e7f9      	b.n	80076aa <_strtod_l+0xa7a>
 80076b6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80076ba:	9b04      	ldr	r3, [sp, #16]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d1ab      	bne.n	8007618 <_strtod_l+0x9e8>
 80076c0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80076c4:	0d1b      	lsrs	r3, r3, #20
 80076c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80076c8:	051b      	lsls	r3, r3, #20
 80076ca:	429a      	cmp	r2, r3
 80076cc:	465d      	mov	r5, fp
 80076ce:	d1a3      	bne.n	8007618 <_strtod_l+0x9e8>
 80076d0:	4639      	mov	r1, r7
 80076d2:	4630      	mov	r0, r6
 80076d4:	f7f9 fa48 	bl	8000b68 <__aeabi_d2iz>
 80076d8:	f7f8 ff2c 	bl	8000534 <__aeabi_i2d>
 80076dc:	460b      	mov	r3, r1
 80076de:	4602      	mov	r2, r0
 80076e0:	4639      	mov	r1, r7
 80076e2:	4630      	mov	r0, r6
 80076e4:	f7f8 fdd8 	bl	8000298 <__aeabi_dsub>
 80076e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80076ea:	4606      	mov	r6, r0
 80076ec:	460f      	mov	r7, r1
 80076ee:	b933      	cbnz	r3, 80076fe <_strtod_l+0xace>
 80076f0:	f1ba 0f00 	cmp.w	sl, #0
 80076f4:	d103      	bne.n	80076fe <_strtod_l+0xace>
 80076f6:	f3cb 0513 	ubfx	r5, fp, #0, #20
 80076fa:	2d00      	cmp	r5, #0
 80076fc:	d06d      	beq.n	80077da <_strtod_l+0xbaa>
 80076fe:	a30a      	add	r3, pc, #40	; (adr r3, 8007728 <_strtod_l+0xaf8>)
 8007700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007704:	4630      	mov	r0, r6
 8007706:	4639      	mov	r1, r7
 8007708:	f7f9 f9f0 	bl	8000aec <__aeabi_dcmplt>
 800770c:	2800      	cmp	r0, #0
 800770e:	f47f acb8 	bne.w	8007082 <_strtod_l+0x452>
 8007712:	a307      	add	r3, pc, #28	; (adr r3, 8007730 <_strtod_l+0xb00>)
 8007714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007718:	4630      	mov	r0, r6
 800771a:	4639      	mov	r1, r7
 800771c:	f7f9 fa04 	bl	8000b28 <__aeabi_dcmpgt>
 8007720:	2800      	cmp	r0, #0
 8007722:	f43f af79 	beq.w	8007618 <_strtod_l+0x9e8>
 8007726:	e4ac      	b.n	8007082 <_strtod_l+0x452>
 8007728:	94a03595 	.word	0x94a03595
 800772c:	3fdfffff 	.word	0x3fdfffff
 8007730:	35afe535 	.word	0x35afe535
 8007734:	3fe00000 	.word	0x3fe00000
 8007738:	000fffff 	.word	0x000fffff
 800773c:	7ff00000 	.word	0x7ff00000
 8007740:	7fefffff 	.word	0x7fefffff
 8007744:	39500000 	.word	0x39500000
 8007748:	3ff00000 	.word	0x3ff00000
 800774c:	7fe00000 	.word	0x7fe00000
 8007750:	7c9fffff 	.word	0x7c9fffff
 8007754:	3fe00000 	.word	0x3fe00000
 8007758:	bff00000 	.word	0xbff00000
 800775c:	9b04      	ldr	r3, [sp, #16]
 800775e:	b333      	cbz	r3, 80077ae <_strtod_l+0xb7e>
 8007760:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007762:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007766:	d822      	bhi.n	80077ae <_strtod_l+0xb7e>
 8007768:	a327      	add	r3, pc, #156	; (adr r3, 8007808 <_strtod_l+0xbd8>)
 800776a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800776e:	4630      	mov	r0, r6
 8007770:	4639      	mov	r1, r7
 8007772:	f7f9 f9c5 	bl	8000b00 <__aeabi_dcmple>
 8007776:	b1a0      	cbz	r0, 80077a2 <_strtod_l+0xb72>
 8007778:	4639      	mov	r1, r7
 800777a:	4630      	mov	r0, r6
 800777c:	f7f9 fa1c 	bl	8000bb8 <__aeabi_d2uiz>
 8007780:	2800      	cmp	r0, #0
 8007782:	bf08      	it	eq
 8007784:	2001      	moveq	r0, #1
 8007786:	f7f8 fec5 	bl	8000514 <__aeabi_ui2d>
 800778a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800778c:	4606      	mov	r6, r0
 800778e:	460f      	mov	r7, r1
 8007790:	bb03      	cbnz	r3, 80077d4 <_strtod_l+0xba4>
 8007792:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007796:	9012      	str	r0, [sp, #72]	; 0x48
 8007798:	9313      	str	r3, [sp, #76]	; 0x4c
 800779a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800779e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80077a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077a4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80077a6:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80077aa:	1a9b      	subs	r3, r3, r2
 80077ac:	930b      	str	r3, [sp, #44]	; 0x2c
 80077ae:	ed9d 0b08 	vldr	d0, [sp, #32]
 80077b2:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80077b6:	f001 fd4b 	bl	8009250 <__ulp>
 80077ba:	4650      	mov	r0, sl
 80077bc:	ec53 2b10 	vmov	r2, r3, d0
 80077c0:	4659      	mov	r1, fp
 80077c2:	f7f8 ff21 	bl	8000608 <__aeabi_dmul>
 80077c6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80077ca:	f7f8 fd67 	bl	800029c <__adddf3>
 80077ce:	4682      	mov	sl, r0
 80077d0:	468b      	mov	fp, r1
 80077d2:	e772      	b.n	80076ba <_strtod_l+0xa8a>
 80077d4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80077d8:	e7df      	b.n	800779a <_strtod_l+0xb6a>
 80077da:	a30d      	add	r3, pc, #52	; (adr r3, 8007810 <_strtod_l+0xbe0>)
 80077dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e0:	f7f9 f984 	bl	8000aec <__aeabi_dcmplt>
 80077e4:	e79c      	b.n	8007720 <_strtod_l+0xaf0>
 80077e6:	2300      	movs	r3, #0
 80077e8:	930d      	str	r3, [sp, #52]	; 0x34
 80077ea:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80077ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80077ee:	6013      	str	r3, [r2, #0]
 80077f0:	f7ff ba61 	b.w	8006cb6 <_strtod_l+0x86>
 80077f4:	2b65      	cmp	r3, #101	; 0x65
 80077f6:	f04f 0200 	mov.w	r2, #0
 80077fa:	f43f ab4e 	beq.w	8006e9a <_strtod_l+0x26a>
 80077fe:	2101      	movs	r1, #1
 8007800:	4614      	mov	r4, r2
 8007802:	9104      	str	r1, [sp, #16]
 8007804:	f7ff bacb 	b.w	8006d9e <_strtod_l+0x16e>
 8007808:	ffc00000 	.word	0xffc00000
 800780c:	41dfffff 	.word	0x41dfffff
 8007810:	94a03595 	.word	0x94a03595
 8007814:	3fcfffff 	.word	0x3fcfffff

08007818 <_strtod_r>:
 8007818:	4b05      	ldr	r3, [pc, #20]	; (8007830 <_strtod_r+0x18>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	b410      	push	{r4}
 800781e:	6a1b      	ldr	r3, [r3, #32]
 8007820:	4c04      	ldr	r4, [pc, #16]	; (8007834 <_strtod_r+0x1c>)
 8007822:	2b00      	cmp	r3, #0
 8007824:	bf08      	it	eq
 8007826:	4623      	moveq	r3, r4
 8007828:	f85d 4b04 	ldr.w	r4, [sp], #4
 800782c:	f7ff ba00 	b.w	8006c30 <_strtod_l>
 8007830:	2000022c 	.word	0x2000022c
 8007834:	20000290 	.word	0x20000290

08007838 <_strtol_l.isra.0>:
 8007838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800783c:	4680      	mov	r8, r0
 800783e:	4689      	mov	r9, r1
 8007840:	4692      	mov	sl, r2
 8007842:	461e      	mov	r6, r3
 8007844:	460f      	mov	r7, r1
 8007846:	463d      	mov	r5, r7
 8007848:	9808      	ldr	r0, [sp, #32]
 800784a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800784e:	f001 f9ed 	bl	8008c2c <__locale_ctype_ptr_l>
 8007852:	4420      	add	r0, r4
 8007854:	7843      	ldrb	r3, [r0, #1]
 8007856:	f013 0308 	ands.w	r3, r3, #8
 800785a:	d132      	bne.n	80078c2 <_strtol_l.isra.0+0x8a>
 800785c:	2c2d      	cmp	r4, #45	; 0x2d
 800785e:	d132      	bne.n	80078c6 <_strtol_l.isra.0+0x8e>
 8007860:	787c      	ldrb	r4, [r7, #1]
 8007862:	1cbd      	adds	r5, r7, #2
 8007864:	2201      	movs	r2, #1
 8007866:	2e00      	cmp	r6, #0
 8007868:	d05d      	beq.n	8007926 <_strtol_l.isra.0+0xee>
 800786a:	2e10      	cmp	r6, #16
 800786c:	d109      	bne.n	8007882 <_strtol_l.isra.0+0x4a>
 800786e:	2c30      	cmp	r4, #48	; 0x30
 8007870:	d107      	bne.n	8007882 <_strtol_l.isra.0+0x4a>
 8007872:	782b      	ldrb	r3, [r5, #0]
 8007874:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007878:	2b58      	cmp	r3, #88	; 0x58
 800787a:	d14f      	bne.n	800791c <_strtol_l.isra.0+0xe4>
 800787c:	786c      	ldrb	r4, [r5, #1]
 800787e:	2610      	movs	r6, #16
 8007880:	3502      	adds	r5, #2
 8007882:	2a00      	cmp	r2, #0
 8007884:	bf14      	ite	ne
 8007886:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800788a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800788e:	2700      	movs	r7, #0
 8007890:	fbb1 fcf6 	udiv	ip, r1, r6
 8007894:	4638      	mov	r0, r7
 8007896:	fb06 1e1c 	mls	lr, r6, ip, r1
 800789a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800789e:	2b09      	cmp	r3, #9
 80078a0:	d817      	bhi.n	80078d2 <_strtol_l.isra.0+0x9a>
 80078a2:	461c      	mov	r4, r3
 80078a4:	42a6      	cmp	r6, r4
 80078a6:	dd23      	ble.n	80078f0 <_strtol_l.isra.0+0xb8>
 80078a8:	1c7b      	adds	r3, r7, #1
 80078aa:	d007      	beq.n	80078bc <_strtol_l.isra.0+0x84>
 80078ac:	4584      	cmp	ip, r0
 80078ae:	d31c      	bcc.n	80078ea <_strtol_l.isra.0+0xb2>
 80078b0:	d101      	bne.n	80078b6 <_strtol_l.isra.0+0x7e>
 80078b2:	45a6      	cmp	lr, r4
 80078b4:	db19      	blt.n	80078ea <_strtol_l.isra.0+0xb2>
 80078b6:	fb00 4006 	mla	r0, r0, r6, r4
 80078ba:	2701      	movs	r7, #1
 80078bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80078c0:	e7eb      	b.n	800789a <_strtol_l.isra.0+0x62>
 80078c2:	462f      	mov	r7, r5
 80078c4:	e7bf      	b.n	8007846 <_strtol_l.isra.0+0xe>
 80078c6:	2c2b      	cmp	r4, #43	; 0x2b
 80078c8:	bf04      	itt	eq
 80078ca:	1cbd      	addeq	r5, r7, #2
 80078cc:	787c      	ldrbeq	r4, [r7, #1]
 80078ce:	461a      	mov	r2, r3
 80078d0:	e7c9      	b.n	8007866 <_strtol_l.isra.0+0x2e>
 80078d2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80078d6:	2b19      	cmp	r3, #25
 80078d8:	d801      	bhi.n	80078de <_strtol_l.isra.0+0xa6>
 80078da:	3c37      	subs	r4, #55	; 0x37
 80078dc:	e7e2      	b.n	80078a4 <_strtol_l.isra.0+0x6c>
 80078de:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80078e2:	2b19      	cmp	r3, #25
 80078e4:	d804      	bhi.n	80078f0 <_strtol_l.isra.0+0xb8>
 80078e6:	3c57      	subs	r4, #87	; 0x57
 80078e8:	e7dc      	b.n	80078a4 <_strtol_l.isra.0+0x6c>
 80078ea:	f04f 37ff 	mov.w	r7, #4294967295
 80078ee:	e7e5      	b.n	80078bc <_strtol_l.isra.0+0x84>
 80078f0:	1c7b      	adds	r3, r7, #1
 80078f2:	d108      	bne.n	8007906 <_strtol_l.isra.0+0xce>
 80078f4:	2322      	movs	r3, #34	; 0x22
 80078f6:	f8c8 3000 	str.w	r3, [r8]
 80078fa:	4608      	mov	r0, r1
 80078fc:	f1ba 0f00 	cmp.w	sl, #0
 8007900:	d107      	bne.n	8007912 <_strtol_l.isra.0+0xda>
 8007902:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007906:	b102      	cbz	r2, 800790a <_strtol_l.isra.0+0xd2>
 8007908:	4240      	negs	r0, r0
 800790a:	f1ba 0f00 	cmp.w	sl, #0
 800790e:	d0f8      	beq.n	8007902 <_strtol_l.isra.0+0xca>
 8007910:	b10f      	cbz	r7, 8007916 <_strtol_l.isra.0+0xde>
 8007912:	f105 39ff 	add.w	r9, r5, #4294967295
 8007916:	f8ca 9000 	str.w	r9, [sl]
 800791a:	e7f2      	b.n	8007902 <_strtol_l.isra.0+0xca>
 800791c:	2430      	movs	r4, #48	; 0x30
 800791e:	2e00      	cmp	r6, #0
 8007920:	d1af      	bne.n	8007882 <_strtol_l.isra.0+0x4a>
 8007922:	2608      	movs	r6, #8
 8007924:	e7ad      	b.n	8007882 <_strtol_l.isra.0+0x4a>
 8007926:	2c30      	cmp	r4, #48	; 0x30
 8007928:	d0a3      	beq.n	8007872 <_strtol_l.isra.0+0x3a>
 800792a:	260a      	movs	r6, #10
 800792c:	e7a9      	b.n	8007882 <_strtol_l.isra.0+0x4a>
	...

08007930 <_strtol_r>:
 8007930:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007932:	4c06      	ldr	r4, [pc, #24]	; (800794c <_strtol_r+0x1c>)
 8007934:	4d06      	ldr	r5, [pc, #24]	; (8007950 <_strtol_r+0x20>)
 8007936:	6824      	ldr	r4, [r4, #0]
 8007938:	6a24      	ldr	r4, [r4, #32]
 800793a:	2c00      	cmp	r4, #0
 800793c:	bf08      	it	eq
 800793e:	462c      	moveq	r4, r5
 8007940:	9400      	str	r4, [sp, #0]
 8007942:	f7ff ff79 	bl	8007838 <_strtol_l.isra.0>
 8007946:	b003      	add	sp, #12
 8007948:	bd30      	pop	{r4, r5, pc}
 800794a:	bf00      	nop
 800794c:	2000022c 	.word	0x2000022c
 8007950:	20000290 	.word	0x20000290

08007954 <quorem>:
 8007954:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007958:	6903      	ldr	r3, [r0, #16]
 800795a:	690c      	ldr	r4, [r1, #16]
 800795c:	42a3      	cmp	r3, r4
 800795e:	4680      	mov	r8, r0
 8007960:	f2c0 8082 	blt.w	8007a68 <quorem+0x114>
 8007964:	3c01      	subs	r4, #1
 8007966:	f101 0714 	add.w	r7, r1, #20
 800796a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800796e:	f100 0614 	add.w	r6, r0, #20
 8007972:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8007976:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800797a:	eb06 030c 	add.w	r3, r6, ip
 800797e:	3501      	adds	r5, #1
 8007980:	eb07 090c 	add.w	r9, r7, ip
 8007984:	9301      	str	r3, [sp, #4]
 8007986:	fbb0 f5f5 	udiv	r5, r0, r5
 800798a:	b395      	cbz	r5, 80079f2 <quorem+0x9e>
 800798c:	f04f 0a00 	mov.w	sl, #0
 8007990:	4638      	mov	r0, r7
 8007992:	46b6      	mov	lr, r6
 8007994:	46d3      	mov	fp, sl
 8007996:	f850 2b04 	ldr.w	r2, [r0], #4
 800799a:	b293      	uxth	r3, r2
 800799c:	fb05 a303 	mla	r3, r5, r3, sl
 80079a0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80079a4:	b29b      	uxth	r3, r3
 80079a6:	ebab 0303 	sub.w	r3, fp, r3
 80079aa:	0c12      	lsrs	r2, r2, #16
 80079ac:	f8de b000 	ldr.w	fp, [lr]
 80079b0:	fb05 a202 	mla	r2, r5, r2, sl
 80079b4:	fa13 f38b 	uxtah	r3, r3, fp
 80079b8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80079bc:	fa1f fb82 	uxth.w	fp, r2
 80079c0:	f8de 2000 	ldr.w	r2, [lr]
 80079c4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80079c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80079cc:	b29b      	uxth	r3, r3
 80079ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80079d2:	4581      	cmp	r9, r0
 80079d4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80079d8:	f84e 3b04 	str.w	r3, [lr], #4
 80079dc:	d2db      	bcs.n	8007996 <quorem+0x42>
 80079de:	f856 300c 	ldr.w	r3, [r6, ip]
 80079e2:	b933      	cbnz	r3, 80079f2 <quorem+0x9e>
 80079e4:	9b01      	ldr	r3, [sp, #4]
 80079e6:	3b04      	subs	r3, #4
 80079e8:	429e      	cmp	r6, r3
 80079ea:	461a      	mov	r2, r3
 80079ec:	d330      	bcc.n	8007a50 <quorem+0xfc>
 80079ee:	f8c8 4010 	str.w	r4, [r8, #16]
 80079f2:	4640      	mov	r0, r8
 80079f4:	f001 fbb4 	bl	8009160 <__mcmp>
 80079f8:	2800      	cmp	r0, #0
 80079fa:	db25      	blt.n	8007a48 <quorem+0xf4>
 80079fc:	3501      	adds	r5, #1
 80079fe:	4630      	mov	r0, r6
 8007a00:	f04f 0c00 	mov.w	ip, #0
 8007a04:	f857 2b04 	ldr.w	r2, [r7], #4
 8007a08:	f8d0 e000 	ldr.w	lr, [r0]
 8007a0c:	b293      	uxth	r3, r2
 8007a0e:	ebac 0303 	sub.w	r3, ip, r3
 8007a12:	0c12      	lsrs	r2, r2, #16
 8007a14:	fa13 f38e 	uxtah	r3, r3, lr
 8007a18:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007a1c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007a20:	b29b      	uxth	r3, r3
 8007a22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a26:	45b9      	cmp	r9, r7
 8007a28:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007a2c:	f840 3b04 	str.w	r3, [r0], #4
 8007a30:	d2e8      	bcs.n	8007a04 <quorem+0xb0>
 8007a32:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8007a36:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8007a3a:	b92a      	cbnz	r2, 8007a48 <quorem+0xf4>
 8007a3c:	3b04      	subs	r3, #4
 8007a3e:	429e      	cmp	r6, r3
 8007a40:	461a      	mov	r2, r3
 8007a42:	d30b      	bcc.n	8007a5c <quorem+0x108>
 8007a44:	f8c8 4010 	str.w	r4, [r8, #16]
 8007a48:	4628      	mov	r0, r5
 8007a4a:	b003      	add	sp, #12
 8007a4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a50:	6812      	ldr	r2, [r2, #0]
 8007a52:	3b04      	subs	r3, #4
 8007a54:	2a00      	cmp	r2, #0
 8007a56:	d1ca      	bne.n	80079ee <quorem+0x9a>
 8007a58:	3c01      	subs	r4, #1
 8007a5a:	e7c5      	b.n	80079e8 <quorem+0x94>
 8007a5c:	6812      	ldr	r2, [r2, #0]
 8007a5e:	3b04      	subs	r3, #4
 8007a60:	2a00      	cmp	r2, #0
 8007a62:	d1ef      	bne.n	8007a44 <quorem+0xf0>
 8007a64:	3c01      	subs	r4, #1
 8007a66:	e7ea      	b.n	8007a3e <quorem+0xea>
 8007a68:	2000      	movs	r0, #0
 8007a6a:	e7ee      	b.n	8007a4a <quorem+0xf6>
 8007a6c:	0000      	movs	r0, r0
	...

08007a70 <_dtoa_r>:
 8007a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a74:	ec57 6b10 	vmov	r6, r7, d0
 8007a78:	b097      	sub	sp, #92	; 0x5c
 8007a7a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007a7c:	9106      	str	r1, [sp, #24]
 8007a7e:	4604      	mov	r4, r0
 8007a80:	920b      	str	r2, [sp, #44]	; 0x2c
 8007a82:	9312      	str	r3, [sp, #72]	; 0x48
 8007a84:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007a88:	e9cd 6700 	strd	r6, r7, [sp]
 8007a8c:	b93d      	cbnz	r5, 8007a9e <_dtoa_r+0x2e>
 8007a8e:	2010      	movs	r0, #16
 8007a90:	f001 f8ee 	bl	8008c70 <malloc>
 8007a94:	6260      	str	r0, [r4, #36]	; 0x24
 8007a96:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007a9a:	6005      	str	r5, [r0, #0]
 8007a9c:	60c5      	str	r5, [r0, #12]
 8007a9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007aa0:	6819      	ldr	r1, [r3, #0]
 8007aa2:	b151      	cbz	r1, 8007aba <_dtoa_r+0x4a>
 8007aa4:	685a      	ldr	r2, [r3, #4]
 8007aa6:	604a      	str	r2, [r1, #4]
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	4093      	lsls	r3, r2
 8007aac:	608b      	str	r3, [r1, #8]
 8007aae:	4620      	mov	r0, r4
 8007ab0:	f001 f937 	bl	8008d22 <_Bfree>
 8007ab4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	601a      	str	r2, [r3, #0]
 8007aba:	1e3b      	subs	r3, r7, #0
 8007abc:	bfbb      	ittet	lt
 8007abe:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007ac2:	9301      	strlt	r3, [sp, #4]
 8007ac4:	2300      	movge	r3, #0
 8007ac6:	2201      	movlt	r2, #1
 8007ac8:	bfac      	ite	ge
 8007aca:	f8c8 3000 	strge.w	r3, [r8]
 8007ace:	f8c8 2000 	strlt.w	r2, [r8]
 8007ad2:	4baf      	ldr	r3, [pc, #700]	; (8007d90 <_dtoa_r+0x320>)
 8007ad4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007ad8:	ea33 0308 	bics.w	r3, r3, r8
 8007adc:	d114      	bne.n	8007b08 <_dtoa_r+0x98>
 8007ade:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007ae0:	f242 730f 	movw	r3, #9999	; 0x270f
 8007ae4:	6013      	str	r3, [r2, #0]
 8007ae6:	9b00      	ldr	r3, [sp, #0]
 8007ae8:	b923      	cbnz	r3, 8007af4 <_dtoa_r+0x84>
 8007aea:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8007aee:	2800      	cmp	r0, #0
 8007af0:	f000 8542 	beq.w	8008578 <_dtoa_r+0xb08>
 8007af4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007af6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8007da4 <_dtoa_r+0x334>
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	f000 8544 	beq.w	8008588 <_dtoa_r+0xb18>
 8007b00:	f10b 0303 	add.w	r3, fp, #3
 8007b04:	f000 bd3e 	b.w	8008584 <_dtoa_r+0xb14>
 8007b08:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	2300      	movs	r3, #0
 8007b10:	4630      	mov	r0, r6
 8007b12:	4639      	mov	r1, r7
 8007b14:	f7f8 ffe0 	bl	8000ad8 <__aeabi_dcmpeq>
 8007b18:	4681      	mov	r9, r0
 8007b1a:	b168      	cbz	r0, 8007b38 <_dtoa_r+0xc8>
 8007b1c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007b1e:	2301      	movs	r3, #1
 8007b20:	6013      	str	r3, [r2, #0]
 8007b22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	f000 8524 	beq.w	8008572 <_dtoa_r+0xb02>
 8007b2a:	4b9a      	ldr	r3, [pc, #616]	; (8007d94 <_dtoa_r+0x324>)
 8007b2c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007b2e:	f103 3bff 	add.w	fp, r3, #4294967295
 8007b32:	6013      	str	r3, [r2, #0]
 8007b34:	f000 bd28 	b.w	8008588 <_dtoa_r+0xb18>
 8007b38:	aa14      	add	r2, sp, #80	; 0x50
 8007b3a:	a915      	add	r1, sp, #84	; 0x54
 8007b3c:	ec47 6b10 	vmov	d0, r6, r7
 8007b40:	4620      	mov	r0, r4
 8007b42:	f001 fbfb 	bl	800933c <__d2b>
 8007b46:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007b4a:	9004      	str	r0, [sp, #16]
 8007b4c:	2d00      	cmp	r5, #0
 8007b4e:	d07c      	beq.n	8007c4a <_dtoa_r+0x1da>
 8007b50:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007b54:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8007b58:	46b2      	mov	sl, r6
 8007b5a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8007b5e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007b62:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8007b66:	2200      	movs	r2, #0
 8007b68:	4b8b      	ldr	r3, [pc, #556]	; (8007d98 <_dtoa_r+0x328>)
 8007b6a:	4650      	mov	r0, sl
 8007b6c:	4659      	mov	r1, fp
 8007b6e:	f7f8 fb93 	bl	8000298 <__aeabi_dsub>
 8007b72:	a381      	add	r3, pc, #516	; (adr r3, 8007d78 <_dtoa_r+0x308>)
 8007b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b78:	f7f8 fd46 	bl	8000608 <__aeabi_dmul>
 8007b7c:	a380      	add	r3, pc, #512	; (adr r3, 8007d80 <_dtoa_r+0x310>)
 8007b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b82:	f7f8 fb8b 	bl	800029c <__adddf3>
 8007b86:	4606      	mov	r6, r0
 8007b88:	4628      	mov	r0, r5
 8007b8a:	460f      	mov	r7, r1
 8007b8c:	f7f8 fcd2 	bl	8000534 <__aeabi_i2d>
 8007b90:	a37d      	add	r3, pc, #500	; (adr r3, 8007d88 <_dtoa_r+0x318>)
 8007b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b96:	f7f8 fd37 	bl	8000608 <__aeabi_dmul>
 8007b9a:	4602      	mov	r2, r0
 8007b9c:	460b      	mov	r3, r1
 8007b9e:	4630      	mov	r0, r6
 8007ba0:	4639      	mov	r1, r7
 8007ba2:	f7f8 fb7b 	bl	800029c <__adddf3>
 8007ba6:	4606      	mov	r6, r0
 8007ba8:	460f      	mov	r7, r1
 8007baa:	f7f8 ffdd 	bl	8000b68 <__aeabi_d2iz>
 8007bae:	2200      	movs	r2, #0
 8007bb0:	4682      	mov	sl, r0
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	4630      	mov	r0, r6
 8007bb6:	4639      	mov	r1, r7
 8007bb8:	f7f8 ff98 	bl	8000aec <__aeabi_dcmplt>
 8007bbc:	b148      	cbz	r0, 8007bd2 <_dtoa_r+0x162>
 8007bbe:	4650      	mov	r0, sl
 8007bc0:	f7f8 fcb8 	bl	8000534 <__aeabi_i2d>
 8007bc4:	4632      	mov	r2, r6
 8007bc6:	463b      	mov	r3, r7
 8007bc8:	f7f8 ff86 	bl	8000ad8 <__aeabi_dcmpeq>
 8007bcc:	b908      	cbnz	r0, 8007bd2 <_dtoa_r+0x162>
 8007bce:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007bd2:	f1ba 0f16 	cmp.w	sl, #22
 8007bd6:	d859      	bhi.n	8007c8c <_dtoa_r+0x21c>
 8007bd8:	4970      	ldr	r1, [pc, #448]	; (8007d9c <_dtoa_r+0x32c>)
 8007bda:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007bde:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007be2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007be6:	f7f8 ff9f 	bl	8000b28 <__aeabi_dcmpgt>
 8007bea:	2800      	cmp	r0, #0
 8007bec:	d050      	beq.n	8007c90 <_dtoa_r+0x220>
 8007bee:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	930f      	str	r3, [sp, #60]	; 0x3c
 8007bf6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007bf8:	1b5d      	subs	r5, r3, r5
 8007bfa:	f1b5 0801 	subs.w	r8, r5, #1
 8007bfe:	bf49      	itett	mi
 8007c00:	f1c5 0301 	rsbmi	r3, r5, #1
 8007c04:	2300      	movpl	r3, #0
 8007c06:	9305      	strmi	r3, [sp, #20]
 8007c08:	f04f 0800 	movmi.w	r8, #0
 8007c0c:	bf58      	it	pl
 8007c0e:	9305      	strpl	r3, [sp, #20]
 8007c10:	f1ba 0f00 	cmp.w	sl, #0
 8007c14:	db3e      	blt.n	8007c94 <_dtoa_r+0x224>
 8007c16:	2300      	movs	r3, #0
 8007c18:	44d0      	add	r8, sl
 8007c1a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8007c1e:	9307      	str	r3, [sp, #28]
 8007c20:	9b06      	ldr	r3, [sp, #24]
 8007c22:	2b09      	cmp	r3, #9
 8007c24:	f200 8090 	bhi.w	8007d48 <_dtoa_r+0x2d8>
 8007c28:	2b05      	cmp	r3, #5
 8007c2a:	bfc4      	itt	gt
 8007c2c:	3b04      	subgt	r3, #4
 8007c2e:	9306      	strgt	r3, [sp, #24]
 8007c30:	9b06      	ldr	r3, [sp, #24]
 8007c32:	f1a3 0302 	sub.w	r3, r3, #2
 8007c36:	bfcc      	ite	gt
 8007c38:	2500      	movgt	r5, #0
 8007c3a:	2501      	movle	r5, #1
 8007c3c:	2b03      	cmp	r3, #3
 8007c3e:	f200 808f 	bhi.w	8007d60 <_dtoa_r+0x2f0>
 8007c42:	e8df f003 	tbb	[pc, r3]
 8007c46:	7f7d      	.short	0x7f7d
 8007c48:	7131      	.short	0x7131
 8007c4a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8007c4e:	441d      	add	r5, r3
 8007c50:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8007c54:	2820      	cmp	r0, #32
 8007c56:	dd13      	ble.n	8007c80 <_dtoa_r+0x210>
 8007c58:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8007c5c:	9b00      	ldr	r3, [sp, #0]
 8007c5e:	fa08 f800 	lsl.w	r8, r8, r0
 8007c62:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8007c66:	fa23 f000 	lsr.w	r0, r3, r0
 8007c6a:	ea48 0000 	orr.w	r0, r8, r0
 8007c6e:	f7f8 fc51 	bl	8000514 <__aeabi_ui2d>
 8007c72:	2301      	movs	r3, #1
 8007c74:	4682      	mov	sl, r0
 8007c76:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8007c7a:	3d01      	subs	r5, #1
 8007c7c:	9313      	str	r3, [sp, #76]	; 0x4c
 8007c7e:	e772      	b.n	8007b66 <_dtoa_r+0xf6>
 8007c80:	9b00      	ldr	r3, [sp, #0]
 8007c82:	f1c0 0020 	rsb	r0, r0, #32
 8007c86:	fa03 f000 	lsl.w	r0, r3, r0
 8007c8a:	e7f0      	b.n	8007c6e <_dtoa_r+0x1fe>
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	e7b1      	b.n	8007bf4 <_dtoa_r+0x184>
 8007c90:	900f      	str	r0, [sp, #60]	; 0x3c
 8007c92:	e7b0      	b.n	8007bf6 <_dtoa_r+0x186>
 8007c94:	9b05      	ldr	r3, [sp, #20]
 8007c96:	eba3 030a 	sub.w	r3, r3, sl
 8007c9a:	9305      	str	r3, [sp, #20]
 8007c9c:	f1ca 0300 	rsb	r3, sl, #0
 8007ca0:	9307      	str	r3, [sp, #28]
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	930e      	str	r3, [sp, #56]	; 0x38
 8007ca6:	e7bb      	b.n	8007c20 <_dtoa_r+0x1b0>
 8007ca8:	2301      	movs	r3, #1
 8007caa:	930a      	str	r3, [sp, #40]	; 0x28
 8007cac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	dd59      	ble.n	8007d66 <_dtoa_r+0x2f6>
 8007cb2:	9302      	str	r3, [sp, #8]
 8007cb4:	4699      	mov	r9, r3
 8007cb6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007cb8:	2200      	movs	r2, #0
 8007cba:	6072      	str	r2, [r6, #4]
 8007cbc:	2204      	movs	r2, #4
 8007cbe:	f102 0014 	add.w	r0, r2, #20
 8007cc2:	4298      	cmp	r0, r3
 8007cc4:	6871      	ldr	r1, [r6, #4]
 8007cc6:	d953      	bls.n	8007d70 <_dtoa_r+0x300>
 8007cc8:	4620      	mov	r0, r4
 8007cca:	f000 fff6 	bl	8008cba <_Balloc>
 8007cce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007cd0:	6030      	str	r0, [r6, #0]
 8007cd2:	f1b9 0f0e 	cmp.w	r9, #14
 8007cd6:	f8d3 b000 	ldr.w	fp, [r3]
 8007cda:	f200 80e6 	bhi.w	8007eaa <_dtoa_r+0x43a>
 8007cde:	2d00      	cmp	r5, #0
 8007ce0:	f000 80e3 	beq.w	8007eaa <_dtoa_r+0x43a>
 8007ce4:	ed9d 7b00 	vldr	d7, [sp]
 8007ce8:	f1ba 0f00 	cmp.w	sl, #0
 8007cec:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8007cf0:	dd74      	ble.n	8007ddc <_dtoa_r+0x36c>
 8007cf2:	4a2a      	ldr	r2, [pc, #168]	; (8007d9c <_dtoa_r+0x32c>)
 8007cf4:	f00a 030f 	and.w	r3, sl, #15
 8007cf8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007cfc:	ed93 7b00 	vldr	d7, [r3]
 8007d00:	ea4f 162a 	mov.w	r6, sl, asr #4
 8007d04:	06f0      	lsls	r0, r6, #27
 8007d06:	ed8d 7b08 	vstr	d7, [sp, #32]
 8007d0a:	d565      	bpl.n	8007dd8 <_dtoa_r+0x368>
 8007d0c:	4b24      	ldr	r3, [pc, #144]	; (8007da0 <_dtoa_r+0x330>)
 8007d0e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007d12:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007d16:	f7f8 fda1 	bl	800085c <__aeabi_ddiv>
 8007d1a:	e9cd 0100 	strd	r0, r1, [sp]
 8007d1e:	f006 060f 	and.w	r6, r6, #15
 8007d22:	2503      	movs	r5, #3
 8007d24:	4f1e      	ldr	r7, [pc, #120]	; (8007da0 <_dtoa_r+0x330>)
 8007d26:	e04c      	b.n	8007dc2 <_dtoa_r+0x352>
 8007d28:	2301      	movs	r3, #1
 8007d2a:	930a      	str	r3, [sp, #40]	; 0x28
 8007d2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d2e:	4453      	add	r3, sl
 8007d30:	f103 0901 	add.w	r9, r3, #1
 8007d34:	9302      	str	r3, [sp, #8]
 8007d36:	464b      	mov	r3, r9
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	bfb8      	it	lt
 8007d3c:	2301      	movlt	r3, #1
 8007d3e:	e7ba      	b.n	8007cb6 <_dtoa_r+0x246>
 8007d40:	2300      	movs	r3, #0
 8007d42:	e7b2      	b.n	8007caa <_dtoa_r+0x23a>
 8007d44:	2300      	movs	r3, #0
 8007d46:	e7f0      	b.n	8007d2a <_dtoa_r+0x2ba>
 8007d48:	2501      	movs	r5, #1
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	9306      	str	r3, [sp, #24]
 8007d4e:	950a      	str	r5, [sp, #40]	; 0x28
 8007d50:	f04f 33ff 	mov.w	r3, #4294967295
 8007d54:	9302      	str	r3, [sp, #8]
 8007d56:	4699      	mov	r9, r3
 8007d58:	2200      	movs	r2, #0
 8007d5a:	2312      	movs	r3, #18
 8007d5c:	920b      	str	r2, [sp, #44]	; 0x2c
 8007d5e:	e7aa      	b.n	8007cb6 <_dtoa_r+0x246>
 8007d60:	2301      	movs	r3, #1
 8007d62:	930a      	str	r3, [sp, #40]	; 0x28
 8007d64:	e7f4      	b.n	8007d50 <_dtoa_r+0x2e0>
 8007d66:	2301      	movs	r3, #1
 8007d68:	9302      	str	r3, [sp, #8]
 8007d6a:	4699      	mov	r9, r3
 8007d6c:	461a      	mov	r2, r3
 8007d6e:	e7f5      	b.n	8007d5c <_dtoa_r+0x2ec>
 8007d70:	3101      	adds	r1, #1
 8007d72:	6071      	str	r1, [r6, #4]
 8007d74:	0052      	lsls	r2, r2, #1
 8007d76:	e7a2      	b.n	8007cbe <_dtoa_r+0x24e>
 8007d78:	636f4361 	.word	0x636f4361
 8007d7c:	3fd287a7 	.word	0x3fd287a7
 8007d80:	8b60c8b3 	.word	0x8b60c8b3
 8007d84:	3fc68a28 	.word	0x3fc68a28
 8007d88:	509f79fb 	.word	0x509f79fb
 8007d8c:	3fd34413 	.word	0x3fd34413
 8007d90:	7ff00000 	.word	0x7ff00000
 8007d94:	0800a48c 	.word	0x0800a48c
 8007d98:	3ff80000 	.word	0x3ff80000
 8007d9c:	0800a390 	.word	0x0800a390
 8007da0:	0800a368 	.word	0x0800a368
 8007da4:	0800a359 	.word	0x0800a359
 8007da8:	07f1      	lsls	r1, r6, #31
 8007daa:	d508      	bpl.n	8007dbe <_dtoa_r+0x34e>
 8007dac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007db0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007db4:	f7f8 fc28 	bl	8000608 <__aeabi_dmul>
 8007db8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007dbc:	3501      	adds	r5, #1
 8007dbe:	1076      	asrs	r6, r6, #1
 8007dc0:	3708      	adds	r7, #8
 8007dc2:	2e00      	cmp	r6, #0
 8007dc4:	d1f0      	bne.n	8007da8 <_dtoa_r+0x338>
 8007dc6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007dca:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007dce:	f7f8 fd45 	bl	800085c <__aeabi_ddiv>
 8007dd2:	e9cd 0100 	strd	r0, r1, [sp]
 8007dd6:	e01a      	b.n	8007e0e <_dtoa_r+0x39e>
 8007dd8:	2502      	movs	r5, #2
 8007dda:	e7a3      	b.n	8007d24 <_dtoa_r+0x2b4>
 8007ddc:	f000 80a0 	beq.w	8007f20 <_dtoa_r+0x4b0>
 8007de0:	f1ca 0600 	rsb	r6, sl, #0
 8007de4:	4b9f      	ldr	r3, [pc, #636]	; (8008064 <_dtoa_r+0x5f4>)
 8007de6:	4fa0      	ldr	r7, [pc, #640]	; (8008068 <_dtoa_r+0x5f8>)
 8007de8:	f006 020f 	and.w	r2, r6, #15
 8007dec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007df8:	f7f8 fc06 	bl	8000608 <__aeabi_dmul>
 8007dfc:	e9cd 0100 	strd	r0, r1, [sp]
 8007e00:	1136      	asrs	r6, r6, #4
 8007e02:	2300      	movs	r3, #0
 8007e04:	2502      	movs	r5, #2
 8007e06:	2e00      	cmp	r6, #0
 8007e08:	d17f      	bne.n	8007f0a <_dtoa_r+0x49a>
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d1e1      	bne.n	8007dd2 <_dtoa_r+0x362>
 8007e0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	f000 8087 	beq.w	8007f24 <_dtoa_r+0x4b4>
 8007e16:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	4b93      	ldr	r3, [pc, #588]	; (800806c <_dtoa_r+0x5fc>)
 8007e1e:	4630      	mov	r0, r6
 8007e20:	4639      	mov	r1, r7
 8007e22:	f7f8 fe63 	bl	8000aec <__aeabi_dcmplt>
 8007e26:	2800      	cmp	r0, #0
 8007e28:	d07c      	beq.n	8007f24 <_dtoa_r+0x4b4>
 8007e2a:	f1b9 0f00 	cmp.w	r9, #0
 8007e2e:	d079      	beq.n	8007f24 <_dtoa_r+0x4b4>
 8007e30:	9b02      	ldr	r3, [sp, #8]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	dd35      	ble.n	8007ea2 <_dtoa_r+0x432>
 8007e36:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007e3a:	9308      	str	r3, [sp, #32]
 8007e3c:	4639      	mov	r1, r7
 8007e3e:	2200      	movs	r2, #0
 8007e40:	4b8b      	ldr	r3, [pc, #556]	; (8008070 <_dtoa_r+0x600>)
 8007e42:	4630      	mov	r0, r6
 8007e44:	f7f8 fbe0 	bl	8000608 <__aeabi_dmul>
 8007e48:	e9cd 0100 	strd	r0, r1, [sp]
 8007e4c:	9f02      	ldr	r7, [sp, #8]
 8007e4e:	3501      	adds	r5, #1
 8007e50:	4628      	mov	r0, r5
 8007e52:	f7f8 fb6f 	bl	8000534 <__aeabi_i2d>
 8007e56:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e5a:	f7f8 fbd5 	bl	8000608 <__aeabi_dmul>
 8007e5e:	2200      	movs	r2, #0
 8007e60:	4b84      	ldr	r3, [pc, #528]	; (8008074 <_dtoa_r+0x604>)
 8007e62:	f7f8 fa1b 	bl	800029c <__adddf3>
 8007e66:	4605      	mov	r5, r0
 8007e68:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007e6c:	2f00      	cmp	r7, #0
 8007e6e:	d15d      	bne.n	8007f2c <_dtoa_r+0x4bc>
 8007e70:	2200      	movs	r2, #0
 8007e72:	4b81      	ldr	r3, [pc, #516]	; (8008078 <_dtoa_r+0x608>)
 8007e74:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007e78:	f7f8 fa0e 	bl	8000298 <__aeabi_dsub>
 8007e7c:	462a      	mov	r2, r5
 8007e7e:	4633      	mov	r3, r6
 8007e80:	e9cd 0100 	strd	r0, r1, [sp]
 8007e84:	f7f8 fe50 	bl	8000b28 <__aeabi_dcmpgt>
 8007e88:	2800      	cmp	r0, #0
 8007e8a:	f040 8288 	bne.w	800839e <_dtoa_r+0x92e>
 8007e8e:	462a      	mov	r2, r5
 8007e90:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007e94:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007e98:	f7f8 fe28 	bl	8000aec <__aeabi_dcmplt>
 8007e9c:	2800      	cmp	r0, #0
 8007e9e:	f040 827c 	bne.w	800839a <_dtoa_r+0x92a>
 8007ea2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007ea6:	e9cd 2300 	strd	r2, r3, [sp]
 8007eaa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	f2c0 8150 	blt.w	8008152 <_dtoa_r+0x6e2>
 8007eb2:	f1ba 0f0e 	cmp.w	sl, #14
 8007eb6:	f300 814c 	bgt.w	8008152 <_dtoa_r+0x6e2>
 8007eba:	4b6a      	ldr	r3, [pc, #424]	; (8008064 <_dtoa_r+0x5f4>)
 8007ebc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007ec0:	ed93 7b00 	vldr	d7, [r3]
 8007ec4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007ecc:	f280 80d8 	bge.w	8008080 <_dtoa_r+0x610>
 8007ed0:	f1b9 0f00 	cmp.w	r9, #0
 8007ed4:	f300 80d4 	bgt.w	8008080 <_dtoa_r+0x610>
 8007ed8:	f040 825e 	bne.w	8008398 <_dtoa_r+0x928>
 8007edc:	2200      	movs	r2, #0
 8007ede:	4b66      	ldr	r3, [pc, #408]	; (8008078 <_dtoa_r+0x608>)
 8007ee0:	ec51 0b17 	vmov	r0, r1, d7
 8007ee4:	f7f8 fb90 	bl	8000608 <__aeabi_dmul>
 8007ee8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007eec:	f7f8 fe12 	bl	8000b14 <__aeabi_dcmpge>
 8007ef0:	464f      	mov	r7, r9
 8007ef2:	464e      	mov	r6, r9
 8007ef4:	2800      	cmp	r0, #0
 8007ef6:	f040 8234 	bne.w	8008362 <_dtoa_r+0x8f2>
 8007efa:	2331      	movs	r3, #49	; 0x31
 8007efc:	f10b 0501 	add.w	r5, fp, #1
 8007f00:	f88b 3000 	strb.w	r3, [fp]
 8007f04:	f10a 0a01 	add.w	sl, sl, #1
 8007f08:	e22f      	b.n	800836a <_dtoa_r+0x8fa>
 8007f0a:	07f2      	lsls	r2, r6, #31
 8007f0c:	d505      	bpl.n	8007f1a <_dtoa_r+0x4aa>
 8007f0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f12:	f7f8 fb79 	bl	8000608 <__aeabi_dmul>
 8007f16:	3501      	adds	r5, #1
 8007f18:	2301      	movs	r3, #1
 8007f1a:	1076      	asrs	r6, r6, #1
 8007f1c:	3708      	adds	r7, #8
 8007f1e:	e772      	b.n	8007e06 <_dtoa_r+0x396>
 8007f20:	2502      	movs	r5, #2
 8007f22:	e774      	b.n	8007e0e <_dtoa_r+0x39e>
 8007f24:	f8cd a020 	str.w	sl, [sp, #32]
 8007f28:	464f      	mov	r7, r9
 8007f2a:	e791      	b.n	8007e50 <_dtoa_r+0x3e0>
 8007f2c:	4b4d      	ldr	r3, [pc, #308]	; (8008064 <_dtoa_r+0x5f4>)
 8007f2e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007f32:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8007f36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d047      	beq.n	8007fcc <_dtoa_r+0x55c>
 8007f3c:	4602      	mov	r2, r0
 8007f3e:	460b      	mov	r3, r1
 8007f40:	2000      	movs	r0, #0
 8007f42:	494e      	ldr	r1, [pc, #312]	; (800807c <_dtoa_r+0x60c>)
 8007f44:	f7f8 fc8a 	bl	800085c <__aeabi_ddiv>
 8007f48:	462a      	mov	r2, r5
 8007f4a:	4633      	mov	r3, r6
 8007f4c:	f7f8 f9a4 	bl	8000298 <__aeabi_dsub>
 8007f50:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007f54:	465d      	mov	r5, fp
 8007f56:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007f5a:	f7f8 fe05 	bl	8000b68 <__aeabi_d2iz>
 8007f5e:	4606      	mov	r6, r0
 8007f60:	f7f8 fae8 	bl	8000534 <__aeabi_i2d>
 8007f64:	4602      	mov	r2, r0
 8007f66:	460b      	mov	r3, r1
 8007f68:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007f6c:	f7f8 f994 	bl	8000298 <__aeabi_dsub>
 8007f70:	3630      	adds	r6, #48	; 0x30
 8007f72:	f805 6b01 	strb.w	r6, [r5], #1
 8007f76:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007f7a:	e9cd 0100 	strd	r0, r1, [sp]
 8007f7e:	f7f8 fdb5 	bl	8000aec <__aeabi_dcmplt>
 8007f82:	2800      	cmp	r0, #0
 8007f84:	d163      	bne.n	800804e <_dtoa_r+0x5de>
 8007f86:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f8a:	2000      	movs	r0, #0
 8007f8c:	4937      	ldr	r1, [pc, #220]	; (800806c <_dtoa_r+0x5fc>)
 8007f8e:	f7f8 f983 	bl	8000298 <__aeabi_dsub>
 8007f92:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007f96:	f7f8 fda9 	bl	8000aec <__aeabi_dcmplt>
 8007f9a:	2800      	cmp	r0, #0
 8007f9c:	f040 80b7 	bne.w	800810e <_dtoa_r+0x69e>
 8007fa0:	eba5 030b 	sub.w	r3, r5, fp
 8007fa4:	429f      	cmp	r7, r3
 8007fa6:	f77f af7c 	ble.w	8007ea2 <_dtoa_r+0x432>
 8007faa:	2200      	movs	r2, #0
 8007fac:	4b30      	ldr	r3, [pc, #192]	; (8008070 <_dtoa_r+0x600>)
 8007fae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007fb2:	f7f8 fb29 	bl	8000608 <__aeabi_dmul>
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007fbc:	4b2c      	ldr	r3, [pc, #176]	; (8008070 <_dtoa_r+0x600>)
 8007fbe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007fc2:	f7f8 fb21 	bl	8000608 <__aeabi_dmul>
 8007fc6:	e9cd 0100 	strd	r0, r1, [sp]
 8007fca:	e7c4      	b.n	8007f56 <_dtoa_r+0x4e6>
 8007fcc:	462a      	mov	r2, r5
 8007fce:	4633      	mov	r3, r6
 8007fd0:	f7f8 fb1a 	bl	8000608 <__aeabi_dmul>
 8007fd4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007fd8:	eb0b 0507 	add.w	r5, fp, r7
 8007fdc:	465e      	mov	r6, fp
 8007fde:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007fe2:	f7f8 fdc1 	bl	8000b68 <__aeabi_d2iz>
 8007fe6:	4607      	mov	r7, r0
 8007fe8:	f7f8 faa4 	bl	8000534 <__aeabi_i2d>
 8007fec:	3730      	adds	r7, #48	; 0x30
 8007fee:	4602      	mov	r2, r0
 8007ff0:	460b      	mov	r3, r1
 8007ff2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007ff6:	f7f8 f94f 	bl	8000298 <__aeabi_dsub>
 8007ffa:	f806 7b01 	strb.w	r7, [r6], #1
 8007ffe:	42ae      	cmp	r6, r5
 8008000:	e9cd 0100 	strd	r0, r1, [sp]
 8008004:	f04f 0200 	mov.w	r2, #0
 8008008:	d126      	bne.n	8008058 <_dtoa_r+0x5e8>
 800800a:	4b1c      	ldr	r3, [pc, #112]	; (800807c <_dtoa_r+0x60c>)
 800800c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008010:	f7f8 f944 	bl	800029c <__adddf3>
 8008014:	4602      	mov	r2, r0
 8008016:	460b      	mov	r3, r1
 8008018:	e9dd 0100 	ldrd	r0, r1, [sp]
 800801c:	f7f8 fd84 	bl	8000b28 <__aeabi_dcmpgt>
 8008020:	2800      	cmp	r0, #0
 8008022:	d174      	bne.n	800810e <_dtoa_r+0x69e>
 8008024:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008028:	2000      	movs	r0, #0
 800802a:	4914      	ldr	r1, [pc, #80]	; (800807c <_dtoa_r+0x60c>)
 800802c:	f7f8 f934 	bl	8000298 <__aeabi_dsub>
 8008030:	4602      	mov	r2, r0
 8008032:	460b      	mov	r3, r1
 8008034:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008038:	f7f8 fd58 	bl	8000aec <__aeabi_dcmplt>
 800803c:	2800      	cmp	r0, #0
 800803e:	f43f af30 	beq.w	8007ea2 <_dtoa_r+0x432>
 8008042:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008046:	2b30      	cmp	r3, #48	; 0x30
 8008048:	f105 32ff 	add.w	r2, r5, #4294967295
 800804c:	d002      	beq.n	8008054 <_dtoa_r+0x5e4>
 800804e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008052:	e04a      	b.n	80080ea <_dtoa_r+0x67a>
 8008054:	4615      	mov	r5, r2
 8008056:	e7f4      	b.n	8008042 <_dtoa_r+0x5d2>
 8008058:	4b05      	ldr	r3, [pc, #20]	; (8008070 <_dtoa_r+0x600>)
 800805a:	f7f8 fad5 	bl	8000608 <__aeabi_dmul>
 800805e:	e9cd 0100 	strd	r0, r1, [sp]
 8008062:	e7bc      	b.n	8007fde <_dtoa_r+0x56e>
 8008064:	0800a390 	.word	0x0800a390
 8008068:	0800a368 	.word	0x0800a368
 800806c:	3ff00000 	.word	0x3ff00000
 8008070:	40240000 	.word	0x40240000
 8008074:	401c0000 	.word	0x401c0000
 8008078:	40140000 	.word	0x40140000
 800807c:	3fe00000 	.word	0x3fe00000
 8008080:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008084:	465d      	mov	r5, fp
 8008086:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800808a:	4630      	mov	r0, r6
 800808c:	4639      	mov	r1, r7
 800808e:	f7f8 fbe5 	bl	800085c <__aeabi_ddiv>
 8008092:	f7f8 fd69 	bl	8000b68 <__aeabi_d2iz>
 8008096:	4680      	mov	r8, r0
 8008098:	f7f8 fa4c 	bl	8000534 <__aeabi_i2d>
 800809c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80080a0:	f7f8 fab2 	bl	8000608 <__aeabi_dmul>
 80080a4:	4602      	mov	r2, r0
 80080a6:	460b      	mov	r3, r1
 80080a8:	4630      	mov	r0, r6
 80080aa:	4639      	mov	r1, r7
 80080ac:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80080b0:	f7f8 f8f2 	bl	8000298 <__aeabi_dsub>
 80080b4:	f805 6b01 	strb.w	r6, [r5], #1
 80080b8:	eba5 060b 	sub.w	r6, r5, fp
 80080bc:	45b1      	cmp	r9, r6
 80080be:	4602      	mov	r2, r0
 80080c0:	460b      	mov	r3, r1
 80080c2:	d139      	bne.n	8008138 <_dtoa_r+0x6c8>
 80080c4:	f7f8 f8ea 	bl	800029c <__adddf3>
 80080c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80080cc:	4606      	mov	r6, r0
 80080ce:	460f      	mov	r7, r1
 80080d0:	f7f8 fd2a 	bl	8000b28 <__aeabi_dcmpgt>
 80080d4:	b9c8      	cbnz	r0, 800810a <_dtoa_r+0x69a>
 80080d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80080da:	4630      	mov	r0, r6
 80080dc:	4639      	mov	r1, r7
 80080de:	f7f8 fcfb 	bl	8000ad8 <__aeabi_dcmpeq>
 80080e2:	b110      	cbz	r0, 80080ea <_dtoa_r+0x67a>
 80080e4:	f018 0f01 	tst.w	r8, #1
 80080e8:	d10f      	bne.n	800810a <_dtoa_r+0x69a>
 80080ea:	9904      	ldr	r1, [sp, #16]
 80080ec:	4620      	mov	r0, r4
 80080ee:	f000 fe18 	bl	8008d22 <_Bfree>
 80080f2:	2300      	movs	r3, #0
 80080f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80080f6:	702b      	strb	r3, [r5, #0]
 80080f8:	f10a 0301 	add.w	r3, sl, #1
 80080fc:	6013      	str	r3, [r2, #0]
 80080fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008100:	2b00      	cmp	r3, #0
 8008102:	f000 8241 	beq.w	8008588 <_dtoa_r+0xb18>
 8008106:	601d      	str	r5, [r3, #0]
 8008108:	e23e      	b.n	8008588 <_dtoa_r+0xb18>
 800810a:	f8cd a020 	str.w	sl, [sp, #32]
 800810e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008112:	2a39      	cmp	r2, #57	; 0x39
 8008114:	f105 33ff 	add.w	r3, r5, #4294967295
 8008118:	d108      	bne.n	800812c <_dtoa_r+0x6bc>
 800811a:	459b      	cmp	fp, r3
 800811c:	d10a      	bne.n	8008134 <_dtoa_r+0x6c4>
 800811e:	9b08      	ldr	r3, [sp, #32]
 8008120:	3301      	adds	r3, #1
 8008122:	9308      	str	r3, [sp, #32]
 8008124:	2330      	movs	r3, #48	; 0x30
 8008126:	f88b 3000 	strb.w	r3, [fp]
 800812a:	465b      	mov	r3, fp
 800812c:	781a      	ldrb	r2, [r3, #0]
 800812e:	3201      	adds	r2, #1
 8008130:	701a      	strb	r2, [r3, #0]
 8008132:	e78c      	b.n	800804e <_dtoa_r+0x5de>
 8008134:	461d      	mov	r5, r3
 8008136:	e7ea      	b.n	800810e <_dtoa_r+0x69e>
 8008138:	2200      	movs	r2, #0
 800813a:	4b9b      	ldr	r3, [pc, #620]	; (80083a8 <_dtoa_r+0x938>)
 800813c:	f7f8 fa64 	bl	8000608 <__aeabi_dmul>
 8008140:	2200      	movs	r2, #0
 8008142:	2300      	movs	r3, #0
 8008144:	4606      	mov	r6, r0
 8008146:	460f      	mov	r7, r1
 8008148:	f7f8 fcc6 	bl	8000ad8 <__aeabi_dcmpeq>
 800814c:	2800      	cmp	r0, #0
 800814e:	d09a      	beq.n	8008086 <_dtoa_r+0x616>
 8008150:	e7cb      	b.n	80080ea <_dtoa_r+0x67a>
 8008152:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008154:	2a00      	cmp	r2, #0
 8008156:	f000 808b 	beq.w	8008270 <_dtoa_r+0x800>
 800815a:	9a06      	ldr	r2, [sp, #24]
 800815c:	2a01      	cmp	r2, #1
 800815e:	dc6e      	bgt.n	800823e <_dtoa_r+0x7ce>
 8008160:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008162:	2a00      	cmp	r2, #0
 8008164:	d067      	beq.n	8008236 <_dtoa_r+0x7c6>
 8008166:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800816a:	9f07      	ldr	r7, [sp, #28]
 800816c:	9d05      	ldr	r5, [sp, #20]
 800816e:	9a05      	ldr	r2, [sp, #20]
 8008170:	2101      	movs	r1, #1
 8008172:	441a      	add	r2, r3
 8008174:	4620      	mov	r0, r4
 8008176:	9205      	str	r2, [sp, #20]
 8008178:	4498      	add	r8, r3
 800817a:	f000 feb0 	bl	8008ede <__i2b>
 800817e:	4606      	mov	r6, r0
 8008180:	2d00      	cmp	r5, #0
 8008182:	dd0c      	ble.n	800819e <_dtoa_r+0x72e>
 8008184:	f1b8 0f00 	cmp.w	r8, #0
 8008188:	dd09      	ble.n	800819e <_dtoa_r+0x72e>
 800818a:	4545      	cmp	r5, r8
 800818c:	9a05      	ldr	r2, [sp, #20]
 800818e:	462b      	mov	r3, r5
 8008190:	bfa8      	it	ge
 8008192:	4643      	movge	r3, r8
 8008194:	1ad2      	subs	r2, r2, r3
 8008196:	9205      	str	r2, [sp, #20]
 8008198:	1aed      	subs	r5, r5, r3
 800819a:	eba8 0803 	sub.w	r8, r8, r3
 800819e:	9b07      	ldr	r3, [sp, #28]
 80081a0:	b1eb      	cbz	r3, 80081de <_dtoa_r+0x76e>
 80081a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d067      	beq.n	8008278 <_dtoa_r+0x808>
 80081a8:	b18f      	cbz	r7, 80081ce <_dtoa_r+0x75e>
 80081aa:	4631      	mov	r1, r6
 80081ac:	463a      	mov	r2, r7
 80081ae:	4620      	mov	r0, r4
 80081b0:	f000 ff34 	bl	800901c <__pow5mult>
 80081b4:	9a04      	ldr	r2, [sp, #16]
 80081b6:	4601      	mov	r1, r0
 80081b8:	4606      	mov	r6, r0
 80081ba:	4620      	mov	r0, r4
 80081bc:	f000 fe98 	bl	8008ef0 <__multiply>
 80081c0:	9904      	ldr	r1, [sp, #16]
 80081c2:	9008      	str	r0, [sp, #32]
 80081c4:	4620      	mov	r0, r4
 80081c6:	f000 fdac 	bl	8008d22 <_Bfree>
 80081ca:	9b08      	ldr	r3, [sp, #32]
 80081cc:	9304      	str	r3, [sp, #16]
 80081ce:	9b07      	ldr	r3, [sp, #28]
 80081d0:	1bda      	subs	r2, r3, r7
 80081d2:	d004      	beq.n	80081de <_dtoa_r+0x76e>
 80081d4:	9904      	ldr	r1, [sp, #16]
 80081d6:	4620      	mov	r0, r4
 80081d8:	f000 ff20 	bl	800901c <__pow5mult>
 80081dc:	9004      	str	r0, [sp, #16]
 80081de:	2101      	movs	r1, #1
 80081e0:	4620      	mov	r0, r4
 80081e2:	f000 fe7c 	bl	8008ede <__i2b>
 80081e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80081e8:	4607      	mov	r7, r0
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	f000 81d0 	beq.w	8008590 <_dtoa_r+0xb20>
 80081f0:	461a      	mov	r2, r3
 80081f2:	4601      	mov	r1, r0
 80081f4:	4620      	mov	r0, r4
 80081f6:	f000 ff11 	bl	800901c <__pow5mult>
 80081fa:	9b06      	ldr	r3, [sp, #24]
 80081fc:	2b01      	cmp	r3, #1
 80081fe:	4607      	mov	r7, r0
 8008200:	dc40      	bgt.n	8008284 <_dtoa_r+0x814>
 8008202:	9b00      	ldr	r3, [sp, #0]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d139      	bne.n	800827c <_dtoa_r+0x80c>
 8008208:	9b01      	ldr	r3, [sp, #4]
 800820a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800820e:	2b00      	cmp	r3, #0
 8008210:	d136      	bne.n	8008280 <_dtoa_r+0x810>
 8008212:	9b01      	ldr	r3, [sp, #4]
 8008214:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008218:	0d1b      	lsrs	r3, r3, #20
 800821a:	051b      	lsls	r3, r3, #20
 800821c:	b12b      	cbz	r3, 800822a <_dtoa_r+0x7ba>
 800821e:	9b05      	ldr	r3, [sp, #20]
 8008220:	3301      	adds	r3, #1
 8008222:	9305      	str	r3, [sp, #20]
 8008224:	f108 0801 	add.w	r8, r8, #1
 8008228:	2301      	movs	r3, #1
 800822a:	9307      	str	r3, [sp, #28]
 800822c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800822e:	2b00      	cmp	r3, #0
 8008230:	d12a      	bne.n	8008288 <_dtoa_r+0x818>
 8008232:	2001      	movs	r0, #1
 8008234:	e030      	b.n	8008298 <_dtoa_r+0x828>
 8008236:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008238:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800823c:	e795      	b.n	800816a <_dtoa_r+0x6fa>
 800823e:	9b07      	ldr	r3, [sp, #28]
 8008240:	f109 37ff 	add.w	r7, r9, #4294967295
 8008244:	42bb      	cmp	r3, r7
 8008246:	bfbf      	itttt	lt
 8008248:	9b07      	ldrlt	r3, [sp, #28]
 800824a:	9707      	strlt	r7, [sp, #28]
 800824c:	1afa      	sublt	r2, r7, r3
 800824e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008250:	bfbb      	ittet	lt
 8008252:	189b      	addlt	r3, r3, r2
 8008254:	930e      	strlt	r3, [sp, #56]	; 0x38
 8008256:	1bdf      	subge	r7, r3, r7
 8008258:	2700      	movlt	r7, #0
 800825a:	f1b9 0f00 	cmp.w	r9, #0
 800825e:	bfb5      	itete	lt
 8008260:	9b05      	ldrlt	r3, [sp, #20]
 8008262:	9d05      	ldrge	r5, [sp, #20]
 8008264:	eba3 0509 	sublt.w	r5, r3, r9
 8008268:	464b      	movge	r3, r9
 800826a:	bfb8      	it	lt
 800826c:	2300      	movlt	r3, #0
 800826e:	e77e      	b.n	800816e <_dtoa_r+0x6fe>
 8008270:	9f07      	ldr	r7, [sp, #28]
 8008272:	9d05      	ldr	r5, [sp, #20]
 8008274:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8008276:	e783      	b.n	8008180 <_dtoa_r+0x710>
 8008278:	9a07      	ldr	r2, [sp, #28]
 800827a:	e7ab      	b.n	80081d4 <_dtoa_r+0x764>
 800827c:	2300      	movs	r3, #0
 800827e:	e7d4      	b.n	800822a <_dtoa_r+0x7ba>
 8008280:	9b00      	ldr	r3, [sp, #0]
 8008282:	e7d2      	b.n	800822a <_dtoa_r+0x7ba>
 8008284:	2300      	movs	r3, #0
 8008286:	9307      	str	r3, [sp, #28]
 8008288:	693b      	ldr	r3, [r7, #16]
 800828a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800828e:	6918      	ldr	r0, [r3, #16]
 8008290:	f000 fdd7 	bl	8008e42 <__hi0bits>
 8008294:	f1c0 0020 	rsb	r0, r0, #32
 8008298:	4440      	add	r0, r8
 800829a:	f010 001f 	ands.w	r0, r0, #31
 800829e:	d047      	beq.n	8008330 <_dtoa_r+0x8c0>
 80082a0:	f1c0 0320 	rsb	r3, r0, #32
 80082a4:	2b04      	cmp	r3, #4
 80082a6:	dd3b      	ble.n	8008320 <_dtoa_r+0x8b0>
 80082a8:	9b05      	ldr	r3, [sp, #20]
 80082aa:	f1c0 001c 	rsb	r0, r0, #28
 80082ae:	4403      	add	r3, r0
 80082b0:	9305      	str	r3, [sp, #20]
 80082b2:	4405      	add	r5, r0
 80082b4:	4480      	add	r8, r0
 80082b6:	9b05      	ldr	r3, [sp, #20]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	dd05      	ble.n	80082c8 <_dtoa_r+0x858>
 80082bc:	461a      	mov	r2, r3
 80082be:	9904      	ldr	r1, [sp, #16]
 80082c0:	4620      	mov	r0, r4
 80082c2:	f000 fef9 	bl	80090b8 <__lshift>
 80082c6:	9004      	str	r0, [sp, #16]
 80082c8:	f1b8 0f00 	cmp.w	r8, #0
 80082cc:	dd05      	ble.n	80082da <_dtoa_r+0x86a>
 80082ce:	4639      	mov	r1, r7
 80082d0:	4642      	mov	r2, r8
 80082d2:	4620      	mov	r0, r4
 80082d4:	f000 fef0 	bl	80090b8 <__lshift>
 80082d8:	4607      	mov	r7, r0
 80082da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80082dc:	b353      	cbz	r3, 8008334 <_dtoa_r+0x8c4>
 80082de:	4639      	mov	r1, r7
 80082e0:	9804      	ldr	r0, [sp, #16]
 80082e2:	f000 ff3d 	bl	8009160 <__mcmp>
 80082e6:	2800      	cmp	r0, #0
 80082e8:	da24      	bge.n	8008334 <_dtoa_r+0x8c4>
 80082ea:	2300      	movs	r3, #0
 80082ec:	220a      	movs	r2, #10
 80082ee:	9904      	ldr	r1, [sp, #16]
 80082f0:	4620      	mov	r0, r4
 80082f2:	f000 fd2d 	bl	8008d50 <__multadd>
 80082f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082f8:	9004      	str	r0, [sp, #16]
 80082fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80082fe:	2b00      	cmp	r3, #0
 8008300:	f000 814d 	beq.w	800859e <_dtoa_r+0xb2e>
 8008304:	2300      	movs	r3, #0
 8008306:	4631      	mov	r1, r6
 8008308:	220a      	movs	r2, #10
 800830a:	4620      	mov	r0, r4
 800830c:	f000 fd20 	bl	8008d50 <__multadd>
 8008310:	9b02      	ldr	r3, [sp, #8]
 8008312:	2b00      	cmp	r3, #0
 8008314:	4606      	mov	r6, r0
 8008316:	dc4f      	bgt.n	80083b8 <_dtoa_r+0x948>
 8008318:	9b06      	ldr	r3, [sp, #24]
 800831a:	2b02      	cmp	r3, #2
 800831c:	dd4c      	ble.n	80083b8 <_dtoa_r+0x948>
 800831e:	e011      	b.n	8008344 <_dtoa_r+0x8d4>
 8008320:	d0c9      	beq.n	80082b6 <_dtoa_r+0x846>
 8008322:	9a05      	ldr	r2, [sp, #20]
 8008324:	331c      	adds	r3, #28
 8008326:	441a      	add	r2, r3
 8008328:	9205      	str	r2, [sp, #20]
 800832a:	441d      	add	r5, r3
 800832c:	4498      	add	r8, r3
 800832e:	e7c2      	b.n	80082b6 <_dtoa_r+0x846>
 8008330:	4603      	mov	r3, r0
 8008332:	e7f6      	b.n	8008322 <_dtoa_r+0x8b2>
 8008334:	f1b9 0f00 	cmp.w	r9, #0
 8008338:	dc38      	bgt.n	80083ac <_dtoa_r+0x93c>
 800833a:	9b06      	ldr	r3, [sp, #24]
 800833c:	2b02      	cmp	r3, #2
 800833e:	dd35      	ble.n	80083ac <_dtoa_r+0x93c>
 8008340:	f8cd 9008 	str.w	r9, [sp, #8]
 8008344:	9b02      	ldr	r3, [sp, #8]
 8008346:	b963      	cbnz	r3, 8008362 <_dtoa_r+0x8f2>
 8008348:	4639      	mov	r1, r7
 800834a:	2205      	movs	r2, #5
 800834c:	4620      	mov	r0, r4
 800834e:	f000 fcff 	bl	8008d50 <__multadd>
 8008352:	4601      	mov	r1, r0
 8008354:	4607      	mov	r7, r0
 8008356:	9804      	ldr	r0, [sp, #16]
 8008358:	f000 ff02 	bl	8009160 <__mcmp>
 800835c:	2800      	cmp	r0, #0
 800835e:	f73f adcc 	bgt.w	8007efa <_dtoa_r+0x48a>
 8008362:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008364:	465d      	mov	r5, fp
 8008366:	ea6f 0a03 	mvn.w	sl, r3
 800836a:	f04f 0900 	mov.w	r9, #0
 800836e:	4639      	mov	r1, r7
 8008370:	4620      	mov	r0, r4
 8008372:	f000 fcd6 	bl	8008d22 <_Bfree>
 8008376:	2e00      	cmp	r6, #0
 8008378:	f43f aeb7 	beq.w	80080ea <_dtoa_r+0x67a>
 800837c:	f1b9 0f00 	cmp.w	r9, #0
 8008380:	d005      	beq.n	800838e <_dtoa_r+0x91e>
 8008382:	45b1      	cmp	r9, r6
 8008384:	d003      	beq.n	800838e <_dtoa_r+0x91e>
 8008386:	4649      	mov	r1, r9
 8008388:	4620      	mov	r0, r4
 800838a:	f000 fcca 	bl	8008d22 <_Bfree>
 800838e:	4631      	mov	r1, r6
 8008390:	4620      	mov	r0, r4
 8008392:	f000 fcc6 	bl	8008d22 <_Bfree>
 8008396:	e6a8      	b.n	80080ea <_dtoa_r+0x67a>
 8008398:	2700      	movs	r7, #0
 800839a:	463e      	mov	r6, r7
 800839c:	e7e1      	b.n	8008362 <_dtoa_r+0x8f2>
 800839e:	f8dd a020 	ldr.w	sl, [sp, #32]
 80083a2:	463e      	mov	r6, r7
 80083a4:	e5a9      	b.n	8007efa <_dtoa_r+0x48a>
 80083a6:	bf00      	nop
 80083a8:	40240000 	.word	0x40240000
 80083ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083ae:	f8cd 9008 	str.w	r9, [sp, #8]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	f000 80fa 	beq.w	80085ac <_dtoa_r+0xb3c>
 80083b8:	2d00      	cmp	r5, #0
 80083ba:	dd05      	ble.n	80083c8 <_dtoa_r+0x958>
 80083bc:	4631      	mov	r1, r6
 80083be:	462a      	mov	r2, r5
 80083c0:	4620      	mov	r0, r4
 80083c2:	f000 fe79 	bl	80090b8 <__lshift>
 80083c6:	4606      	mov	r6, r0
 80083c8:	9b07      	ldr	r3, [sp, #28]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d04c      	beq.n	8008468 <_dtoa_r+0x9f8>
 80083ce:	6871      	ldr	r1, [r6, #4]
 80083d0:	4620      	mov	r0, r4
 80083d2:	f000 fc72 	bl	8008cba <_Balloc>
 80083d6:	6932      	ldr	r2, [r6, #16]
 80083d8:	3202      	adds	r2, #2
 80083da:	4605      	mov	r5, r0
 80083dc:	0092      	lsls	r2, r2, #2
 80083de:	f106 010c 	add.w	r1, r6, #12
 80083e2:	300c      	adds	r0, #12
 80083e4:	f000 fc5e 	bl	8008ca4 <memcpy>
 80083e8:	2201      	movs	r2, #1
 80083ea:	4629      	mov	r1, r5
 80083ec:	4620      	mov	r0, r4
 80083ee:	f000 fe63 	bl	80090b8 <__lshift>
 80083f2:	9b00      	ldr	r3, [sp, #0]
 80083f4:	f8cd b014 	str.w	fp, [sp, #20]
 80083f8:	f003 0301 	and.w	r3, r3, #1
 80083fc:	46b1      	mov	r9, r6
 80083fe:	9307      	str	r3, [sp, #28]
 8008400:	4606      	mov	r6, r0
 8008402:	4639      	mov	r1, r7
 8008404:	9804      	ldr	r0, [sp, #16]
 8008406:	f7ff faa5 	bl	8007954 <quorem>
 800840a:	4649      	mov	r1, r9
 800840c:	4605      	mov	r5, r0
 800840e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008412:	9804      	ldr	r0, [sp, #16]
 8008414:	f000 fea4 	bl	8009160 <__mcmp>
 8008418:	4632      	mov	r2, r6
 800841a:	9000      	str	r0, [sp, #0]
 800841c:	4639      	mov	r1, r7
 800841e:	4620      	mov	r0, r4
 8008420:	f000 feb8 	bl	8009194 <__mdiff>
 8008424:	68c3      	ldr	r3, [r0, #12]
 8008426:	4602      	mov	r2, r0
 8008428:	bb03      	cbnz	r3, 800846c <_dtoa_r+0x9fc>
 800842a:	4601      	mov	r1, r0
 800842c:	9008      	str	r0, [sp, #32]
 800842e:	9804      	ldr	r0, [sp, #16]
 8008430:	f000 fe96 	bl	8009160 <__mcmp>
 8008434:	9a08      	ldr	r2, [sp, #32]
 8008436:	4603      	mov	r3, r0
 8008438:	4611      	mov	r1, r2
 800843a:	4620      	mov	r0, r4
 800843c:	9308      	str	r3, [sp, #32]
 800843e:	f000 fc70 	bl	8008d22 <_Bfree>
 8008442:	9b08      	ldr	r3, [sp, #32]
 8008444:	b9a3      	cbnz	r3, 8008470 <_dtoa_r+0xa00>
 8008446:	9a06      	ldr	r2, [sp, #24]
 8008448:	b992      	cbnz	r2, 8008470 <_dtoa_r+0xa00>
 800844a:	9a07      	ldr	r2, [sp, #28]
 800844c:	b982      	cbnz	r2, 8008470 <_dtoa_r+0xa00>
 800844e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008452:	d029      	beq.n	80084a8 <_dtoa_r+0xa38>
 8008454:	9b00      	ldr	r3, [sp, #0]
 8008456:	2b00      	cmp	r3, #0
 8008458:	dd01      	ble.n	800845e <_dtoa_r+0x9ee>
 800845a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800845e:	9b05      	ldr	r3, [sp, #20]
 8008460:	1c5d      	adds	r5, r3, #1
 8008462:	f883 8000 	strb.w	r8, [r3]
 8008466:	e782      	b.n	800836e <_dtoa_r+0x8fe>
 8008468:	4630      	mov	r0, r6
 800846a:	e7c2      	b.n	80083f2 <_dtoa_r+0x982>
 800846c:	2301      	movs	r3, #1
 800846e:	e7e3      	b.n	8008438 <_dtoa_r+0x9c8>
 8008470:	9a00      	ldr	r2, [sp, #0]
 8008472:	2a00      	cmp	r2, #0
 8008474:	db04      	blt.n	8008480 <_dtoa_r+0xa10>
 8008476:	d125      	bne.n	80084c4 <_dtoa_r+0xa54>
 8008478:	9a06      	ldr	r2, [sp, #24]
 800847a:	bb1a      	cbnz	r2, 80084c4 <_dtoa_r+0xa54>
 800847c:	9a07      	ldr	r2, [sp, #28]
 800847e:	bb0a      	cbnz	r2, 80084c4 <_dtoa_r+0xa54>
 8008480:	2b00      	cmp	r3, #0
 8008482:	ddec      	ble.n	800845e <_dtoa_r+0x9ee>
 8008484:	2201      	movs	r2, #1
 8008486:	9904      	ldr	r1, [sp, #16]
 8008488:	4620      	mov	r0, r4
 800848a:	f000 fe15 	bl	80090b8 <__lshift>
 800848e:	4639      	mov	r1, r7
 8008490:	9004      	str	r0, [sp, #16]
 8008492:	f000 fe65 	bl	8009160 <__mcmp>
 8008496:	2800      	cmp	r0, #0
 8008498:	dc03      	bgt.n	80084a2 <_dtoa_r+0xa32>
 800849a:	d1e0      	bne.n	800845e <_dtoa_r+0x9ee>
 800849c:	f018 0f01 	tst.w	r8, #1
 80084a0:	d0dd      	beq.n	800845e <_dtoa_r+0x9ee>
 80084a2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80084a6:	d1d8      	bne.n	800845a <_dtoa_r+0x9ea>
 80084a8:	9b05      	ldr	r3, [sp, #20]
 80084aa:	9a05      	ldr	r2, [sp, #20]
 80084ac:	1c5d      	adds	r5, r3, #1
 80084ae:	2339      	movs	r3, #57	; 0x39
 80084b0:	7013      	strb	r3, [r2, #0]
 80084b2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80084b6:	2b39      	cmp	r3, #57	; 0x39
 80084b8:	f105 32ff 	add.w	r2, r5, #4294967295
 80084bc:	d04f      	beq.n	800855e <_dtoa_r+0xaee>
 80084be:	3301      	adds	r3, #1
 80084c0:	7013      	strb	r3, [r2, #0]
 80084c2:	e754      	b.n	800836e <_dtoa_r+0x8fe>
 80084c4:	9a05      	ldr	r2, [sp, #20]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	f102 0501 	add.w	r5, r2, #1
 80084cc:	dd06      	ble.n	80084dc <_dtoa_r+0xa6c>
 80084ce:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80084d2:	d0e9      	beq.n	80084a8 <_dtoa_r+0xa38>
 80084d4:	f108 0801 	add.w	r8, r8, #1
 80084d8:	9b05      	ldr	r3, [sp, #20]
 80084da:	e7c2      	b.n	8008462 <_dtoa_r+0x9f2>
 80084dc:	9a02      	ldr	r2, [sp, #8]
 80084de:	f805 8c01 	strb.w	r8, [r5, #-1]
 80084e2:	eba5 030b 	sub.w	r3, r5, fp
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d021      	beq.n	800852e <_dtoa_r+0xabe>
 80084ea:	2300      	movs	r3, #0
 80084ec:	220a      	movs	r2, #10
 80084ee:	9904      	ldr	r1, [sp, #16]
 80084f0:	4620      	mov	r0, r4
 80084f2:	f000 fc2d 	bl	8008d50 <__multadd>
 80084f6:	45b1      	cmp	r9, r6
 80084f8:	9004      	str	r0, [sp, #16]
 80084fa:	f04f 0300 	mov.w	r3, #0
 80084fe:	f04f 020a 	mov.w	r2, #10
 8008502:	4649      	mov	r1, r9
 8008504:	4620      	mov	r0, r4
 8008506:	d105      	bne.n	8008514 <_dtoa_r+0xaa4>
 8008508:	f000 fc22 	bl	8008d50 <__multadd>
 800850c:	4681      	mov	r9, r0
 800850e:	4606      	mov	r6, r0
 8008510:	9505      	str	r5, [sp, #20]
 8008512:	e776      	b.n	8008402 <_dtoa_r+0x992>
 8008514:	f000 fc1c 	bl	8008d50 <__multadd>
 8008518:	4631      	mov	r1, r6
 800851a:	4681      	mov	r9, r0
 800851c:	2300      	movs	r3, #0
 800851e:	220a      	movs	r2, #10
 8008520:	4620      	mov	r0, r4
 8008522:	f000 fc15 	bl	8008d50 <__multadd>
 8008526:	4606      	mov	r6, r0
 8008528:	e7f2      	b.n	8008510 <_dtoa_r+0xaa0>
 800852a:	f04f 0900 	mov.w	r9, #0
 800852e:	2201      	movs	r2, #1
 8008530:	9904      	ldr	r1, [sp, #16]
 8008532:	4620      	mov	r0, r4
 8008534:	f000 fdc0 	bl	80090b8 <__lshift>
 8008538:	4639      	mov	r1, r7
 800853a:	9004      	str	r0, [sp, #16]
 800853c:	f000 fe10 	bl	8009160 <__mcmp>
 8008540:	2800      	cmp	r0, #0
 8008542:	dcb6      	bgt.n	80084b2 <_dtoa_r+0xa42>
 8008544:	d102      	bne.n	800854c <_dtoa_r+0xadc>
 8008546:	f018 0f01 	tst.w	r8, #1
 800854a:	d1b2      	bne.n	80084b2 <_dtoa_r+0xa42>
 800854c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008550:	2b30      	cmp	r3, #48	; 0x30
 8008552:	f105 32ff 	add.w	r2, r5, #4294967295
 8008556:	f47f af0a 	bne.w	800836e <_dtoa_r+0x8fe>
 800855a:	4615      	mov	r5, r2
 800855c:	e7f6      	b.n	800854c <_dtoa_r+0xadc>
 800855e:	4593      	cmp	fp, r2
 8008560:	d105      	bne.n	800856e <_dtoa_r+0xafe>
 8008562:	2331      	movs	r3, #49	; 0x31
 8008564:	f10a 0a01 	add.w	sl, sl, #1
 8008568:	f88b 3000 	strb.w	r3, [fp]
 800856c:	e6ff      	b.n	800836e <_dtoa_r+0x8fe>
 800856e:	4615      	mov	r5, r2
 8008570:	e79f      	b.n	80084b2 <_dtoa_r+0xa42>
 8008572:	f8df b064 	ldr.w	fp, [pc, #100]	; 80085d8 <_dtoa_r+0xb68>
 8008576:	e007      	b.n	8008588 <_dtoa_r+0xb18>
 8008578:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800857a:	f8df b060 	ldr.w	fp, [pc, #96]	; 80085dc <_dtoa_r+0xb6c>
 800857e:	b11b      	cbz	r3, 8008588 <_dtoa_r+0xb18>
 8008580:	f10b 0308 	add.w	r3, fp, #8
 8008584:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008586:	6013      	str	r3, [r2, #0]
 8008588:	4658      	mov	r0, fp
 800858a:	b017      	add	sp, #92	; 0x5c
 800858c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008590:	9b06      	ldr	r3, [sp, #24]
 8008592:	2b01      	cmp	r3, #1
 8008594:	f77f ae35 	ble.w	8008202 <_dtoa_r+0x792>
 8008598:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800859a:	9307      	str	r3, [sp, #28]
 800859c:	e649      	b.n	8008232 <_dtoa_r+0x7c2>
 800859e:	9b02      	ldr	r3, [sp, #8]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	dc03      	bgt.n	80085ac <_dtoa_r+0xb3c>
 80085a4:	9b06      	ldr	r3, [sp, #24]
 80085a6:	2b02      	cmp	r3, #2
 80085a8:	f73f aecc 	bgt.w	8008344 <_dtoa_r+0x8d4>
 80085ac:	465d      	mov	r5, fp
 80085ae:	4639      	mov	r1, r7
 80085b0:	9804      	ldr	r0, [sp, #16]
 80085b2:	f7ff f9cf 	bl	8007954 <quorem>
 80085b6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80085ba:	f805 8b01 	strb.w	r8, [r5], #1
 80085be:	9a02      	ldr	r2, [sp, #8]
 80085c0:	eba5 030b 	sub.w	r3, r5, fp
 80085c4:	429a      	cmp	r2, r3
 80085c6:	ddb0      	ble.n	800852a <_dtoa_r+0xaba>
 80085c8:	2300      	movs	r3, #0
 80085ca:	220a      	movs	r2, #10
 80085cc:	9904      	ldr	r1, [sp, #16]
 80085ce:	4620      	mov	r0, r4
 80085d0:	f000 fbbe 	bl	8008d50 <__multadd>
 80085d4:	9004      	str	r0, [sp, #16]
 80085d6:	e7ea      	b.n	80085ae <_dtoa_r+0xb3e>
 80085d8:	0800a48b 	.word	0x0800a48b
 80085dc:	0800a350 	.word	0x0800a350

080085e0 <rshift>:
 80085e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085e2:	6906      	ldr	r6, [r0, #16]
 80085e4:	114b      	asrs	r3, r1, #5
 80085e6:	429e      	cmp	r6, r3
 80085e8:	f100 0414 	add.w	r4, r0, #20
 80085ec:	dd30      	ble.n	8008650 <rshift+0x70>
 80085ee:	f011 011f 	ands.w	r1, r1, #31
 80085f2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80085f6:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80085fa:	d108      	bne.n	800860e <rshift+0x2e>
 80085fc:	4621      	mov	r1, r4
 80085fe:	42b2      	cmp	r2, r6
 8008600:	460b      	mov	r3, r1
 8008602:	d211      	bcs.n	8008628 <rshift+0x48>
 8008604:	f852 3b04 	ldr.w	r3, [r2], #4
 8008608:	f841 3b04 	str.w	r3, [r1], #4
 800860c:	e7f7      	b.n	80085fe <rshift+0x1e>
 800860e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8008612:	f1c1 0c20 	rsb	ip, r1, #32
 8008616:	40cd      	lsrs	r5, r1
 8008618:	3204      	adds	r2, #4
 800861a:	4623      	mov	r3, r4
 800861c:	42b2      	cmp	r2, r6
 800861e:	4617      	mov	r7, r2
 8008620:	d30c      	bcc.n	800863c <rshift+0x5c>
 8008622:	601d      	str	r5, [r3, #0]
 8008624:	b105      	cbz	r5, 8008628 <rshift+0x48>
 8008626:	3304      	adds	r3, #4
 8008628:	1b1a      	subs	r2, r3, r4
 800862a:	42a3      	cmp	r3, r4
 800862c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008630:	bf08      	it	eq
 8008632:	2300      	moveq	r3, #0
 8008634:	6102      	str	r2, [r0, #16]
 8008636:	bf08      	it	eq
 8008638:	6143      	streq	r3, [r0, #20]
 800863a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800863c:	683f      	ldr	r7, [r7, #0]
 800863e:	fa07 f70c 	lsl.w	r7, r7, ip
 8008642:	433d      	orrs	r5, r7
 8008644:	f843 5b04 	str.w	r5, [r3], #4
 8008648:	f852 5b04 	ldr.w	r5, [r2], #4
 800864c:	40cd      	lsrs	r5, r1
 800864e:	e7e5      	b.n	800861c <rshift+0x3c>
 8008650:	4623      	mov	r3, r4
 8008652:	e7e9      	b.n	8008628 <rshift+0x48>

08008654 <__hexdig_fun>:
 8008654:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008658:	2b09      	cmp	r3, #9
 800865a:	d802      	bhi.n	8008662 <__hexdig_fun+0xe>
 800865c:	3820      	subs	r0, #32
 800865e:	b2c0      	uxtb	r0, r0
 8008660:	4770      	bx	lr
 8008662:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008666:	2b05      	cmp	r3, #5
 8008668:	d801      	bhi.n	800866e <__hexdig_fun+0x1a>
 800866a:	3847      	subs	r0, #71	; 0x47
 800866c:	e7f7      	b.n	800865e <__hexdig_fun+0xa>
 800866e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008672:	2b05      	cmp	r3, #5
 8008674:	d801      	bhi.n	800867a <__hexdig_fun+0x26>
 8008676:	3827      	subs	r0, #39	; 0x27
 8008678:	e7f1      	b.n	800865e <__hexdig_fun+0xa>
 800867a:	2000      	movs	r0, #0
 800867c:	4770      	bx	lr

0800867e <__gethex>:
 800867e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008682:	b08b      	sub	sp, #44	; 0x2c
 8008684:	468a      	mov	sl, r1
 8008686:	9002      	str	r0, [sp, #8]
 8008688:	9816      	ldr	r0, [sp, #88]	; 0x58
 800868a:	9306      	str	r3, [sp, #24]
 800868c:	4690      	mov	r8, r2
 800868e:	f000 fadf 	bl	8008c50 <__localeconv_l>
 8008692:	6803      	ldr	r3, [r0, #0]
 8008694:	9303      	str	r3, [sp, #12]
 8008696:	4618      	mov	r0, r3
 8008698:	f7f7 fda2 	bl	80001e0 <strlen>
 800869c:	9b03      	ldr	r3, [sp, #12]
 800869e:	9001      	str	r0, [sp, #4]
 80086a0:	4403      	add	r3, r0
 80086a2:	f04f 0b00 	mov.w	fp, #0
 80086a6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80086aa:	9307      	str	r3, [sp, #28]
 80086ac:	f8da 3000 	ldr.w	r3, [sl]
 80086b0:	3302      	adds	r3, #2
 80086b2:	461f      	mov	r7, r3
 80086b4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80086b8:	2830      	cmp	r0, #48	; 0x30
 80086ba:	d06c      	beq.n	8008796 <__gethex+0x118>
 80086bc:	f7ff ffca 	bl	8008654 <__hexdig_fun>
 80086c0:	4604      	mov	r4, r0
 80086c2:	2800      	cmp	r0, #0
 80086c4:	d16a      	bne.n	800879c <__gethex+0x11e>
 80086c6:	9a01      	ldr	r2, [sp, #4]
 80086c8:	9903      	ldr	r1, [sp, #12]
 80086ca:	4638      	mov	r0, r7
 80086cc:	f001 fc40 	bl	8009f50 <strncmp>
 80086d0:	2800      	cmp	r0, #0
 80086d2:	d166      	bne.n	80087a2 <__gethex+0x124>
 80086d4:	9b01      	ldr	r3, [sp, #4]
 80086d6:	5cf8      	ldrb	r0, [r7, r3]
 80086d8:	18fe      	adds	r6, r7, r3
 80086da:	f7ff ffbb 	bl	8008654 <__hexdig_fun>
 80086de:	2800      	cmp	r0, #0
 80086e0:	d062      	beq.n	80087a8 <__gethex+0x12a>
 80086e2:	4633      	mov	r3, r6
 80086e4:	7818      	ldrb	r0, [r3, #0]
 80086e6:	2830      	cmp	r0, #48	; 0x30
 80086e8:	461f      	mov	r7, r3
 80086ea:	f103 0301 	add.w	r3, r3, #1
 80086ee:	d0f9      	beq.n	80086e4 <__gethex+0x66>
 80086f0:	f7ff ffb0 	bl	8008654 <__hexdig_fun>
 80086f4:	fab0 f580 	clz	r5, r0
 80086f8:	096d      	lsrs	r5, r5, #5
 80086fa:	4634      	mov	r4, r6
 80086fc:	f04f 0b01 	mov.w	fp, #1
 8008700:	463a      	mov	r2, r7
 8008702:	4616      	mov	r6, r2
 8008704:	3201      	adds	r2, #1
 8008706:	7830      	ldrb	r0, [r6, #0]
 8008708:	f7ff ffa4 	bl	8008654 <__hexdig_fun>
 800870c:	2800      	cmp	r0, #0
 800870e:	d1f8      	bne.n	8008702 <__gethex+0x84>
 8008710:	9a01      	ldr	r2, [sp, #4]
 8008712:	9903      	ldr	r1, [sp, #12]
 8008714:	4630      	mov	r0, r6
 8008716:	f001 fc1b 	bl	8009f50 <strncmp>
 800871a:	b950      	cbnz	r0, 8008732 <__gethex+0xb4>
 800871c:	b954      	cbnz	r4, 8008734 <__gethex+0xb6>
 800871e:	9b01      	ldr	r3, [sp, #4]
 8008720:	18f4      	adds	r4, r6, r3
 8008722:	4622      	mov	r2, r4
 8008724:	4616      	mov	r6, r2
 8008726:	3201      	adds	r2, #1
 8008728:	7830      	ldrb	r0, [r6, #0]
 800872a:	f7ff ff93 	bl	8008654 <__hexdig_fun>
 800872e:	2800      	cmp	r0, #0
 8008730:	d1f8      	bne.n	8008724 <__gethex+0xa6>
 8008732:	b10c      	cbz	r4, 8008738 <__gethex+0xba>
 8008734:	1ba4      	subs	r4, r4, r6
 8008736:	00a4      	lsls	r4, r4, #2
 8008738:	7833      	ldrb	r3, [r6, #0]
 800873a:	2b50      	cmp	r3, #80	; 0x50
 800873c:	d001      	beq.n	8008742 <__gethex+0xc4>
 800873e:	2b70      	cmp	r3, #112	; 0x70
 8008740:	d140      	bne.n	80087c4 <__gethex+0x146>
 8008742:	7873      	ldrb	r3, [r6, #1]
 8008744:	2b2b      	cmp	r3, #43	; 0x2b
 8008746:	d031      	beq.n	80087ac <__gethex+0x12e>
 8008748:	2b2d      	cmp	r3, #45	; 0x2d
 800874a:	d033      	beq.n	80087b4 <__gethex+0x136>
 800874c:	1c71      	adds	r1, r6, #1
 800874e:	f04f 0900 	mov.w	r9, #0
 8008752:	7808      	ldrb	r0, [r1, #0]
 8008754:	f7ff ff7e 	bl	8008654 <__hexdig_fun>
 8008758:	1e43      	subs	r3, r0, #1
 800875a:	b2db      	uxtb	r3, r3
 800875c:	2b18      	cmp	r3, #24
 800875e:	d831      	bhi.n	80087c4 <__gethex+0x146>
 8008760:	f1a0 0210 	sub.w	r2, r0, #16
 8008764:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008768:	f7ff ff74 	bl	8008654 <__hexdig_fun>
 800876c:	1e43      	subs	r3, r0, #1
 800876e:	b2db      	uxtb	r3, r3
 8008770:	2b18      	cmp	r3, #24
 8008772:	d922      	bls.n	80087ba <__gethex+0x13c>
 8008774:	f1b9 0f00 	cmp.w	r9, #0
 8008778:	d000      	beq.n	800877c <__gethex+0xfe>
 800877a:	4252      	negs	r2, r2
 800877c:	4414      	add	r4, r2
 800877e:	f8ca 1000 	str.w	r1, [sl]
 8008782:	b30d      	cbz	r5, 80087c8 <__gethex+0x14a>
 8008784:	f1bb 0f00 	cmp.w	fp, #0
 8008788:	bf0c      	ite	eq
 800878a:	2706      	moveq	r7, #6
 800878c:	2700      	movne	r7, #0
 800878e:	4638      	mov	r0, r7
 8008790:	b00b      	add	sp, #44	; 0x2c
 8008792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008796:	f10b 0b01 	add.w	fp, fp, #1
 800879a:	e78a      	b.n	80086b2 <__gethex+0x34>
 800879c:	2500      	movs	r5, #0
 800879e:	462c      	mov	r4, r5
 80087a0:	e7ae      	b.n	8008700 <__gethex+0x82>
 80087a2:	463e      	mov	r6, r7
 80087a4:	2501      	movs	r5, #1
 80087a6:	e7c7      	b.n	8008738 <__gethex+0xba>
 80087a8:	4604      	mov	r4, r0
 80087aa:	e7fb      	b.n	80087a4 <__gethex+0x126>
 80087ac:	f04f 0900 	mov.w	r9, #0
 80087b0:	1cb1      	adds	r1, r6, #2
 80087b2:	e7ce      	b.n	8008752 <__gethex+0xd4>
 80087b4:	f04f 0901 	mov.w	r9, #1
 80087b8:	e7fa      	b.n	80087b0 <__gethex+0x132>
 80087ba:	230a      	movs	r3, #10
 80087bc:	fb03 0202 	mla	r2, r3, r2, r0
 80087c0:	3a10      	subs	r2, #16
 80087c2:	e7cf      	b.n	8008764 <__gethex+0xe6>
 80087c4:	4631      	mov	r1, r6
 80087c6:	e7da      	b.n	800877e <__gethex+0x100>
 80087c8:	1bf3      	subs	r3, r6, r7
 80087ca:	3b01      	subs	r3, #1
 80087cc:	4629      	mov	r1, r5
 80087ce:	2b07      	cmp	r3, #7
 80087d0:	dc49      	bgt.n	8008866 <__gethex+0x1e8>
 80087d2:	9802      	ldr	r0, [sp, #8]
 80087d4:	f000 fa71 	bl	8008cba <_Balloc>
 80087d8:	9b01      	ldr	r3, [sp, #4]
 80087da:	f100 0914 	add.w	r9, r0, #20
 80087de:	f04f 0b00 	mov.w	fp, #0
 80087e2:	f1c3 0301 	rsb	r3, r3, #1
 80087e6:	4605      	mov	r5, r0
 80087e8:	f8cd 9010 	str.w	r9, [sp, #16]
 80087ec:	46da      	mov	sl, fp
 80087ee:	9308      	str	r3, [sp, #32]
 80087f0:	42b7      	cmp	r7, r6
 80087f2:	d33b      	bcc.n	800886c <__gethex+0x1ee>
 80087f4:	9804      	ldr	r0, [sp, #16]
 80087f6:	f840 ab04 	str.w	sl, [r0], #4
 80087fa:	eba0 0009 	sub.w	r0, r0, r9
 80087fe:	1080      	asrs	r0, r0, #2
 8008800:	6128      	str	r0, [r5, #16]
 8008802:	0147      	lsls	r7, r0, #5
 8008804:	4650      	mov	r0, sl
 8008806:	f000 fb1c 	bl	8008e42 <__hi0bits>
 800880a:	f8d8 6000 	ldr.w	r6, [r8]
 800880e:	1a3f      	subs	r7, r7, r0
 8008810:	42b7      	cmp	r7, r6
 8008812:	dd64      	ble.n	80088de <__gethex+0x260>
 8008814:	1bbf      	subs	r7, r7, r6
 8008816:	4639      	mov	r1, r7
 8008818:	4628      	mov	r0, r5
 800881a:	f000 fe2b 	bl	8009474 <__any_on>
 800881e:	4682      	mov	sl, r0
 8008820:	b178      	cbz	r0, 8008842 <__gethex+0x1c4>
 8008822:	1e7b      	subs	r3, r7, #1
 8008824:	1159      	asrs	r1, r3, #5
 8008826:	f003 021f 	and.w	r2, r3, #31
 800882a:	f04f 0a01 	mov.w	sl, #1
 800882e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008832:	fa0a f202 	lsl.w	r2, sl, r2
 8008836:	420a      	tst	r2, r1
 8008838:	d003      	beq.n	8008842 <__gethex+0x1c4>
 800883a:	4553      	cmp	r3, sl
 800883c:	dc46      	bgt.n	80088cc <__gethex+0x24e>
 800883e:	f04f 0a02 	mov.w	sl, #2
 8008842:	4639      	mov	r1, r7
 8008844:	4628      	mov	r0, r5
 8008846:	f7ff fecb 	bl	80085e0 <rshift>
 800884a:	443c      	add	r4, r7
 800884c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008850:	42a3      	cmp	r3, r4
 8008852:	da52      	bge.n	80088fa <__gethex+0x27c>
 8008854:	4629      	mov	r1, r5
 8008856:	9802      	ldr	r0, [sp, #8]
 8008858:	f000 fa63 	bl	8008d22 <_Bfree>
 800885c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800885e:	2300      	movs	r3, #0
 8008860:	6013      	str	r3, [r2, #0]
 8008862:	27a3      	movs	r7, #163	; 0xa3
 8008864:	e793      	b.n	800878e <__gethex+0x110>
 8008866:	3101      	adds	r1, #1
 8008868:	105b      	asrs	r3, r3, #1
 800886a:	e7b0      	b.n	80087ce <__gethex+0x150>
 800886c:	1e73      	subs	r3, r6, #1
 800886e:	9305      	str	r3, [sp, #20]
 8008870:	9a07      	ldr	r2, [sp, #28]
 8008872:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008876:	4293      	cmp	r3, r2
 8008878:	d018      	beq.n	80088ac <__gethex+0x22e>
 800887a:	f1bb 0f20 	cmp.w	fp, #32
 800887e:	d107      	bne.n	8008890 <__gethex+0x212>
 8008880:	9b04      	ldr	r3, [sp, #16]
 8008882:	f8c3 a000 	str.w	sl, [r3]
 8008886:	3304      	adds	r3, #4
 8008888:	f04f 0a00 	mov.w	sl, #0
 800888c:	9304      	str	r3, [sp, #16]
 800888e:	46d3      	mov	fp, sl
 8008890:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008894:	f7ff fede 	bl	8008654 <__hexdig_fun>
 8008898:	f000 000f 	and.w	r0, r0, #15
 800889c:	fa00 f00b 	lsl.w	r0, r0, fp
 80088a0:	ea4a 0a00 	orr.w	sl, sl, r0
 80088a4:	f10b 0b04 	add.w	fp, fp, #4
 80088a8:	9b05      	ldr	r3, [sp, #20]
 80088aa:	e00d      	b.n	80088c8 <__gethex+0x24a>
 80088ac:	9b05      	ldr	r3, [sp, #20]
 80088ae:	9a08      	ldr	r2, [sp, #32]
 80088b0:	4413      	add	r3, r2
 80088b2:	42bb      	cmp	r3, r7
 80088b4:	d3e1      	bcc.n	800887a <__gethex+0x1fc>
 80088b6:	4618      	mov	r0, r3
 80088b8:	9a01      	ldr	r2, [sp, #4]
 80088ba:	9903      	ldr	r1, [sp, #12]
 80088bc:	9309      	str	r3, [sp, #36]	; 0x24
 80088be:	f001 fb47 	bl	8009f50 <strncmp>
 80088c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088c4:	2800      	cmp	r0, #0
 80088c6:	d1d8      	bne.n	800887a <__gethex+0x1fc>
 80088c8:	461e      	mov	r6, r3
 80088ca:	e791      	b.n	80087f0 <__gethex+0x172>
 80088cc:	1eb9      	subs	r1, r7, #2
 80088ce:	4628      	mov	r0, r5
 80088d0:	f000 fdd0 	bl	8009474 <__any_on>
 80088d4:	2800      	cmp	r0, #0
 80088d6:	d0b2      	beq.n	800883e <__gethex+0x1c0>
 80088d8:	f04f 0a03 	mov.w	sl, #3
 80088dc:	e7b1      	b.n	8008842 <__gethex+0x1c4>
 80088de:	da09      	bge.n	80088f4 <__gethex+0x276>
 80088e0:	1bf7      	subs	r7, r6, r7
 80088e2:	4629      	mov	r1, r5
 80088e4:	463a      	mov	r2, r7
 80088e6:	9802      	ldr	r0, [sp, #8]
 80088e8:	f000 fbe6 	bl	80090b8 <__lshift>
 80088ec:	1be4      	subs	r4, r4, r7
 80088ee:	4605      	mov	r5, r0
 80088f0:	f100 0914 	add.w	r9, r0, #20
 80088f4:	f04f 0a00 	mov.w	sl, #0
 80088f8:	e7a8      	b.n	800884c <__gethex+0x1ce>
 80088fa:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80088fe:	42a0      	cmp	r0, r4
 8008900:	dd6a      	ble.n	80089d8 <__gethex+0x35a>
 8008902:	1b04      	subs	r4, r0, r4
 8008904:	42a6      	cmp	r6, r4
 8008906:	dc2e      	bgt.n	8008966 <__gethex+0x2e8>
 8008908:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800890c:	2b02      	cmp	r3, #2
 800890e:	d022      	beq.n	8008956 <__gethex+0x2d8>
 8008910:	2b03      	cmp	r3, #3
 8008912:	d024      	beq.n	800895e <__gethex+0x2e0>
 8008914:	2b01      	cmp	r3, #1
 8008916:	d115      	bne.n	8008944 <__gethex+0x2c6>
 8008918:	42a6      	cmp	r6, r4
 800891a:	d113      	bne.n	8008944 <__gethex+0x2c6>
 800891c:	2e01      	cmp	r6, #1
 800891e:	dc0b      	bgt.n	8008938 <__gethex+0x2ba>
 8008920:	9a06      	ldr	r2, [sp, #24]
 8008922:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008926:	6013      	str	r3, [r2, #0]
 8008928:	2301      	movs	r3, #1
 800892a:	612b      	str	r3, [r5, #16]
 800892c:	f8c9 3000 	str.w	r3, [r9]
 8008930:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008932:	2762      	movs	r7, #98	; 0x62
 8008934:	601d      	str	r5, [r3, #0]
 8008936:	e72a      	b.n	800878e <__gethex+0x110>
 8008938:	1e71      	subs	r1, r6, #1
 800893a:	4628      	mov	r0, r5
 800893c:	f000 fd9a 	bl	8009474 <__any_on>
 8008940:	2800      	cmp	r0, #0
 8008942:	d1ed      	bne.n	8008920 <__gethex+0x2a2>
 8008944:	4629      	mov	r1, r5
 8008946:	9802      	ldr	r0, [sp, #8]
 8008948:	f000 f9eb 	bl	8008d22 <_Bfree>
 800894c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800894e:	2300      	movs	r3, #0
 8008950:	6013      	str	r3, [r2, #0]
 8008952:	2750      	movs	r7, #80	; 0x50
 8008954:	e71b      	b.n	800878e <__gethex+0x110>
 8008956:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008958:	2b00      	cmp	r3, #0
 800895a:	d0e1      	beq.n	8008920 <__gethex+0x2a2>
 800895c:	e7f2      	b.n	8008944 <__gethex+0x2c6>
 800895e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008960:	2b00      	cmp	r3, #0
 8008962:	d1dd      	bne.n	8008920 <__gethex+0x2a2>
 8008964:	e7ee      	b.n	8008944 <__gethex+0x2c6>
 8008966:	1e67      	subs	r7, r4, #1
 8008968:	f1ba 0f00 	cmp.w	sl, #0
 800896c:	d131      	bne.n	80089d2 <__gethex+0x354>
 800896e:	b127      	cbz	r7, 800897a <__gethex+0x2fc>
 8008970:	4639      	mov	r1, r7
 8008972:	4628      	mov	r0, r5
 8008974:	f000 fd7e 	bl	8009474 <__any_on>
 8008978:	4682      	mov	sl, r0
 800897a:	117a      	asrs	r2, r7, #5
 800897c:	2301      	movs	r3, #1
 800897e:	f007 071f 	and.w	r7, r7, #31
 8008982:	fa03 f707 	lsl.w	r7, r3, r7
 8008986:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800898a:	4621      	mov	r1, r4
 800898c:	421f      	tst	r7, r3
 800898e:	4628      	mov	r0, r5
 8008990:	bf18      	it	ne
 8008992:	f04a 0a02 	orrne.w	sl, sl, #2
 8008996:	1b36      	subs	r6, r6, r4
 8008998:	f7ff fe22 	bl	80085e0 <rshift>
 800899c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80089a0:	2702      	movs	r7, #2
 80089a2:	f1ba 0f00 	cmp.w	sl, #0
 80089a6:	d048      	beq.n	8008a3a <__gethex+0x3bc>
 80089a8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80089ac:	2b02      	cmp	r3, #2
 80089ae:	d015      	beq.n	80089dc <__gethex+0x35e>
 80089b0:	2b03      	cmp	r3, #3
 80089b2:	d017      	beq.n	80089e4 <__gethex+0x366>
 80089b4:	2b01      	cmp	r3, #1
 80089b6:	d109      	bne.n	80089cc <__gethex+0x34e>
 80089b8:	f01a 0f02 	tst.w	sl, #2
 80089bc:	d006      	beq.n	80089cc <__gethex+0x34e>
 80089be:	f8d9 3000 	ldr.w	r3, [r9]
 80089c2:	ea4a 0a03 	orr.w	sl, sl, r3
 80089c6:	f01a 0f01 	tst.w	sl, #1
 80089ca:	d10e      	bne.n	80089ea <__gethex+0x36c>
 80089cc:	f047 0710 	orr.w	r7, r7, #16
 80089d0:	e033      	b.n	8008a3a <__gethex+0x3bc>
 80089d2:	f04f 0a01 	mov.w	sl, #1
 80089d6:	e7d0      	b.n	800897a <__gethex+0x2fc>
 80089d8:	2701      	movs	r7, #1
 80089da:	e7e2      	b.n	80089a2 <__gethex+0x324>
 80089dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80089de:	f1c3 0301 	rsb	r3, r3, #1
 80089e2:	9315      	str	r3, [sp, #84]	; 0x54
 80089e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d0f0      	beq.n	80089cc <__gethex+0x34e>
 80089ea:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80089ee:	f105 0314 	add.w	r3, r5, #20
 80089f2:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80089f6:	eb03 010a 	add.w	r1, r3, sl
 80089fa:	f04f 0c00 	mov.w	ip, #0
 80089fe:	4618      	mov	r0, r3
 8008a00:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a04:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008a08:	d01c      	beq.n	8008a44 <__gethex+0x3c6>
 8008a0a:	3201      	adds	r2, #1
 8008a0c:	6002      	str	r2, [r0, #0]
 8008a0e:	2f02      	cmp	r7, #2
 8008a10:	f105 0314 	add.w	r3, r5, #20
 8008a14:	d138      	bne.n	8008a88 <__gethex+0x40a>
 8008a16:	f8d8 2000 	ldr.w	r2, [r8]
 8008a1a:	3a01      	subs	r2, #1
 8008a1c:	42b2      	cmp	r2, r6
 8008a1e:	d10a      	bne.n	8008a36 <__gethex+0x3b8>
 8008a20:	1171      	asrs	r1, r6, #5
 8008a22:	2201      	movs	r2, #1
 8008a24:	f006 061f 	and.w	r6, r6, #31
 8008a28:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008a2c:	fa02 f606 	lsl.w	r6, r2, r6
 8008a30:	421e      	tst	r6, r3
 8008a32:	bf18      	it	ne
 8008a34:	4617      	movne	r7, r2
 8008a36:	f047 0720 	orr.w	r7, r7, #32
 8008a3a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008a3c:	601d      	str	r5, [r3, #0]
 8008a3e:	9b06      	ldr	r3, [sp, #24]
 8008a40:	601c      	str	r4, [r3, #0]
 8008a42:	e6a4      	b.n	800878e <__gethex+0x110>
 8008a44:	4299      	cmp	r1, r3
 8008a46:	f843 cc04 	str.w	ip, [r3, #-4]
 8008a4a:	d8d8      	bhi.n	80089fe <__gethex+0x380>
 8008a4c:	68ab      	ldr	r3, [r5, #8]
 8008a4e:	4599      	cmp	r9, r3
 8008a50:	db12      	blt.n	8008a78 <__gethex+0x3fa>
 8008a52:	6869      	ldr	r1, [r5, #4]
 8008a54:	9802      	ldr	r0, [sp, #8]
 8008a56:	3101      	adds	r1, #1
 8008a58:	f000 f92f 	bl	8008cba <_Balloc>
 8008a5c:	692a      	ldr	r2, [r5, #16]
 8008a5e:	3202      	adds	r2, #2
 8008a60:	f105 010c 	add.w	r1, r5, #12
 8008a64:	4683      	mov	fp, r0
 8008a66:	0092      	lsls	r2, r2, #2
 8008a68:	300c      	adds	r0, #12
 8008a6a:	f000 f91b 	bl	8008ca4 <memcpy>
 8008a6e:	4629      	mov	r1, r5
 8008a70:	9802      	ldr	r0, [sp, #8]
 8008a72:	f000 f956 	bl	8008d22 <_Bfree>
 8008a76:	465d      	mov	r5, fp
 8008a78:	692b      	ldr	r3, [r5, #16]
 8008a7a:	1c5a      	adds	r2, r3, #1
 8008a7c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8008a80:	612a      	str	r2, [r5, #16]
 8008a82:	2201      	movs	r2, #1
 8008a84:	615a      	str	r2, [r3, #20]
 8008a86:	e7c2      	b.n	8008a0e <__gethex+0x390>
 8008a88:	692a      	ldr	r2, [r5, #16]
 8008a8a:	454a      	cmp	r2, r9
 8008a8c:	dd0b      	ble.n	8008aa6 <__gethex+0x428>
 8008a8e:	2101      	movs	r1, #1
 8008a90:	4628      	mov	r0, r5
 8008a92:	f7ff fda5 	bl	80085e0 <rshift>
 8008a96:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008a9a:	3401      	adds	r4, #1
 8008a9c:	42a3      	cmp	r3, r4
 8008a9e:	f6ff aed9 	blt.w	8008854 <__gethex+0x1d6>
 8008aa2:	2701      	movs	r7, #1
 8008aa4:	e7c7      	b.n	8008a36 <__gethex+0x3b8>
 8008aa6:	f016 061f 	ands.w	r6, r6, #31
 8008aaa:	d0fa      	beq.n	8008aa2 <__gethex+0x424>
 8008aac:	449a      	add	sl, r3
 8008aae:	f1c6 0620 	rsb	r6, r6, #32
 8008ab2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8008ab6:	f000 f9c4 	bl	8008e42 <__hi0bits>
 8008aba:	42b0      	cmp	r0, r6
 8008abc:	dbe7      	blt.n	8008a8e <__gethex+0x410>
 8008abe:	e7f0      	b.n	8008aa2 <__gethex+0x424>

08008ac0 <L_shift>:
 8008ac0:	f1c2 0208 	rsb	r2, r2, #8
 8008ac4:	0092      	lsls	r2, r2, #2
 8008ac6:	b570      	push	{r4, r5, r6, lr}
 8008ac8:	f1c2 0620 	rsb	r6, r2, #32
 8008acc:	6843      	ldr	r3, [r0, #4]
 8008ace:	6804      	ldr	r4, [r0, #0]
 8008ad0:	fa03 f506 	lsl.w	r5, r3, r6
 8008ad4:	432c      	orrs	r4, r5
 8008ad6:	40d3      	lsrs	r3, r2
 8008ad8:	6004      	str	r4, [r0, #0]
 8008ada:	f840 3f04 	str.w	r3, [r0, #4]!
 8008ade:	4288      	cmp	r0, r1
 8008ae0:	d3f4      	bcc.n	8008acc <L_shift+0xc>
 8008ae2:	bd70      	pop	{r4, r5, r6, pc}

08008ae4 <__match>:
 8008ae4:	b530      	push	{r4, r5, lr}
 8008ae6:	6803      	ldr	r3, [r0, #0]
 8008ae8:	3301      	adds	r3, #1
 8008aea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008aee:	b914      	cbnz	r4, 8008af6 <__match+0x12>
 8008af0:	6003      	str	r3, [r0, #0]
 8008af2:	2001      	movs	r0, #1
 8008af4:	bd30      	pop	{r4, r5, pc}
 8008af6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008afa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008afe:	2d19      	cmp	r5, #25
 8008b00:	bf98      	it	ls
 8008b02:	3220      	addls	r2, #32
 8008b04:	42a2      	cmp	r2, r4
 8008b06:	d0f0      	beq.n	8008aea <__match+0x6>
 8008b08:	2000      	movs	r0, #0
 8008b0a:	e7f3      	b.n	8008af4 <__match+0x10>

08008b0c <__hexnan>:
 8008b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b10:	680b      	ldr	r3, [r1, #0]
 8008b12:	6801      	ldr	r1, [r0, #0]
 8008b14:	115f      	asrs	r7, r3, #5
 8008b16:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8008b1a:	f013 031f 	ands.w	r3, r3, #31
 8008b1e:	b087      	sub	sp, #28
 8008b20:	bf18      	it	ne
 8008b22:	3704      	addne	r7, #4
 8008b24:	2500      	movs	r5, #0
 8008b26:	1f3e      	subs	r6, r7, #4
 8008b28:	4682      	mov	sl, r0
 8008b2a:	4690      	mov	r8, r2
 8008b2c:	9301      	str	r3, [sp, #4]
 8008b2e:	f847 5c04 	str.w	r5, [r7, #-4]
 8008b32:	46b1      	mov	r9, r6
 8008b34:	4634      	mov	r4, r6
 8008b36:	9502      	str	r5, [sp, #8]
 8008b38:	46ab      	mov	fp, r5
 8008b3a:	784a      	ldrb	r2, [r1, #1]
 8008b3c:	1c4b      	adds	r3, r1, #1
 8008b3e:	9303      	str	r3, [sp, #12]
 8008b40:	b342      	cbz	r2, 8008b94 <__hexnan+0x88>
 8008b42:	4610      	mov	r0, r2
 8008b44:	9105      	str	r1, [sp, #20]
 8008b46:	9204      	str	r2, [sp, #16]
 8008b48:	f7ff fd84 	bl	8008654 <__hexdig_fun>
 8008b4c:	2800      	cmp	r0, #0
 8008b4e:	d143      	bne.n	8008bd8 <__hexnan+0xcc>
 8008b50:	9a04      	ldr	r2, [sp, #16]
 8008b52:	9905      	ldr	r1, [sp, #20]
 8008b54:	2a20      	cmp	r2, #32
 8008b56:	d818      	bhi.n	8008b8a <__hexnan+0x7e>
 8008b58:	9b02      	ldr	r3, [sp, #8]
 8008b5a:	459b      	cmp	fp, r3
 8008b5c:	dd13      	ble.n	8008b86 <__hexnan+0x7a>
 8008b5e:	454c      	cmp	r4, r9
 8008b60:	d206      	bcs.n	8008b70 <__hexnan+0x64>
 8008b62:	2d07      	cmp	r5, #7
 8008b64:	dc04      	bgt.n	8008b70 <__hexnan+0x64>
 8008b66:	462a      	mov	r2, r5
 8008b68:	4649      	mov	r1, r9
 8008b6a:	4620      	mov	r0, r4
 8008b6c:	f7ff ffa8 	bl	8008ac0 <L_shift>
 8008b70:	4544      	cmp	r4, r8
 8008b72:	d944      	bls.n	8008bfe <__hexnan+0xf2>
 8008b74:	2300      	movs	r3, #0
 8008b76:	f1a4 0904 	sub.w	r9, r4, #4
 8008b7a:	f844 3c04 	str.w	r3, [r4, #-4]
 8008b7e:	f8cd b008 	str.w	fp, [sp, #8]
 8008b82:	464c      	mov	r4, r9
 8008b84:	461d      	mov	r5, r3
 8008b86:	9903      	ldr	r1, [sp, #12]
 8008b88:	e7d7      	b.n	8008b3a <__hexnan+0x2e>
 8008b8a:	2a29      	cmp	r2, #41	; 0x29
 8008b8c:	d14a      	bne.n	8008c24 <__hexnan+0x118>
 8008b8e:	3102      	adds	r1, #2
 8008b90:	f8ca 1000 	str.w	r1, [sl]
 8008b94:	f1bb 0f00 	cmp.w	fp, #0
 8008b98:	d044      	beq.n	8008c24 <__hexnan+0x118>
 8008b9a:	454c      	cmp	r4, r9
 8008b9c:	d206      	bcs.n	8008bac <__hexnan+0xa0>
 8008b9e:	2d07      	cmp	r5, #7
 8008ba0:	dc04      	bgt.n	8008bac <__hexnan+0xa0>
 8008ba2:	462a      	mov	r2, r5
 8008ba4:	4649      	mov	r1, r9
 8008ba6:	4620      	mov	r0, r4
 8008ba8:	f7ff ff8a 	bl	8008ac0 <L_shift>
 8008bac:	4544      	cmp	r4, r8
 8008bae:	d928      	bls.n	8008c02 <__hexnan+0xf6>
 8008bb0:	4643      	mov	r3, r8
 8008bb2:	f854 2b04 	ldr.w	r2, [r4], #4
 8008bb6:	f843 2b04 	str.w	r2, [r3], #4
 8008bba:	42a6      	cmp	r6, r4
 8008bbc:	d2f9      	bcs.n	8008bb2 <__hexnan+0xa6>
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	f843 2b04 	str.w	r2, [r3], #4
 8008bc4:	429e      	cmp	r6, r3
 8008bc6:	d2fb      	bcs.n	8008bc0 <__hexnan+0xb4>
 8008bc8:	6833      	ldr	r3, [r6, #0]
 8008bca:	b91b      	cbnz	r3, 8008bd4 <__hexnan+0xc8>
 8008bcc:	4546      	cmp	r6, r8
 8008bce:	d127      	bne.n	8008c20 <__hexnan+0x114>
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	6033      	str	r3, [r6, #0]
 8008bd4:	2005      	movs	r0, #5
 8008bd6:	e026      	b.n	8008c26 <__hexnan+0x11a>
 8008bd8:	3501      	adds	r5, #1
 8008bda:	2d08      	cmp	r5, #8
 8008bdc:	f10b 0b01 	add.w	fp, fp, #1
 8008be0:	dd06      	ble.n	8008bf0 <__hexnan+0xe4>
 8008be2:	4544      	cmp	r4, r8
 8008be4:	d9cf      	bls.n	8008b86 <__hexnan+0x7a>
 8008be6:	2300      	movs	r3, #0
 8008be8:	f844 3c04 	str.w	r3, [r4, #-4]
 8008bec:	2501      	movs	r5, #1
 8008bee:	3c04      	subs	r4, #4
 8008bf0:	6822      	ldr	r2, [r4, #0]
 8008bf2:	f000 000f 	and.w	r0, r0, #15
 8008bf6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008bfa:	6020      	str	r0, [r4, #0]
 8008bfc:	e7c3      	b.n	8008b86 <__hexnan+0x7a>
 8008bfe:	2508      	movs	r5, #8
 8008c00:	e7c1      	b.n	8008b86 <__hexnan+0x7a>
 8008c02:	9b01      	ldr	r3, [sp, #4]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d0df      	beq.n	8008bc8 <__hexnan+0xbc>
 8008c08:	f04f 32ff 	mov.w	r2, #4294967295
 8008c0c:	f1c3 0320 	rsb	r3, r3, #32
 8008c10:	fa22 f303 	lsr.w	r3, r2, r3
 8008c14:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8008c18:	401a      	ands	r2, r3
 8008c1a:	f847 2c04 	str.w	r2, [r7, #-4]
 8008c1e:	e7d3      	b.n	8008bc8 <__hexnan+0xbc>
 8008c20:	3e04      	subs	r6, #4
 8008c22:	e7d1      	b.n	8008bc8 <__hexnan+0xbc>
 8008c24:	2004      	movs	r0, #4
 8008c26:	b007      	add	sp, #28
 8008c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008c2c <__locale_ctype_ptr_l>:
 8008c2c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8008c30:	4770      	bx	lr
	...

08008c34 <__locale_ctype_ptr>:
 8008c34:	4b04      	ldr	r3, [pc, #16]	; (8008c48 <__locale_ctype_ptr+0x14>)
 8008c36:	4a05      	ldr	r2, [pc, #20]	; (8008c4c <__locale_ctype_ptr+0x18>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	6a1b      	ldr	r3, [r3, #32]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	bf08      	it	eq
 8008c40:	4613      	moveq	r3, r2
 8008c42:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8008c46:	4770      	bx	lr
 8008c48:	2000022c 	.word	0x2000022c
 8008c4c:	20000290 	.word	0x20000290

08008c50 <__localeconv_l>:
 8008c50:	30f0      	adds	r0, #240	; 0xf0
 8008c52:	4770      	bx	lr

08008c54 <_localeconv_r>:
 8008c54:	4b04      	ldr	r3, [pc, #16]	; (8008c68 <_localeconv_r+0x14>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	6a18      	ldr	r0, [r3, #32]
 8008c5a:	4b04      	ldr	r3, [pc, #16]	; (8008c6c <_localeconv_r+0x18>)
 8008c5c:	2800      	cmp	r0, #0
 8008c5e:	bf08      	it	eq
 8008c60:	4618      	moveq	r0, r3
 8008c62:	30f0      	adds	r0, #240	; 0xf0
 8008c64:	4770      	bx	lr
 8008c66:	bf00      	nop
 8008c68:	2000022c 	.word	0x2000022c
 8008c6c:	20000290 	.word	0x20000290

08008c70 <malloc>:
 8008c70:	4b02      	ldr	r3, [pc, #8]	; (8008c7c <malloc+0xc>)
 8008c72:	4601      	mov	r1, r0
 8008c74:	6818      	ldr	r0, [r3, #0]
 8008c76:	f000 bc7b 	b.w	8009570 <_malloc_r>
 8008c7a:	bf00      	nop
 8008c7c:	2000022c 	.word	0x2000022c

08008c80 <__ascii_mbtowc>:
 8008c80:	b082      	sub	sp, #8
 8008c82:	b901      	cbnz	r1, 8008c86 <__ascii_mbtowc+0x6>
 8008c84:	a901      	add	r1, sp, #4
 8008c86:	b142      	cbz	r2, 8008c9a <__ascii_mbtowc+0x1a>
 8008c88:	b14b      	cbz	r3, 8008c9e <__ascii_mbtowc+0x1e>
 8008c8a:	7813      	ldrb	r3, [r2, #0]
 8008c8c:	600b      	str	r3, [r1, #0]
 8008c8e:	7812      	ldrb	r2, [r2, #0]
 8008c90:	1c10      	adds	r0, r2, #0
 8008c92:	bf18      	it	ne
 8008c94:	2001      	movne	r0, #1
 8008c96:	b002      	add	sp, #8
 8008c98:	4770      	bx	lr
 8008c9a:	4610      	mov	r0, r2
 8008c9c:	e7fb      	b.n	8008c96 <__ascii_mbtowc+0x16>
 8008c9e:	f06f 0001 	mvn.w	r0, #1
 8008ca2:	e7f8      	b.n	8008c96 <__ascii_mbtowc+0x16>

08008ca4 <memcpy>:
 8008ca4:	b510      	push	{r4, lr}
 8008ca6:	1e43      	subs	r3, r0, #1
 8008ca8:	440a      	add	r2, r1
 8008caa:	4291      	cmp	r1, r2
 8008cac:	d100      	bne.n	8008cb0 <memcpy+0xc>
 8008cae:	bd10      	pop	{r4, pc}
 8008cb0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008cb4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008cb8:	e7f7      	b.n	8008caa <memcpy+0x6>

08008cba <_Balloc>:
 8008cba:	b570      	push	{r4, r5, r6, lr}
 8008cbc:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008cbe:	4604      	mov	r4, r0
 8008cc0:	460e      	mov	r6, r1
 8008cc2:	b93d      	cbnz	r5, 8008cd4 <_Balloc+0x1a>
 8008cc4:	2010      	movs	r0, #16
 8008cc6:	f7ff ffd3 	bl	8008c70 <malloc>
 8008cca:	6260      	str	r0, [r4, #36]	; 0x24
 8008ccc:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008cd0:	6005      	str	r5, [r0, #0]
 8008cd2:	60c5      	str	r5, [r0, #12]
 8008cd4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008cd6:	68eb      	ldr	r3, [r5, #12]
 8008cd8:	b183      	cbz	r3, 8008cfc <_Balloc+0x42>
 8008cda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008cdc:	68db      	ldr	r3, [r3, #12]
 8008cde:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008ce2:	b9b8      	cbnz	r0, 8008d14 <_Balloc+0x5a>
 8008ce4:	2101      	movs	r1, #1
 8008ce6:	fa01 f506 	lsl.w	r5, r1, r6
 8008cea:	1d6a      	adds	r2, r5, #5
 8008cec:	0092      	lsls	r2, r2, #2
 8008cee:	4620      	mov	r0, r4
 8008cf0:	f000 fbe1 	bl	80094b6 <_calloc_r>
 8008cf4:	b160      	cbz	r0, 8008d10 <_Balloc+0x56>
 8008cf6:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8008cfa:	e00e      	b.n	8008d1a <_Balloc+0x60>
 8008cfc:	2221      	movs	r2, #33	; 0x21
 8008cfe:	2104      	movs	r1, #4
 8008d00:	4620      	mov	r0, r4
 8008d02:	f000 fbd8 	bl	80094b6 <_calloc_r>
 8008d06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d08:	60e8      	str	r0, [r5, #12]
 8008d0a:	68db      	ldr	r3, [r3, #12]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d1e4      	bne.n	8008cda <_Balloc+0x20>
 8008d10:	2000      	movs	r0, #0
 8008d12:	bd70      	pop	{r4, r5, r6, pc}
 8008d14:	6802      	ldr	r2, [r0, #0]
 8008d16:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008d20:	e7f7      	b.n	8008d12 <_Balloc+0x58>

08008d22 <_Bfree>:
 8008d22:	b570      	push	{r4, r5, r6, lr}
 8008d24:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008d26:	4606      	mov	r6, r0
 8008d28:	460d      	mov	r5, r1
 8008d2a:	b93c      	cbnz	r4, 8008d3c <_Bfree+0x1a>
 8008d2c:	2010      	movs	r0, #16
 8008d2e:	f7ff ff9f 	bl	8008c70 <malloc>
 8008d32:	6270      	str	r0, [r6, #36]	; 0x24
 8008d34:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008d38:	6004      	str	r4, [r0, #0]
 8008d3a:	60c4      	str	r4, [r0, #12]
 8008d3c:	b13d      	cbz	r5, 8008d4e <_Bfree+0x2c>
 8008d3e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008d40:	686a      	ldr	r2, [r5, #4]
 8008d42:	68db      	ldr	r3, [r3, #12]
 8008d44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008d48:	6029      	str	r1, [r5, #0]
 8008d4a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008d4e:	bd70      	pop	{r4, r5, r6, pc}

08008d50 <__multadd>:
 8008d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d54:	690d      	ldr	r5, [r1, #16]
 8008d56:	461f      	mov	r7, r3
 8008d58:	4606      	mov	r6, r0
 8008d5a:	460c      	mov	r4, r1
 8008d5c:	f101 0c14 	add.w	ip, r1, #20
 8008d60:	2300      	movs	r3, #0
 8008d62:	f8dc 0000 	ldr.w	r0, [ip]
 8008d66:	b281      	uxth	r1, r0
 8008d68:	fb02 7101 	mla	r1, r2, r1, r7
 8008d6c:	0c0f      	lsrs	r7, r1, #16
 8008d6e:	0c00      	lsrs	r0, r0, #16
 8008d70:	fb02 7000 	mla	r0, r2, r0, r7
 8008d74:	b289      	uxth	r1, r1
 8008d76:	3301      	adds	r3, #1
 8008d78:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008d7c:	429d      	cmp	r5, r3
 8008d7e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008d82:	f84c 1b04 	str.w	r1, [ip], #4
 8008d86:	dcec      	bgt.n	8008d62 <__multadd+0x12>
 8008d88:	b1d7      	cbz	r7, 8008dc0 <__multadd+0x70>
 8008d8a:	68a3      	ldr	r3, [r4, #8]
 8008d8c:	42ab      	cmp	r3, r5
 8008d8e:	dc12      	bgt.n	8008db6 <__multadd+0x66>
 8008d90:	6861      	ldr	r1, [r4, #4]
 8008d92:	4630      	mov	r0, r6
 8008d94:	3101      	adds	r1, #1
 8008d96:	f7ff ff90 	bl	8008cba <_Balloc>
 8008d9a:	6922      	ldr	r2, [r4, #16]
 8008d9c:	3202      	adds	r2, #2
 8008d9e:	f104 010c 	add.w	r1, r4, #12
 8008da2:	4680      	mov	r8, r0
 8008da4:	0092      	lsls	r2, r2, #2
 8008da6:	300c      	adds	r0, #12
 8008da8:	f7ff ff7c 	bl	8008ca4 <memcpy>
 8008dac:	4621      	mov	r1, r4
 8008dae:	4630      	mov	r0, r6
 8008db0:	f7ff ffb7 	bl	8008d22 <_Bfree>
 8008db4:	4644      	mov	r4, r8
 8008db6:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008dba:	3501      	adds	r5, #1
 8008dbc:	615f      	str	r7, [r3, #20]
 8008dbe:	6125      	str	r5, [r4, #16]
 8008dc0:	4620      	mov	r0, r4
 8008dc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008dc6 <__s2b>:
 8008dc6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008dca:	460c      	mov	r4, r1
 8008dcc:	4615      	mov	r5, r2
 8008dce:	461f      	mov	r7, r3
 8008dd0:	2209      	movs	r2, #9
 8008dd2:	3308      	adds	r3, #8
 8008dd4:	4606      	mov	r6, r0
 8008dd6:	fb93 f3f2 	sdiv	r3, r3, r2
 8008dda:	2100      	movs	r1, #0
 8008ddc:	2201      	movs	r2, #1
 8008dde:	429a      	cmp	r2, r3
 8008de0:	db20      	blt.n	8008e24 <__s2b+0x5e>
 8008de2:	4630      	mov	r0, r6
 8008de4:	f7ff ff69 	bl	8008cba <_Balloc>
 8008de8:	9b08      	ldr	r3, [sp, #32]
 8008dea:	6143      	str	r3, [r0, #20]
 8008dec:	2d09      	cmp	r5, #9
 8008dee:	f04f 0301 	mov.w	r3, #1
 8008df2:	6103      	str	r3, [r0, #16]
 8008df4:	dd19      	ble.n	8008e2a <__s2b+0x64>
 8008df6:	f104 0809 	add.w	r8, r4, #9
 8008dfa:	46c1      	mov	r9, r8
 8008dfc:	442c      	add	r4, r5
 8008dfe:	f819 3b01 	ldrb.w	r3, [r9], #1
 8008e02:	4601      	mov	r1, r0
 8008e04:	3b30      	subs	r3, #48	; 0x30
 8008e06:	220a      	movs	r2, #10
 8008e08:	4630      	mov	r0, r6
 8008e0a:	f7ff ffa1 	bl	8008d50 <__multadd>
 8008e0e:	45a1      	cmp	r9, r4
 8008e10:	d1f5      	bne.n	8008dfe <__s2b+0x38>
 8008e12:	eb08 0405 	add.w	r4, r8, r5
 8008e16:	3c08      	subs	r4, #8
 8008e18:	1b2d      	subs	r5, r5, r4
 8008e1a:	1963      	adds	r3, r4, r5
 8008e1c:	42bb      	cmp	r3, r7
 8008e1e:	db07      	blt.n	8008e30 <__s2b+0x6a>
 8008e20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e24:	0052      	lsls	r2, r2, #1
 8008e26:	3101      	adds	r1, #1
 8008e28:	e7d9      	b.n	8008dde <__s2b+0x18>
 8008e2a:	340a      	adds	r4, #10
 8008e2c:	2509      	movs	r5, #9
 8008e2e:	e7f3      	b.n	8008e18 <__s2b+0x52>
 8008e30:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008e34:	4601      	mov	r1, r0
 8008e36:	3b30      	subs	r3, #48	; 0x30
 8008e38:	220a      	movs	r2, #10
 8008e3a:	4630      	mov	r0, r6
 8008e3c:	f7ff ff88 	bl	8008d50 <__multadd>
 8008e40:	e7eb      	b.n	8008e1a <__s2b+0x54>

08008e42 <__hi0bits>:
 8008e42:	0c02      	lsrs	r2, r0, #16
 8008e44:	0412      	lsls	r2, r2, #16
 8008e46:	4603      	mov	r3, r0
 8008e48:	b9b2      	cbnz	r2, 8008e78 <__hi0bits+0x36>
 8008e4a:	0403      	lsls	r3, r0, #16
 8008e4c:	2010      	movs	r0, #16
 8008e4e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008e52:	bf04      	itt	eq
 8008e54:	021b      	lsleq	r3, r3, #8
 8008e56:	3008      	addeq	r0, #8
 8008e58:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008e5c:	bf04      	itt	eq
 8008e5e:	011b      	lsleq	r3, r3, #4
 8008e60:	3004      	addeq	r0, #4
 8008e62:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008e66:	bf04      	itt	eq
 8008e68:	009b      	lsleq	r3, r3, #2
 8008e6a:	3002      	addeq	r0, #2
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	db06      	blt.n	8008e7e <__hi0bits+0x3c>
 8008e70:	005b      	lsls	r3, r3, #1
 8008e72:	d503      	bpl.n	8008e7c <__hi0bits+0x3a>
 8008e74:	3001      	adds	r0, #1
 8008e76:	4770      	bx	lr
 8008e78:	2000      	movs	r0, #0
 8008e7a:	e7e8      	b.n	8008e4e <__hi0bits+0xc>
 8008e7c:	2020      	movs	r0, #32
 8008e7e:	4770      	bx	lr

08008e80 <__lo0bits>:
 8008e80:	6803      	ldr	r3, [r0, #0]
 8008e82:	f013 0207 	ands.w	r2, r3, #7
 8008e86:	4601      	mov	r1, r0
 8008e88:	d00b      	beq.n	8008ea2 <__lo0bits+0x22>
 8008e8a:	07da      	lsls	r2, r3, #31
 8008e8c:	d423      	bmi.n	8008ed6 <__lo0bits+0x56>
 8008e8e:	0798      	lsls	r0, r3, #30
 8008e90:	bf49      	itett	mi
 8008e92:	085b      	lsrmi	r3, r3, #1
 8008e94:	089b      	lsrpl	r3, r3, #2
 8008e96:	2001      	movmi	r0, #1
 8008e98:	600b      	strmi	r3, [r1, #0]
 8008e9a:	bf5c      	itt	pl
 8008e9c:	600b      	strpl	r3, [r1, #0]
 8008e9e:	2002      	movpl	r0, #2
 8008ea0:	4770      	bx	lr
 8008ea2:	b298      	uxth	r0, r3
 8008ea4:	b9a8      	cbnz	r0, 8008ed2 <__lo0bits+0x52>
 8008ea6:	0c1b      	lsrs	r3, r3, #16
 8008ea8:	2010      	movs	r0, #16
 8008eaa:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008eae:	bf04      	itt	eq
 8008eb0:	0a1b      	lsreq	r3, r3, #8
 8008eb2:	3008      	addeq	r0, #8
 8008eb4:	071a      	lsls	r2, r3, #28
 8008eb6:	bf04      	itt	eq
 8008eb8:	091b      	lsreq	r3, r3, #4
 8008eba:	3004      	addeq	r0, #4
 8008ebc:	079a      	lsls	r2, r3, #30
 8008ebe:	bf04      	itt	eq
 8008ec0:	089b      	lsreq	r3, r3, #2
 8008ec2:	3002      	addeq	r0, #2
 8008ec4:	07da      	lsls	r2, r3, #31
 8008ec6:	d402      	bmi.n	8008ece <__lo0bits+0x4e>
 8008ec8:	085b      	lsrs	r3, r3, #1
 8008eca:	d006      	beq.n	8008eda <__lo0bits+0x5a>
 8008ecc:	3001      	adds	r0, #1
 8008ece:	600b      	str	r3, [r1, #0]
 8008ed0:	4770      	bx	lr
 8008ed2:	4610      	mov	r0, r2
 8008ed4:	e7e9      	b.n	8008eaa <__lo0bits+0x2a>
 8008ed6:	2000      	movs	r0, #0
 8008ed8:	4770      	bx	lr
 8008eda:	2020      	movs	r0, #32
 8008edc:	4770      	bx	lr

08008ede <__i2b>:
 8008ede:	b510      	push	{r4, lr}
 8008ee0:	460c      	mov	r4, r1
 8008ee2:	2101      	movs	r1, #1
 8008ee4:	f7ff fee9 	bl	8008cba <_Balloc>
 8008ee8:	2201      	movs	r2, #1
 8008eea:	6144      	str	r4, [r0, #20]
 8008eec:	6102      	str	r2, [r0, #16]
 8008eee:	bd10      	pop	{r4, pc}

08008ef0 <__multiply>:
 8008ef0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ef4:	4614      	mov	r4, r2
 8008ef6:	690a      	ldr	r2, [r1, #16]
 8008ef8:	6923      	ldr	r3, [r4, #16]
 8008efa:	429a      	cmp	r2, r3
 8008efc:	bfb8      	it	lt
 8008efe:	460b      	movlt	r3, r1
 8008f00:	4688      	mov	r8, r1
 8008f02:	bfbc      	itt	lt
 8008f04:	46a0      	movlt	r8, r4
 8008f06:	461c      	movlt	r4, r3
 8008f08:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008f0c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008f10:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008f14:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008f18:	eb07 0609 	add.w	r6, r7, r9
 8008f1c:	42b3      	cmp	r3, r6
 8008f1e:	bfb8      	it	lt
 8008f20:	3101      	addlt	r1, #1
 8008f22:	f7ff feca 	bl	8008cba <_Balloc>
 8008f26:	f100 0514 	add.w	r5, r0, #20
 8008f2a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8008f2e:	462b      	mov	r3, r5
 8008f30:	2200      	movs	r2, #0
 8008f32:	4573      	cmp	r3, lr
 8008f34:	d316      	bcc.n	8008f64 <__multiply+0x74>
 8008f36:	f104 0214 	add.w	r2, r4, #20
 8008f3a:	f108 0114 	add.w	r1, r8, #20
 8008f3e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8008f42:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8008f46:	9300      	str	r3, [sp, #0]
 8008f48:	9b00      	ldr	r3, [sp, #0]
 8008f4a:	9201      	str	r2, [sp, #4]
 8008f4c:	4293      	cmp	r3, r2
 8008f4e:	d80c      	bhi.n	8008f6a <__multiply+0x7a>
 8008f50:	2e00      	cmp	r6, #0
 8008f52:	dd03      	ble.n	8008f5c <__multiply+0x6c>
 8008f54:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d05d      	beq.n	8009018 <__multiply+0x128>
 8008f5c:	6106      	str	r6, [r0, #16]
 8008f5e:	b003      	add	sp, #12
 8008f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f64:	f843 2b04 	str.w	r2, [r3], #4
 8008f68:	e7e3      	b.n	8008f32 <__multiply+0x42>
 8008f6a:	f8b2 b000 	ldrh.w	fp, [r2]
 8008f6e:	f1bb 0f00 	cmp.w	fp, #0
 8008f72:	d023      	beq.n	8008fbc <__multiply+0xcc>
 8008f74:	4689      	mov	r9, r1
 8008f76:	46ac      	mov	ip, r5
 8008f78:	f04f 0800 	mov.w	r8, #0
 8008f7c:	f859 4b04 	ldr.w	r4, [r9], #4
 8008f80:	f8dc a000 	ldr.w	sl, [ip]
 8008f84:	b2a3      	uxth	r3, r4
 8008f86:	fa1f fa8a 	uxth.w	sl, sl
 8008f8a:	fb0b a303 	mla	r3, fp, r3, sl
 8008f8e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008f92:	f8dc 4000 	ldr.w	r4, [ip]
 8008f96:	4443      	add	r3, r8
 8008f98:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008f9c:	fb0b 840a 	mla	r4, fp, sl, r8
 8008fa0:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8008fa4:	46e2      	mov	sl, ip
 8008fa6:	b29b      	uxth	r3, r3
 8008fa8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008fac:	454f      	cmp	r7, r9
 8008fae:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008fb2:	f84a 3b04 	str.w	r3, [sl], #4
 8008fb6:	d82b      	bhi.n	8009010 <__multiply+0x120>
 8008fb8:	f8cc 8004 	str.w	r8, [ip, #4]
 8008fbc:	9b01      	ldr	r3, [sp, #4]
 8008fbe:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8008fc2:	3204      	adds	r2, #4
 8008fc4:	f1ba 0f00 	cmp.w	sl, #0
 8008fc8:	d020      	beq.n	800900c <__multiply+0x11c>
 8008fca:	682b      	ldr	r3, [r5, #0]
 8008fcc:	4689      	mov	r9, r1
 8008fce:	46a8      	mov	r8, r5
 8008fd0:	f04f 0b00 	mov.w	fp, #0
 8008fd4:	f8b9 c000 	ldrh.w	ip, [r9]
 8008fd8:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8008fdc:	fb0a 440c 	mla	r4, sl, ip, r4
 8008fe0:	445c      	add	r4, fp
 8008fe2:	46c4      	mov	ip, r8
 8008fe4:	b29b      	uxth	r3, r3
 8008fe6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008fea:	f84c 3b04 	str.w	r3, [ip], #4
 8008fee:	f859 3b04 	ldr.w	r3, [r9], #4
 8008ff2:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8008ff6:	0c1b      	lsrs	r3, r3, #16
 8008ff8:	fb0a b303 	mla	r3, sl, r3, fp
 8008ffc:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009000:	454f      	cmp	r7, r9
 8009002:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8009006:	d805      	bhi.n	8009014 <__multiply+0x124>
 8009008:	f8c8 3004 	str.w	r3, [r8, #4]
 800900c:	3504      	adds	r5, #4
 800900e:	e79b      	b.n	8008f48 <__multiply+0x58>
 8009010:	46d4      	mov	ip, sl
 8009012:	e7b3      	b.n	8008f7c <__multiply+0x8c>
 8009014:	46e0      	mov	r8, ip
 8009016:	e7dd      	b.n	8008fd4 <__multiply+0xe4>
 8009018:	3e01      	subs	r6, #1
 800901a:	e799      	b.n	8008f50 <__multiply+0x60>

0800901c <__pow5mult>:
 800901c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009020:	4615      	mov	r5, r2
 8009022:	f012 0203 	ands.w	r2, r2, #3
 8009026:	4606      	mov	r6, r0
 8009028:	460f      	mov	r7, r1
 800902a:	d007      	beq.n	800903c <__pow5mult+0x20>
 800902c:	3a01      	subs	r2, #1
 800902e:	4c21      	ldr	r4, [pc, #132]	; (80090b4 <__pow5mult+0x98>)
 8009030:	2300      	movs	r3, #0
 8009032:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009036:	f7ff fe8b 	bl	8008d50 <__multadd>
 800903a:	4607      	mov	r7, r0
 800903c:	10ad      	asrs	r5, r5, #2
 800903e:	d035      	beq.n	80090ac <__pow5mult+0x90>
 8009040:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009042:	b93c      	cbnz	r4, 8009054 <__pow5mult+0x38>
 8009044:	2010      	movs	r0, #16
 8009046:	f7ff fe13 	bl	8008c70 <malloc>
 800904a:	6270      	str	r0, [r6, #36]	; 0x24
 800904c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009050:	6004      	str	r4, [r0, #0]
 8009052:	60c4      	str	r4, [r0, #12]
 8009054:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009058:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800905c:	b94c      	cbnz	r4, 8009072 <__pow5mult+0x56>
 800905e:	f240 2171 	movw	r1, #625	; 0x271
 8009062:	4630      	mov	r0, r6
 8009064:	f7ff ff3b 	bl	8008ede <__i2b>
 8009068:	2300      	movs	r3, #0
 800906a:	f8c8 0008 	str.w	r0, [r8, #8]
 800906e:	4604      	mov	r4, r0
 8009070:	6003      	str	r3, [r0, #0]
 8009072:	f04f 0800 	mov.w	r8, #0
 8009076:	07eb      	lsls	r3, r5, #31
 8009078:	d50a      	bpl.n	8009090 <__pow5mult+0x74>
 800907a:	4639      	mov	r1, r7
 800907c:	4622      	mov	r2, r4
 800907e:	4630      	mov	r0, r6
 8009080:	f7ff ff36 	bl	8008ef0 <__multiply>
 8009084:	4639      	mov	r1, r7
 8009086:	4681      	mov	r9, r0
 8009088:	4630      	mov	r0, r6
 800908a:	f7ff fe4a 	bl	8008d22 <_Bfree>
 800908e:	464f      	mov	r7, r9
 8009090:	106d      	asrs	r5, r5, #1
 8009092:	d00b      	beq.n	80090ac <__pow5mult+0x90>
 8009094:	6820      	ldr	r0, [r4, #0]
 8009096:	b938      	cbnz	r0, 80090a8 <__pow5mult+0x8c>
 8009098:	4622      	mov	r2, r4
 800909a:	4621      	mov	r1, r4
 800909c:	4630      	mov	r0, r6
 800909e:	f7ff ff27 	bl	8008ef0 <__multiply>
 80090a2:	6020      	str	r0, [r4, #0]
 80090a4:	f8c0 8000 	str.w	r8, [r0]
 80090a8:	4604      	mov	r4, r0
 80090aa:	e7e4      	b.n	8009076 <__pow5mult+0x5a>
 80090ac:	4638      	mov	r0, r7
 80090ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090b2:	bf00      	nop
 80090b4:	0800a458 	.word	0x0800a458

080090b8 <__lshift>:
 80090b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090bc:	460c      	mov	r4, r1
 80090be:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80090c2:	6923      	ldr	r3, [r4, #16]
 80090c4:	6849      	ldr	r1, [r1, #4]
 80090c6:	eb0a 0903 	add.w	r9, sl, r3
 80090ca:	68a3      	ldr	r3, [r4, #8]
 80090cc:	4607      	mov	r7, r0
 80090ce:	4616      	mov	r6, r2
 80090d0:	f109 0501 	add.w	r5, r9, #1
 80090d4:	42ab      	cmp	r3, r5
 80090d6:	db32      	blt.n	800913e <__lshift+0x86>
 80090d8:	4638      	mov	r0, r7
 80090da:	f7ff fdee 	bl	8008cba <_Balloc>
 80090de:	2300      	movs	r3, #0
 80090e0:	4680      	mov	r8, r0
 80090e2:	f100 0114 	add.w	r1, r0, #20
 80090e6:	461a      	mov	r2, r3
 80090e8:	4553      	cmp	r3, sl
 80090ea:	db2b      	blt.n	8009144 <__lshift+0x8c>
 80090ec:	6920      	ldr	r0, [r4, #16]
 80090ee:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80090f2:	f104 0314 	add.w	r3, r4, #20
 80090f6:	f016 021f 	ands.w	r2, r6, #31
 80090fa:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80090fe:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009102:	d025      	beq.n	8009150 <__lshift+0x98>
 8009104:	f1c2 0e20 	rsb	lr, r2, #32
 8009108:	2000      	movs	r0, #0
 800910a:	681e      	ldr	r6, [r3, #0]
 800910c:	468a      	mov	sl, r1
 800910e:	4096      	lsls	r6, r2
 8009110:	4330      	orrs	r0, r6
 8009112:	f84a 0b04 	str.w	r0, [sl], #4
 8009116:	f853 0b04 	ldr.w	r0, [r3], #4
 800911a:	459c      	cmp	ip, r3
 800911c:	fa20 f00e 	lsr.w	r0, r0, lr
 8009120:	d814      	bhi.n	800914c <__lshift+0x94>
 8009122:	6048      	str	r0, [r1, #4]
 8009124:	b108      	cbz	r0, 800912a <__lshift+0x72>
 8009126:	f109 0502 	add.w	r5, r9, #2
 800912a:	3d01      	subs	r5, #1
 800912c:	4638      	mov	r0, r7
 800912e:	f8c8 5010 	str.w	r5, [r8, #16]
 8009132:	4621      	mov	r1, r4
 8009134:	f7ff fdf5 	bl	8008d22 <_Bfree>
 8009138:	4640      	mov	r0, r8
 800913a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800913e:	3101      	adds	r1, #1
 8009140:	005b      	lsls	r3, r3, #1
 8009142:	e7c7      	b.n	80090d4 <__lshift+0x1c>
 8009144:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009148:	3301      	adds	r3, #1
 800914a:	e7cd      	b.n	80090e8 <__lshift+0x30>
 800914c:	4651      	mov	r1, sl
 800914e:	e7dc      	b.n	800910a <__lshift+0x52>
 8009150:	3904      	subs	r1, #4
 8009152:	f853 2b04 	ldr.w	r2, [r3], #4
 8009156:	f841 2f04 	str.w	r2, [r1, #4]!
 800915a:	459c      	cmp	ip, r3
 800915c:	d8f9      	bhi.n	8009152 <__lshift+0x9a>
 800915e:	e7e4      	b.n	800912a <__lshift+0x72>

08009160 <__mcmp>:
 8009160:	6903      	ldr	r3, [r0, #16]
 8009162:	690a      	ldr	r2, [r1, #16]
 8009164:	1a9b      	subs	r3, r3, r2
 8009166:	b530      	push	{r4, r5, lr}
 8009168:	d10c      	bne.n	8009184 <__mcmp+0x24>
 800916a:	0092      	lsls	r2, r2, #2
 800916c:	3014      	adds	r0, #20
 800916e:	3114      	adds	r1, #20
 8009170:	1884      	adds	r4, r0, r2
 8009172:	4411      	add	r1, r2
 8009174:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009178:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800917c:	4295      	cmp	r5, r2
 800917e:	d003      	beq.n	8009188 <__mcmp+0x28>
 8009180:	d305      	bcc.n	800918e <__mcmp+0x2e>
 8009182:	2301      	movs	r3, #1
 8009184:	4618      	mov	r0, r3
 8009186:	bd30      	pop	{r4, r5, pc}
 8009188:	42a0      	cmp	r0, r4
 800918a:	d3f3      	bcc.n	8009174 <__mcmp+0x14>
 800918c:	e7fa      	b.n	8009184 <__mcmp+0x24>
 800918e:	f04f 33ff 	mov.w	r3, #4294967295
 8009192:	e7f7      	b.n	8009184 <__mcmp+0x24>

08009194 <__mdiff>:
 8009194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009198:	460d      	mov	r5, r1
 800919a:	4607      	mov	r7, r0
 800919c:	4611      	mov	r1, r2
 800919e:	4628      	mov	r0, r5
 80091a0:	4614      	mov	r4, r2
 80091a2:	f7ff ffdd 	bl	8009160 <__mcmp>
 80091a6:	1e06      	subs	r6, r0, #0
 80091a8:	d108      	bne.n	80091bc <__mdiff+0x28>
 80091aa:	4631      	mov	r1, r6
 80091ac:	4638      	mov	r0, r7
 80091ae:	f7ff fd84 	bl	8008cba <_Balloc>
 80091b2:	2301      	movs	r3, #1
 80091b4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80091b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091bc:	bfa4      	itt	ge
 80091be:	4623      	movge	r3, r4
 80091c0:	462c      	movge	r4, r5
 80091c2:	4638      	mov	r0, r7
 80091c4:	6861      	ldr	r1, [r4, #4]
 80091c6:	bfa6      	itte	ge
 80091c8:	461d      	movge	r5, r3
 80091ca:	2600      	movge	r6, #0
 80091cc:	2601      	movlt	r6, #1
 80091ce:	f7ff fd74 	bl	8008cba <_Balloc>
 80091d2:	692b      	ldr	r3, [r5, #16]
 80091d4:	60c6      	str	r6, [r0, #12]
 80091d6:	6926      	ldr	r6, [r4, #16]
 80091d8:	f105 0914 	add.w	r9, r5, #20
 80091dc:	f104 0214 	add.w	r2, r4, #20
 80091e0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80091e4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80091e8:	f100 0514 	add.w	r5, r0, #20
 80091ec:	f04f 0e00 	mov.w	lr, #0
 80091f0:	f852 ab04 	ldr.w	sl, [r2], #4
 80091f4:	f859 4b04 	ldr.w	r4, [r9], #4
 80091f8:	fa1e f18a 	uxtah	r1, lr, sl
 80091fc:	b2a3      	uxth	r3, r4
 80091fe:	1ac9      	subs	r1, r1, r3
 8009200:	0c23      	lsrs	r3, r4, #16
 8009202:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8009206:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800920a:	b289      	uxth	r1, r1
 800920c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009210:	45c8      	cmp	r8, r9
 8009212:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009216:	4694      	mov	ip, r2
 8009218:	f845 3b04 	str.w	r3, [r5], #4
 800921c:	d8e8      	bhi.n	80091f0 <__mdiff+0x5c>
 800921e:	45bc      	cmp	ip, r7
 8009220:	d304      	bcc.n	800922c <__mdiff+0x98>
 8009222:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8009226:	b183      	cbz	r3, 800924a <__mdiff+0xb6>
 8009228:	6106      	str	r6, [r0, #16]
 800922a:	e7c5      	b.n	80091b8 <__mdiff+0x24>
 800922c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009230:	fa1e f381 	uxtah	r3, lr, r1
 8009234:	141a      	asrs	r2, r3, #16
 8009236:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800923a:	b29b      	uxth	r3, r3
 800923c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009240:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8009244:	f845 3b04 	str.w	r3, [r5], #4
 8009248:	e7e9      	b.n	800921e <__mdiff+0x8a>
 800924a:	3e01      	subs	r6, #1
 800924c:	e7e9      	b.n	8009222 <__mdiff+0x8e>
	...

08009250 <__ulp>:
 8009250:	4b12      	ldr	r3, [pc, #72]	; (800929c <__ulp+0x4c>)
 8009252:	ee10 2a90 	vmov	r2, s1
 8009256:	401a      	ands	r2, r3
 8009258:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800925c:	2b00      	cmp	r3, #0
 800925e:	dd04      	ble.n	800926a <__ulp+0x1a>
 8009260:	2000      	movs	r0, #0
 8009262:	4619      	mov	r1, r3
 8009264:	ec41 0b10 	vmov	d0, r0, r1
 8009268:	4770      	bx	lr
 800926a:	425b      	negs	r3, r3
 800926c:	151b      	asrs	r3, r3, #20
 800926e:	2b13      	cmp	r3, #19
 8009270:	f04f 0000 	mov.w	r0, #0
 8009274:	f04f 0100 	mov.w	r1, #0
 8009278:	dc04      	bgt.n	8009284 <__ulp+0x34>
 800927a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800927e:	fa42 f103 	asr.w	r1, r2, r3
 8009282:	e7ef      	b.n	8009264 <__ulp+0x14>
 8009284:	3b14      	subs	r3, #20
 8009286:	2b1e      	cmp	r3, #30
 8009288:	f04f 0201 	mov.w	r2, #1
 800928c:	bfda      	itte	le
 800928e:	f1c3 031f 	rsble	r3, r3, #31
 8009292:	fa02 f303 	lslle.w	r3, r2, r3
 8009296:	4613      	movgt	r3, r2
 8009298:	4618      	mov	r0, r3
 800929a:	e7e3      	b.n	8009264 <__ulp+0x14>
 800929c:	7ff00000 	.word	0x7ff00000

080092a0 <__b2d>:
 80092a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092a2:	6905      	ldr	r5, [r0, #16]
 80092a4:	f100 0714 	add.w	r7, r0, #20
 80092a8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80092ac:	1f2e      	subs	r6, r5, #4
 80092ae:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80092b2:	4620      	mov	r0, r4
 80092b4:	f7ff fdc5 	bl	8008e42 <__hi0bits>
 80092b8:	f1c0 0320 	rsb	r3, r0, #32
 80092bc:	280a      	cmp	r0, #10
 80092be:	600b      	str	r3, [r1, #0]
 80092c0:	f8df c074 	ldr.w	ip, [pc, #116]	; 8009338 <__b2d+0x98>
 80092c4:	dc14      	bgt.n	80092f0 <__b2d+0x50>
 80092c6:	f1c0 0e0b 	rsb	lr, r0, #11
 80092ca:	fa24 f10e 	lsr.w	r1, r4, lr
 80092ce:	42b7      	cmp	r7, r6
 80092d0:	ea41 030c 	orr.w	r3, r1, ip
 80092d4:	bf34      	ite	cc
 80092d6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80092da:	2100      	movcs	r1, #0
 80092dc:	3015      	adds	r0, #21
 80092de:	fa04 f000 	lsl.w	r0, r4, r0
 80092e2:	fa21 f10e 	lsr.w	r1, r1, lr
 80092e6:	ea40 0201 	orr.w	r2, r0, r1
 80092ea:	ec43 2b10 	vmov	d0, r2, r3
 80092ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092f0:	42b7      	cmp	r7, r6
 80092f2:	bf3a      	itte	cc
 80092f4:	f1a5 0608 	subcc.w	r6, r5, #8
 80092f8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80092fc:	2100      	movcs	r1, #0
 80092fe:	380b      	subs	r0, #11
 8009300:	d015      	beq.n	800932e <__b2d+0x8e>
 8009302:	4084      	lsls	r4, r0
 8009304:	f1c0 0520 	rsb	r5, r0, #32
 8009308:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800930c:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8009310:	42be      	cmp	r6, r7
 8009312:	fa21 fc05 	lsr.w	ip, r1, r5
 8009316:	ea44 030c 	orr.w	r3, r4, ip
 800931a:	bf8c      	ite	hi
 800931c:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009320:	2400      	movls	r4, #0
 8009322:	fa01 f000 	lsl.w	r0, r1, r0
 8009326:	40ec      	lsrs	r4, r5
 8009328:	ea40 0204 	orr.w	r2, r0, r4
 800932c:	e7dd      	b.n	80092ea <__b2d+0x4a>
 800932e:	ea44 030c 	orr.w	r3, r4, ip
 8009332:	460a      	mov	r2, r1
 8009334:	e7d9      	b.n	80092ea <__b2d+0x4a>
 8009336:	bf00      	nop
 8009338:	3ff00000 	.word	0x3ff00000

0800933c <__d2b>:
 800933c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009340:	460e      	mov	r6, r1
 8009342:	2101      	movs	r1, #1
 8009344:	ec59 8b10 	vmov	r8, r9, d0
 8009348:	4615      	mov	r5, r2
 800934a:	f7ff fcb6 	bl	8008cba <_Balloc>
 800934e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009352:	4607      	mov	r7, r0
 8009354:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009358:	bb34      	cbnz	r4, 80093a8 <__d2b+0x6c>
 800935a:	9301      	str	r3, [sp, #4]
 800935c:	f1b8 0300 	subs.w	r3, r8, #0
 8009360:	d027      	beq.n	80093b2 <__d2b+0x76>
 8009362:	a802      	add	r0, sp, #8
 8009364:	f840 3d08 	str.w	r3, [r0, #-8]!
 8009368:	f7ff fd8a 	bl	8008e80 <__lo0bits>
 800936c:	9900      	ldr	r1, [sp, #0]
 800936e:	b1f0      	cbz	r0, 80093ae <__d2b+0x72>
 8009370:	9a01      	ldr	r2, [sp, #4]
 8009372:	f1c0 0320 	rsb	r3, r0, #32
 8009376:	fa02 f303 	lsl.w	r3, r2, r3
 800937a:	430b      	orrs	r3, r1
 800937c:	40c2      	lsrs	r2, r0
 800937e:	617b      	str	r3, [r7, #20]
 8009380:	9201      	str	r2, [sp, #4]
 8009382:	9b01      	ldr	r3, [sp, #4]
 8009384:	61bb      	str	r3, [r7, #24]
 8009386:	2b00      	cmp	r3, #0
 8009388:	bf14      	ite	ne
 800938a:	2102      	movne	r1, #2
 800938c:	2101      	moveq	r1, #1
 800938e:	6139      	str	r1, [r7, #16]
 8009390:	b1c4      	cbz	r4, 80093c4 <__d2b+0x88>
 8009392:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009396:	4404      	add	r4, r0
 8009398:	6034      	str	r4, [r6, #0]
 800939a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800939e:	6028      	str	r0, [r5, #0]
 80093a0:	4638      	mov	r0, r7
 80093a2:	b003      	add	sp, #12
 80093a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80093a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80093ac:	e7d5      	b.n	800935a <__d2b+0x1e>
 80093ae:	6179      	str	r1, [r7, #20]
 80093b0:	e7e7      	b.n	8009382 <__d2b+0x46>
 80093b2:	a801      	add	r0, sp, #4
 80093b4:	f7ff fd64 	bl	8008e80 <__lo0bits>
 80093b8:	9b01      	ldr	r3, [sp, #4]
 80093ba:	617b      	str	r3, [r7, #20]
 80093bc:	2101      	movs	r1, #1
 80093be:	6139      	str	r1, [r7, #16]
 80093c0:	3020      	adds	r0, #32
 80093c2:	e7e5      	b.n	8009390 <__d2b+0x54>
 80093c4:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80093c8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80093cc:	6030      	str	r0, [r6, #0]
 80093ce:	6918      	ldr	r0, [r3, #16]
 80093d0:	f7ff fd37 	bl	8008e42 <__hi0bits>
 80093d4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80093d8:	e7e1      	b.n	800939e <__d2b+0x62>

080093da <__ratio>:
 80093da:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093de:	4688      	mov	r8, r1
 80093e0:	4669      	mov	r1, sp
 80093e2:	4681      	mov	r9, r0
 80093e4:	f7ff ff5c 	bl	80092a0 <__b2d>
 80093e8:	a901      	add	r1, sp, #4
 80093ea:	4640      	mov	r0, r8
 80093ec:	ec57 6b10 	vmov	r6, r7, d0
 80093f0:	f7ff ff56 	bl	80092a0 <__b2d>
 80093f4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80093f8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80093fc:	eba3 0c02 	sub.w	ip, r3, r2
 8009400:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009404:	1a9b      	subs	r3, r3, r2
 8009406:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800940a:	ec5b ab10 	vmov	sl, fp, d0
 800940e:	2b00      	cmp	r3, #0
 8009410:	bfce      	itee	gt
 8009412:	463a      	movgt	r2, r7
 8009414:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009418:	465a      	movle	r2, fp
 800941a:	4659      	mov	r1, fp
 800941c:	463d      	mov	r5, r7
 800941e:	bfd4      	ite	le
 8009420:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8009424:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8009428:	4630      	mov	r0, r6
 800942a:	ee10 2a10 	vmov	r2, s0
 800942e:	460b      	mov	r3, r1
 8009430:	4629      	mov	r1, r5
 8009432:	f7f7 fa13 	bl	800085c <__aeabi_ddiv>
 8009436:	ec41 0b10 	vmov	d0, r0, r1
 800943a:	b003      	add	sp, #12
 800943c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009440 <__copybits>:
 8009440:	3901      	subs	r1, #1
 8009442:	b510      	push	{r4, lr}
 8009444:	1149      	asrs	r1, r1, #5
 8009446:	6914      	ldr	r4, [r2, #16]
 8009448:	3101      	adds	r1, #1
 800944a:	f102 0314 	add.w	r3, r2, #20
 800944e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009452:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009456:	42a3      	cmp	r3, r4
 8009458:	4602      	mov	r2, r0
 800945a:	d303      	bcc.n	8009464 <__copybits+0x24>
 800945c:	2300      	movs	r3, #0
 800945e:	428a      	cmp	r2, r1
 8009460:	d305      	bcc.n	800946e <__copybits+0x2e>
 8009462:	bd10      	pop	{r4, pc}
 8009464:	f853 2b04 	ldr.w	r2, [r3], #4
 8009468:	f840 2b04 	str.w	r2, [r0], #4
 800946c:	e7f3      	b.n	8009456 <__copybits+0x16>
 800946e:	f842 3b04 	str.w	r3, [r2], #4
 8009472:	e7f4      	b.n	800945e <__copybits+0x1e>

08009474 <__any_on>:
 8009474:	f100 0214 	add.w	r2, r0, #20
 8009478:	6900      	ldr	r0, [r0, #16]
 800947a:	114b      	asrs	r3, r1, #5
 800947c:	4298      	cmp	r0, r3
 800947e:	b510      	push	{r4, lr}
 8009480:	db11      	blt.n	80094a6 <__any_on+0x32>
 8009482:	dd0a      	ble.n	800949a <__any_on+0x26>
 8009484:	f011 011f 	ands.w	r1, r1, #31
 8009488:	d007      	beq.n	800949a <__any_on+0x26>
 800948a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800948e:	fa24 f001 	lsr.w	r0, r4, r1
 8009492:	fa00 f101 	lsl.w	r1, r0, r1
 8009496:	428c      	cmp	r4, r1
 8009498:	d10b      	bne.n	80094b2 <__any_on+0x3e>
 800949a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800949e:	4293      	cmp	r3, r2
 80094a0:	d803      	bhi.n	80094aa <__any_on+0x36>
 80094a2:	2000      	movs	r0, #0
 80094a4:	bd10      	pop	{r4, pc}
 80094a6:	4603      	mov	r3, r0
 80094a8:	e7f7      	b.n	800949a <__any_on+0x26>
 80094aa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80094ae:	2900      	cmp	r1, #0
 80094b0:	d0f5      	beq.n	800949e <__any_on+0x2a>
 80094b2:	2001      	movs	r0, #1
 80094b4:	e7f6      	b.n	80094a4 <__any_on+0x30>

080094b6 <_calloc_r>:
 80094b6:	b538      	push	{r3, r4, r5, lr}
 80094b8:	fb02 f401 	mul.w	r4, r2, r1
 80094bc:	4621      	mov	r1, r4
 80094be:	f000 f857 	bl	8009570 <_malloc_r>
 80094c2:	4605      	mov	r5, r0
 80094c4:	b118      	cbz	r0, 80094ce <_calloc_r+0x18>
 80094c6:	4622      	mov	r2, r4
 80094c8:	2100      	movs	r1, #0
 80094ca:	f7fc fcfb 	bl	8005ec4 <memset>
 80094ce:	4628      	mov	r0, r5
 80094d0:	bd38      	pop	{r3, r4, r5, pc}
	...

080094d4 <_free_r>:
 80094d4:	b538      	push	{r3, r4, r5, lr}
 80094d6:	4605      	mov	r5, r0
 80094d8:	2900      	cmp	r1, #0
 80094da:	d045      	beq.n	8009568 <_free_r+0x94>
 80094dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094e0:	1f0c      	subs	r4, r1, #4
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	bfb8      	it	lt
 80094e6:	18e4      	addlt	r4, r4, r3
 80094e8:	f000 fe30 	bl	800a14c <__malloc_lock>
 80094ec:	4a1f      	ldr	r2, [pc, #124]	; (800956c <_free_r+0x98>)
 80094ee:	6813      	ldr	r3, [r2, #0]
 80094f0:	4610      	mov	r0, r2
 80094f2:	b933      	cbnz	r3, 8009502 <_free_r+0x2e>
 80094f4:	6063      	str	r3, [r4, #4]
 80094f6:	6014      	str	r4, [r2, #0]
 80094f8:	4628      	mov	r0, r5
 80094fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80094fe:	f000 be26 	b.w	800a14e <__malloc_unlock>
 8009502:	42a3      	cmp	r3, r4
 8009504:	d90c      	bls.n	8009520 <_free_r+0x4c>
 8009506:	6821      	ldr	r1, [r4, #0]
 8009508:	1862      	adds	r2, r4, r1
 800950a:	4293      	cmp	r3, r2
 800950c:	bf04      	itt	eq
 800950e:	681a      	ldreq	r2, [r3, #0]
 8009510:	685b      	ldreq	r3, [r3, #4]
 8009512:	6063      	str	r3, [r4, #4]
 8009514:	bf04      	itt	eq
 8009516:	1852      	addeq	r2, r2, r1
 8009518:	6022      	streq	r2, [r4, #0]
 800951a:	6004      	str	r4, [r0, #0]
 800951c:	e7ec      	b.n	80094f8 <_free_r+0x24>
 800951e:	4613      	mov	r3, r2
 8009520:	685a      	ldr	r2, [r3, #4]
 8009522:	b10a      	cbz	r2, 8009528 <_free_r+0x54>
 8009524:	42a2      	cmp	r2, r4
 8009526:	d9fa      	bls.n	800951e <_free_r+0x4a>
 8009528:	6819      	ldr	r1, [r3, #0]
 800952a:	1858      	adds	r0, r3, r1
 800952c:	42a0      	cmp	r0, r4
 800952e:	d10b      	bne.n	8009548 <_free_r+0x74>
 8009530:	6820      	ldr	r0, [r4, #0]
 8009532:	4401      	add	r1, r0
 8009534:	1858      	adds	r0, r3, r1
 8009536:	4282      	cmp	r2, r0
 8009538:	6019      	str	r1, [r3, #0]
 800953a:	d1dd      	bne.n	80094f8 <_free_r+0x24>
 800953c:	6810      	ldr	r0, [r2, #0]
 800953e:	6852      	ldr	r2, [r2, #4]
 8009540:	605a      	str	r2, [r3, #4]
 8009542:	4401      	add	r1, r0
 8009544:	6019      	str	r1, [r3, #0]
 8009546:	e7d7      	b.n	80094f8 <_free_r+0x24>
 8009548:	d902      	bls.n	8009550 <_free_r+0x7c>
 800954a:	230c      	movs	r3, #12
 800954c:	602b      	str	r3, [r5, #0]
 800954e:	e7d3      	b.n	80094f8 <_free_r+0x24>
 8009550:	6820      	ldr	r0, [r4, #0]
 8009552:	1821      	adds	r1, r4, r0
 8009554:	428a      	cmp	r2, r1
 8009556:	bf04      	itt	eq
 8009558:	6811      	ldreq	r1, [r2, #0]
 800955a:	6852      	ldreq	r2, [r2, #4]
 800955c:	6062      	str	r2, [r4, #4]
 800955e:	bf04      	itt	eq
 8009560:	1809      	addeq	r1, r1, r0
 8009562:	6021      	streq	r1, [r4, #0]
 8009564:	605c      	str	r4, [r3, #4]
 8009566:	e7c7      	b.n	80094f8 <_free_r+0x24>
 8009568:	bd38      	pop	{r3, r4, r5, pc}
 800956a:	bf00      	nop
 800956c:	20000434 	.word	0x20000434

08009570 <_malloc_r>:
 8009570:	b570      	push	{r4, r5, r6, lr}
 8009572:	1ccd      	adds	r5, r1, #3
 8009574:	f025 0503 	bic.w	r5, r5, #3
 8009578:	3508      	adds	r5, #8
 800957a:	2d0c      	cmp	r5, #12
 800957c:	bf38      	it	cc
 800957e:	250c      	movcc	r5, #12
 8009580:	2d00      	cmp	r5, #0
 8009582:	4606      	mov	r6, r0
 8009584:	db01      	blt.n	800958a <_malloc_r+0x1a>
 8009586:	42a9      	cmp	r1, r5
 8009588:	d903      	bls.n	8009592 <_malloc_r+0x22>
 800958a:	230c      	movs	r3, #12
 800958c:	6033      	str	r3, [r6, #0]
 800958e:	2000      	movs	r0, #0
 8009590:	bd70      	pop	{r4, r5, r6, pc}
 8009592:	f000 fddb 	bl	800a14c <__malloc_lock>
 8009596:	4a21      	ldr	r2, [pc, #132]	; (800961c <_malloc_r+0xac>)
 8009598:	6814      	ldr	r4, [r2, #0]
 800959a:	4621      	mov	r1, r4
 800959c:	b991      	cbnz	r1, 80095c4 <_malloc_r+0x54>
 800959e:	4c20      	ldr	r4, [pc, #128]	; (8009620 <_malloc_r+0xb0>)
 80095a0:	6823      	ldr	r3, [r4, #0]
 80095a2:	b91b      	cbnz	r3, 80095ac <_malloc_r+0x3c>
 80095a4:	4630      	mov	r0, r6
 80095a6:	f000 fc91 	bl	8009ecc <_sbrk_r>
 80095aa:	6020      	str	r0, [r4, #0]
 80095ac:	4629      	mov	r1, r5
 80095ae:	4630      	mov	r0, r6
 80095b0:	f000 fc8c 	bl	8009ecc <_sbrk_r>
 80095b4:	1c43      	adds	r3, r0, #1
 80095b6:	d124      	bne.n	8009602 <_malloc_r+0x92>
 80095b8:	230c      	movs	r3, #12
 80095ba:	6033      	str	r3, [r6, #0]
 80095bc:	4630      	mov	r0, r6
 80095be:	f000 fdc6 	bl	800a14e <__malloc_unlock>
 80095c2:	e7e4      	b.n	800958e <_malloc_r+0x1e>
 80095c4:	680b      	ldr	r3, [r1, #0]
 80095c6:	1b5b      	subs	r3, r3, r5
 80095c8:	d418      	bmi.n	80095fc <_malloc_r+0x8c>
 80095ca:	2b0b      	cmp	r3, #11
 80095cc:	d90f      	bls.n	80095ee <_malloc_r+0x7e>
 80095ce:	600b      	str	r3, [r1, #0]
 80095d0:	50cd      	str	r5, [r1, r3]
 80095d2:	18cc      	adds	r4, r1, r3
 80095d4:	4630      	mov	r0, r6
 80095d6:	f000 fdba 	bl	800a14e <__malloc_unlock>
 80095da:	f104 000b 	add.w	r0, r4, #11
 80095de:	1d23      	adds	r3, r4, #4
 80095e0:	f020 0007 	bic.w	r0, r0, #7
 80095e4:	1ac3      	subs	r3, r0, r3
 80095e6:	d0d3      	beq.n	8009590 <_malloc_r+0x20>
 80095e8:	425a      	negs	r2, r3
 80095ea:	50e2      	str	r2, [r4, r3]
 80095ec:	e7d0      	b.n	8009590 <_malloc_r+0x20>
 80095ee:	428c      	cmp	r4, r1
 80095f0:	684b      	ldr	r3, [r1, #4]
 80095f2:	bf16      	itet	ne
 80095f4:	6063      	strne	r3, [r4, #4]
 80095f6:	6013      	streq	r3, [r2, #0]
 80095f8:	460c      	movne	r4, r1
 80095fa:	e7eb      	b.n	80095d4 <_malloc_r+0x64>
 80095fc:	460c      	mov	r4, r1
 80095fe:	6849      	ldr	r1, [r1, #4]
 8009600:	e7cc      	b.n	800959c <_malloc_r+0x2c>
 8009602:	1cc4      	adds	r4, r0, #3
 8009604:	f024 0403 	bic.w	r4, r4, #3
 8009608:	42a0      	cmp	r0, r4
 800960a:	d005      	beq.n	8009618 <_malloc_r+0xa8>
 800960c:	1a21      	subs	r1, r4, r0
 800960e:	4630      	mov	r0, r6
 8009610:	f000 fc5c 	bl	8009ecc <_sbrk_r>
 8009614:	3001      	adds	r0, #1
 8009616:	d0cf      	beq.n	80095b8 <_malloc_r+0x48>
 8009618:	6025      	str	r5, [r4, #0]
 800961a:	e7db      	b.n	80095d4 <_malloc_r+0x64>
 800961c:	20000434 	.word	0x20000434
 8009620:	20000438 	.word	0x20000438

08009624 <__ssputs_r>:
 8009624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009628:	688e      	ldr	r6, [r1, #8]
 800962a:	429e      	cmp	r6, r3
 800962c:	4682      	mov	sl, r0
 800962e:	460c      	mov	r4, r1
 8009630:	4690      	mov	r8, r2
 8009632:	4699      	mov	r9, r3
 8009634:	d837      	bhi.n	80096a6 <__ssputs_r+0x82>
 8009636:	898a      	ldrh	r2, [r1, #12]
 8009638:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800963c:	d031      	beq.n	80096a2 <__ssputs_r+0x7e>
 800963e:	6825      	ldr	r5, [r4, #0]
 8009640:	6909      	ldr	r1, [r1, #16]
 8009642:	1a6f      	subs	r7, r5, r1
 8009644:	6965      	ldr	r5, [r4, #20]
 8009646:	2302      	movs	r3, #2
 8009648:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800964c:	fb95 f5f3 	sdiv	r5, r5, r3
 8009650:	f109 0301 	add.w	r3, r9, #1
 8009654:	443b      	add	r3, r7
 8009656:	429d      	cmp	r5, r3
 8009658:	bf38      	it	cc
 800965a:	461d      	movcc	r5, r3
 800965c:	0553      	lsls	r3, r2, #21
 800965e:	d530      	bpl.n	80096c2 <__ssputs_r+0x9e>
 8009660:	4629      	mov	r1, r5
 8009662:	f7ff ff85 	bl	8009570 <_malloc_r>
 8009666:	4606      	mov	r6, r0
 8009668:	b950      	cbnz	r0, 8009680 <__ssputs_r+0x5c>
 800966a:	230c      	movs	r3, #12
 800966c:	f8ca 3000 	str.w	r3, [sl]
 8009670:	89a3      	ldrh	r3, [r4, #12]
 8009672:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009676:	81a3      	strh	r3, [r4, #12]
 8009678:	f04f 30ff 	mov.w	r0, #4294967295
 800967c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009680:	463a      	mov	r2, r7
 8009682:	6921      	ldr	r1, [r4, #16]
 8009684:	f7ff fb0e 	bl	8008ca4 <memcpy>
 8009688:	89a3      	ldrh	r3, [r4, #12]
 800968a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800968e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009692:	81a3      	strh	r3, [r4, #12]
 8009694:	6126      	str	r6, [r4, #16]
 8009696:	6165      	str	r5, [r4, #20]
 8009698:	443e      	add	r6, r7
 800969a:	1bed      	subs	r5, r5, r7
 800969c:	6026      	str	r6, [r4, #0]
 800969e:	60a5      	str	r5, [r4, #8]
 80096a0:	464e      	mov	r6, r9
 80096a2:	454e      	cmp	r6, r9
 80096a4:	d900      	bls.n	80096a8 <__ssputs_r+0x84>
 80096a6:	464e      	mov	r6, r9
 80096a8:	4632      	mov	r2, r6
 80096aa:	4641      	mov	r1, r8
 80096ac:	6820      	ldr	r0, [r4, #0]
 80096ae:	f000 fd34 	bl	800a11a <memmove>
 80096b2:	68a3      	ldr	r3, [r4, #8]
 80096b4:	1b9b      	subs	r3, r3, r6
 80096b6:	60a3      	str	r3, [r4, #8]
 80096b8:	6823      	ldr	r3, [r4, #0]
 80096ba:	441e      	add	r6, r3
 80096bc:	6026      	str	r6, [r4, #0]
 80096be:	2000      	movs	r0, #0
 80096c0:	e7dc      	b.n	800967c <__ssputs_r+0x58>
 80096c2:	462a      	mov	r2, r5
 80096c4:	f000 fd44 	bl	800a150 <_realloc_r>
 80096c8:	4606      	mov	r6, r0
 80096ca:	2800      	cmp	r0, #0
 80096cc:	d1e2      	bne.n	8009694 <__ssputs_r+0x70>
 80096ce:	6921      	ldr	r1, [r4, #16]
 80096d0:	4650      	mov	r0, sl
 80096d2:	f7ff feff 	bl	80094d4 <_free_r>
 80096d6:	e7c8      	b.n	800966a <__ssputs_r+0x46>

080096d8 <_svfiprintf_r>:
 80096d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096dc:	461d      	mov	r5, r3
 80096de:	898b      	ldrh	r3, [r1, #12]
 80096e0:	061f      	lsls	r7, r3, #24
 80096e2:	b09d      	sub	sp, #116	; 0x74
 80096e4:	4680      	mov	r8, r0
 80096e6:	460c      	mov	r4, r1
 80096e8:	4616      	mov	r6, r2
 80096ea:	d50f      	bpl.n	800970c <_svfiprintf_r+0x34>
 80096ec:	690b      	ldr	r3, [r1, #16]
 80096ee:	b96b      	cbnz	r3, 800970c <_svfiprintf_r+0x34>
 80096f0:	2140      	movs	r1, #64	; 0x40
 80096f2:	f7ff ff3d 	bl	8009570 <_malloc_r>
 80096f6:	6020      	str	r0, [r4, #0]
 80096f8:	6120      	str	r0, [r4, #16]
 80096fa:	b928      	cbnz	r0, 8009708 <_svfiprintf_r+0x30>
 80096fc:	230c      	movs	r3, #12
 80096fe:	f8c8 3000 	str.w	r3, [r8]
 8009702:	f04f 30ff 	mov.w	r0, #4294967295
 8009706:	e0c8      	b.n	800989a <_svfiprintf_r+0x1c2>
 8009708:	2340      	movs	r3, #64	; 0x40
 800970a:	6163      	str	r3, [r4, #20]
 800970c:	2300      	movs	r3, #0
 800970e:	9309      	str	r3, [sp, #36]	; 0x24
 8009710:	2320      	movs	r3, #32
 8009712:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009716:	2330      	movs	r3, #48	; 0x30
 8009718:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800971c:	9503      	str	r5, [sp, #12]
 800971e:	f04f 0b01 	mov.w	fp, #1
 8009722:	4637      	mov	r7, r6
 8009724:	463d      	mov	r5, r7
 8009726:	f815 3b01 	ldrb.w	r3, [r5], #1
 800972a:	b10b      	cbz	r3, 8009730 <_svfiprintf_r+0x58>
 800972c:	2b25      	cmp	r3, #37	; 0x25
 800972e:	d13e      	bne.n	80097ae <_svfiprintf_r+0xd6>
 8009730:	ebb7 0a06 	subs.w	sl, r7, r6
 8009734:	d00b      	beq.n	800974e <_svfiprintf_r+0x76>
 8009736:	4653      	mov	r3, sl
 8009738:	4632      	mov	r2, r6
 800973a:	4621      	mov	r1, r4
 800973c:	4640      	mov	r0, r8
 800973e:	f7ff ff71 	bl	8009624 <__ssputs_r>
 8009742:	3001      	adds	r0, #1
 8009744:	f000 80a4 	beq.w	8009890 <_svfiprintf_r+0x1b8>
 8009748:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800974a:	4453      	add	r3, sl
 800974c:	9309      	str	r3, [sp, #36]	; 0x24
 800974e:	783b      	ldrb	r3, [r7, #0]
 8009750:	2b00      	cmp	r3, #0
 8009752:	f000 809d 	beq.w	8009890 <_svfiprintf_r+0x1b8>
 8009756:	2300      	movs	r3, #0
 8009758:	f04f 32ff 	mov.w	r2, #4294967295
 800975c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009760:	9304      	str	r3, [sp, #16]
 8009762:	9307      	str	r3, [sp, #28]
 8009764:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009768:	931a      	str	r3, [sp, #104]	; 0x68
 800976a:	462f      	mov	r7, r5
 800976c:	2205      	movs	r2, #5
 800976e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009772:	4850      	ldr	r0, [pc, #320]	; (80098b4 <_svfiprintf_r+0x1dc>)
 8009774:	f7f6 fd3c 	bl	80001f0 <memchr>
 8009778:	9b04      	ldr	r3, [sp, #16]
 800977a:	b9d0      	cbnz	r0, 80097b2 <_svfiprintf_r+0xda>
 800977c:	06d9      	lsls	r1, r3, #27
 800977e:	bf44      	itt	mi
 8009780:	2220      	movmi	r2, #32
 8009782:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009786:	071a      	lsls	r2, r3, #28
 8009788:	bf44      	itt	mi
 800978a:	222b      	movmi	r2, #43	; 0x2b
 800978c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009790:	782a      	ldrb	r2, [r5, #0]
 8009792:	2a2a      	cmp	r2, #42	; 0x2a
 8009794:	d015      	beq.n	80097c2 <_svfiprintf_r+0xea>
 8009796:	9a07      	ldr	r2, [sp, #28]
 8009798:	462f      	mov	r7, r5
 800979a:	2000      	movs	r0, #0
 800979c:	250a      	movs	r5, #10
 800979e:	4639      	mov	r1, r7
 80097a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80097a4:	3b30      	subs	r3, #48	; 0x30
 80097a6:	2b09      	cmp	r3, #9
 80097a8:	d94d      	bls.n	8009846 <_svfiprintf_r+0x16e>
 80097aa:	b1b8      	cbz	r0, 80097dc <_svfiprintf_r+0x104>
 80097ac:	e00f      	b.n	80097ce <_svfiprintf_r+0xf6>
 80097ae:	462f      	mov	r7, r5
 80097b0:	e7b8      	b.n	8009724 <_svfiprintf_r+0x4c>
 80097b2:	4a40      	ldr	r2, [pc, #256]	; (80098b4 <_svfiprintf_r+0x1dc>)
 80097b4:	1a80      	subs	r0, r0, r2
 80097b6:	fa0b f000 	lsl.w	r0, fp, r0
 80097ba:	4318      	orrs	r0, r3
 80097bc:	9004      	str	r0, [sp, #16]
 80097be:	463d      	mov	r5, r7
 80097c0:	e7d3      	b.n	800976a <_svfiprintf_r+0x92>
 80097c2:	9a03      	ldr	r2, [sp, #12]
 80097c4:	1d11      	adds	r1, r2, #4
 80097c6:	6812      	ldr	r2, [r2, #0]
 80097c8:	9103      	str	r1, [sp, #12]
 80097ca:	2a00      	cmp	r2, #0
 80097cc:	db01      	blt.n	80097d2 <_svfiprintf_r+0xfa>
 80097ce:	9207      	str	r2, [sp, #28]
 80097d0:	e004      	b.n	80097dc <_svfiprintf_r+0x104>
 80097d2:	4252      	negs	r2, r2
 80097d4:	f043 0302 	orr.w	r3, r3, #2
 80097d8:	9207      	str	r2, [sp, #28]
 80097da:	9304      	str	r3, [sp, #16]
 80097dc:	783b      	ldrb	r3, [r7, #0]
 80097de:	2b2e      	cmp	r3, #46	; 0x2e
 80097e0:	d10c      	bne.n	80097fc <_svfiprintf_r+0x124>
 80097e2:	787b      	ldrb	r3, [r7, #1]
 80097e4:	2b2a      	cmp	r3, #42	; 0x2a
 80097e6:	d133      	bne.n	8009850 <_svfiprintf_r+0x178>
 80097e8:	9b03      	ldr	r3, [sp, #12]
 80097ea:	1d1a      	adds	r2, r3, #4
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	9203      	str	r2, [sp, #12]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	bfb8      	it	lt
 80097f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80097f8:	3702      	adds	r7, #2
 80097fa:	9305      	str	r3, [sp, #20]
 80097fc:	4d2e      	ldr	r5, [pc, #184]	; (80098b8 <_svfiprintf_r+0x1e0>)
 80097fe:	7839      	ldrb	r1, [r7, #0]
 8009800:	2203      	movs	r2, #3
 8009802:	4628      	mov	r0, r5
 8009804:	f7f6 fcf4 	bl	80001f0 <memchr>
 8009808:	b138      	cbz	r0, 800981a <_svfiprintf_r+0x142>
 800980a:	2340      	movs	r3, #64	; 0x40
 800980c:	1b40      	subs	r0, r0, r5
 800980e:	fa03 f000 	lsl.w	r0, r3, r0
 8009812:	9b04      	ldr	r3, [sp, #16]
 8009814:	4303      	orrs	r3, r0
 8009816:	3701      	adds	r7, #1
 8009818:	9304      	str	r3, [sp, #16]
 800981a:	7839      	ldrb	r1, [r7, #0]
 800981c:	4827      	ldr	r0, [pc, #156]	; (80098bc <_svfiprintf_r+0x1e4>)
 800981e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009822:	2206      	movs	r2, #6
 8009824:	1c7e      	adds	r6, r7, #1
 8009826:	f7f6 fce3 	bl	80001f0 <memchr>
 800982a:	2800      	cmp	r0, #0
 800982c:	d038      	beq.n	80098a0 <_svfiprintf_r+0x1c8>
 800982e:	4b24      	ldr	r3, [pc, #144]	; (80098c0 <_svfiprintf_r+0x1e8>)
 8009830:	bb13      	cbnz	r3, 8009878 <_svfiprintf_r+0x1a0>
 8009832:	9b03      	ldr	r3, [sp, #12]
 8009834:	3307      	adds	r3, #7
 8009836:	f023 0307 	bic.w	r3, r3, #7
 800983a:	3308      	adds	r3, #8
 800983c:	9303      	str	r3, [sp, #12]
 800983e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009840:	444b      	add	r3, r9
 8009842:	9309      	str	r3, [sp, #36]	; 0x24
 8009844:	e76d      	b.n	8009722 <_svfiprintf_r+0x4a>
 8009846:	fb05 3202 	mla	r2, r5, r2, r3
 800984a:	2001      	movs	r0, #1
 800984c:	460f      	mov	r7, r1
 800984e:	e7a6      	b.n	800979e <_svfiprintf_r+0xc6>
 8009850:	2300      	movs	r3, #0
 8009852:	3701      	adds	r7, #1
 8009854:	9305      	str	r3, [sp, #20]
 8009856:	4619      	mov	r1, r3
 8009858:	250a      	movs	r5, #10
 800985a:	4638      	mov	r0, r7
 800985c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009860:	3a30      	subs	r2, #48	; 0x30
 8009862:	2a09      	cmp	r2, #9
 8009864:	d903      	bls.n	800986e <_svfiprintf_r+0x196>
 8009866:	2b00      	cmp	r3, #0
 8009868:	d0c8      	beq.n	80097fc <_svfiprintf_r+0x124>
 800986a:	9105      	str	r1, [sp, #20]
 800986c:	e7c6      	b.n	80097fc <_svfiprintf_r+0x124>
 800986e:	fb05 2101 	mla	r1, r5, r1, r2
 8009872:	2301      	movs	r3, #1
 8009874:	4607      	mov	r7, r0
 8009876:	e7f0      	b.n	800985a <_svfiprintf_r+0x182>
 8009878:	ab03      	add	r3, sp, #12
 800987a:	9300      	str	r3, [sp, #0]
 800987c:	4622      	mov	r2, r4
 800987e:	4b11      	ldr	r3, [pc, #68]	; (80098c4 <_svfiprintf_r+0x1ec>)
 8009880:	a904      	add	r1, sp, #16
 8009882:	4640      	mov	r0, r8
 8009884:	f7fc fbba 	bl	8005ffc <_printf_float>
 8009888:	f1b0 3fff 	cmp.w	r0, #4294967295
 800988c:	4681      	mov	r9, r0
 800988e:	d1d6      	bne.n	800983e <_svfiprintf_r+0x166>
 8009890:	89a3      	ldrh	r3, [r4, #12]
 8009892:	065b      	lsls	r3, r3, #25
 8009894:	f53f af35 	bmi.w	8009702 <_svfiprintf_r+0x2a>
 8009898:	9809      	ldr	r0, [sp, #36]	; 0x24
 800989a:	b01d      	add	sp, #116	; 0x74
 800989c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098a0:	ab03      	add	r3, sp, #12
 80098a2:	9300      	str	r3, [sp, #0]
 80098a4:	4622      	mov	r2, r4
 80098a6:	4b07      	ldr	r3, [pc, #28]	; (80098c4 <_svfiprintf_r+0x1ec>)
 80098a8:	a904      	add	r1, sp, #16
 80098aa:	4640      	mov	r0, r8
 80098ac:	f7fc fe5c 	bl	8006568 <_printf_i>
 80098b0:	e7ea      	b.n	8009888 <_svfiprintf_r+0x1b0>
 80098b2:	bf00      	nop
 80098b4:	0800a464 	.word	0x0800a464
 80098b8:	0800a46a 	.word	0x0800a46a
 80098bc:	0800a46e 	.word	0x0800a46e
 80098c0:	08005ffd 	.word	0x08005ffd
 80098c4:	08009625 	.word	0x08009625

080098c8 <_sungetc_r>:
 80098c8:	b538      	push	{r3, r4, r5, lr}
 80098ca:	1c4b      	adds	r3, r1, #1
 80098cc:	4614      	mov	r4, r2
 80098ce:	d103      	bne.n	80098d8 <_sungetc_r+0x10>
 80098d0:	f04f 35ff 	mov.w	r5, #4294967295
 80098d4:	4628      	mov	r0, r5
 80098d6:	bd38      	pop	{r3, r4, r5, pc}
 80098d8:	8993      	ldrh	r3, [r2, #12]
 80098da:	f023 0320 	bic.w	r3, r3, #32
 80098de:	8193      	strh	r3, [r2, #12]
 80098e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80098e2:	6852      	ldr	r2, [r2, #4]
 80098e4:	b2cd      	uxtb	r5, r1
 80098e6:	b18b      	cbz	r3, 800990c <_sungetc_r+0x44>
 80098e8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80098ea:	4293      	cmp	r3, r2
 80098ec:	dd08      	ble.n	8009900 <_sungetc_r+0x38>
 80098ee:	6823      	ldr	r3, [r4, #0]
 80098f0:	1e5a      	subs	r2, r3, #1
 80098f2:	6022      	str	r2, [r4, #0]
 80098f4:	f803 5c01 	strb.w	r5, [r3, #-1]
 80098f8:	6863      	ldr	r3, [r4, #4]
 80098fa:	3301      	adds	r3, #1
 80098fc:	6063      	str	r3, [r4, #4]
 80098fe:	e7e9      	b.n	80098d4 <_sungetc_r+0xc>
 8009900:	4621      	mov	r1, r4
 8009902:	f000 fbc3 	bl	800a08c <__submore>
 8009906:	2800      	cmp	r0, #0
 8009908:	d0f1      	beq.n	80098ee <_sungetc_r+0x26>
 800990a:	e7e1      	b.n	80098d0 <_sungetc_r+0x8>
 800990c:	6921      	ldr	r1, [r4, #16]
 800990e:	6823      	ldr	r3, [r4, #0]
 8009910:	b151      	cbz	r1, 8009928 <_sungetc_r+0x60>
 8009912:	4299      	cmp	r1, r3
 8009914:	d208      	bcs.n	8009928 <_sungetc_r+0x60>
 8009916:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800991a:	42a9      	cmp	r1, r5
 800991c:	d104      	bne.n	8009928 <_sungetc_r+0x60>
 800991e:	3b01      	subs	r3, #1
 8009920:	3201      	adds	r2, #1
 8009922:	6023      	str	r3, [r4, #0]
 8009924:	6062      	str	r2, [r4, #4]
 8009926:	e7d5      	b.n	80098d4 <_sungetc_r+0xc>
 8009928:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800992c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009930:	6363      	str	r3, [r4, #52]	; 0x34
 8009932:	2303      	movs	r3, #3
 8009934:	63a3      	str	r3, [r4, #56]	; 0x38
 8009936:	4623      	mov	r3, r4
 8009938:	f803 5f46 	strb.w	r5, [r3, #70]!
 800993c:	6023      	str	r3, [r4, #0]
 800993e:	2301      	movs	r3, #1
 8009940:	e7dc      	b.n	80098fc <_sungetc_r+0x34>

08009942 <__ssrefill_r>:
 8009942:	b510      	push	{r4, lr}
 8009944:	460c      	mov	r4, r1
 8009946:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009948:	b169      	cbz	r1, 8009966 <__ssrefill_r+0x24>
 800994a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800994e:	4299      	cmp	r1, r3
 8009950:	d001      	beq.n	8009956 <__ssrefill_r+0x14>
 8009952:	f7ff fdbf 	bl	80094d4 <_free_r>
 8009956:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009958:	6063      	str	r3, [r4, #4]
 800995a:	2000      	movs	r0, #0
 800995c:	6360      	str	r0, [r4, #52]	; 0x34
 800995e:	b113      	cbz	r3, 8009966 <__ssrefill_r+0x24>
 8009960:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009962:	6023      	str	r3, [r4, #0]
 8009964:	bd10      	pop	{r4, pc}
 8009966:	6923      	ldr	r3, [r4, #16]
 8009968:	6023      	str	r3, [r4, #0]
 800996a:	2300      	movs	r3, #0
 800996c:	6063      	str	r3, [r4, #4]
 800996e:	89a3      	ldrh	r3, [r4, #12]
 8009970:	f043 0320 	orr.w	r3, r3, #32
 8009974:	81a3      	strh	r3, [r4, #12]
 8009976:	f04f 30ff 	mov.w	r0, #4294967295
 800997a:	e7f3      	b.n	8009964 <__ssrefill_r+0x22>

0800997c <__ssvfiscanf_r>:
 800997c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009980:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8009984:	460c      	mov	r4, r1
 8009986:	2100      	movs	r1, #0
 8009988:	9144      	str	r1, [sp, #272]	; 0x110
 800998a:	9145      	str	r1, [sp, #276]	; 0x114
 800998c:	499f      	ldr	r1, [pc, #636]	; (8009c0c <__ssvfiscanf_r+0x290>)
 800998e:	91a0      	str	r1, [sp, #640]	; 0x280
 8009990:	f10d 0804 	add.w	r8, sp, #4
 8009994:	499e      	ldr	r1, [pc, #632]	; (8009c10 <__ssvfiscanf_r+0x294>)
 8009996:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8009c14 <__ssvfiscanf_r+0x298>
 800999a:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800999e:	4606      	mov	r6, r0
 80099a0:	4692      	mov	sl, r2
 80099a2:	91a1      	str	r1, [sp, #644]	; 0x284
 80099a4:	9300      	str	r3, [sp, #0]
 80099a6:	270a      	movs	r7, #10
 80099a8:	f89a 3000 	ldrb.w	r3, [sl]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	f000 812a 	beq.w	8009c06 <__ssvfiscanf_r+0x28a>
 80099b2:	4655      	mov	r5, sl
 80099b4:	f7ff f93e 	bl	8008c34 <__locale_ctype_ptr>
 80099b8:	f815 bb01 	ldrb.w	fp, [r5], #1
 80099bc:	4458      	add	r0, fp
 80099be:	7843      	ldrb	r3, [r0, #1]
 80099c0:	f013 0308 	ands.w	r3, r3, #8
 80099c4:	d01c      	beq.n	8009a00 <__ssvfiscanf_r+0x84>
 80099c6:	6863      	ldr	r3, [r4, #4]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	dd12      	ble.n	80099f2 <__ssvfiscanf_r+0x76>
 80099cc:	f7ff f932 	bl	8008c34 <__locale_ctype_ptr>
 80099d0:	6823      	ldr	r3, [r4, #0]
 80099d2:	781a      	ldrb	r2, [r3, #0]
 80099d4:	4410      	add	r0, r2
 80099d6:	7842      	ldrb	r2, [r0, #1]
 80099d8:	0712      	lsls	r2, r2, #28
 80099da:	d401      	bmi.n	80099e0 <__ssvfiscanf_r+0x64>
 80099dc:	46aa      	mov	sl, r5
 80099de:	e7e3      	b.n	80099a8 <__ssvfiscanf_r+0x2c>
 80099e0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80099e2:	3201      	adds	r2, #1
 80099e4:	9245      	str	r2, [sp, #276]	; 0x114
 80099e6:	6862      	ldr	r2, [r4, #4]
 80099e8:	3301      	adds	r3, #1
 80099ea:	3a01      	subs	r2, #1
 80099ec:	6062      	str	r2, [r4, #4]
 80099ee:	6023      	str	r3, [r4, #0]
 80099f0:	e7e9      	b.n	80099c6 <__ssvfiscanf_r+0x4a>
 80099f2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80099f4:	4621      	mov	r1, r4
 80099f6:	4630      	mov	r0, r6
 80099f8:	4798      	blx	r3
 80099fa:	2800      	cmp	r0, #0
 80099fc:	d0e6      	beq.n	80099cc <__ssvfiscanf_r+0x50>
 80099fe:	e7ed      	b.n	80099dc <__ssvfiscanf_r+0x60>
 8009a00:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8009a04:	f040 8082 	bne.w	8009b0c <__ssvfiscanf_r+0x190>
 8009a08:	9343      	str	r3, [sp, #268]	; 0x10c
 8009a0a:	9341      	str	r3, [sp, #260]	; 0x104
 8009a0c:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8009a10:	2b2a      	cmp	r3, #42	; 0x2a
 8009a12:	d103      	bne.n	8009a1c <__ssvfiscanf_r+0xa0>
 8009a14:	2310      	movs	r3, #16
 8009a16:	9341      	str	r3, [sp, #260]	; 0x104
 8009a18:	f10a 0502 	add.w	r5, sl, #2
 8009a1c:	46aa      	mov	sl, r5
 8009a1e:	f815 1b01 	ldrb.w	r1, [r5], #1
 8009a22:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8009a26:	2a09      	cmp	r2, #9
 8009a28:	d922      	bls.n	8009a70 <__ssvfiscanf_r+0xf4>
 8009a2a:	2203      	movs	r2, #3
 8009a2c:	4879      	ldr	r0, [pc, #484]	; (8009c14 <__ssvfiscanf_r+0x298>)
 8009a2e:	f7f6 fbdf 	bl	80001f0 <memchr>
 8009a32:	b138      	cbz	r0, 8009a44 <__ssvfiscanf_r+0xc8>
 8009a34:	eba0 0309 	sub.w	r3, r0, r9
 8009a38:	2001      	movs	r0, #1
 8009a3a:	4098      	lsls	r0, r3
 8009a3c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009a3e:	4318      	orrs	r0, r3
 8009a40:	9041      	str	r0, [sp, #260]	; 0x104
 8009a42:	46aa      	mov	sl, r5
 8009a44:	f89a 3000 	ldrb.w	r3, [sl]
 8009a48:	2b67      	cmp	r3, #103	; 0x67
 8009a4a:	f10a 0501 	add.w	r5, sl, #1
 8009a4e:	d82b      	bhi.n	8009aa8 <__ssvfiscanf_r+0x12c>
 8009a50:	2b65      	cmp	r3, #101	; 0x65
 8009a52:	f080 809f 	bcs.w	8009b94 <__ssvfiscanf_r+0x218>
 8009a56:	2b47      	cmp	r3, #71	; 0x47
 8009a58:	d810      	bhi.n	8009a7c <__ssvfiscanf_r+0x100>
 8009a5a:	2b45      	cmp	r3, #69	; 0x45
 8009a5c:	f080 809a 	bcs.w	8009b94 <__ssvfiscanf_r+0x218>
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d06c      	beq.n	8009b3e <__ssvfiscanf_r+0x1c2>
 8009a64:	2b25      	cmp	r3, #37	; 0x25
 8009a66:	d051      	beq.n	8009b0c <__ssvfiscanf_r+0x190>
 8009a68:	2303      	movs	r3, #3
 8009a6a:	9347      	str	r3, [sp, #284]	; 0x11c
 8009a6c:	9742      	str	r7, [sp, #264]	; 0x108
 8009a6e:	e027      	b.n	8009ac0 <__ssvfiscanf_r+0x144>
 8009a70:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8009a72:	fb07 1303 	mla	r3, r7, r3, r1
 8009a76:	3b30      	subs	r3, #48	; 0x30
 8009a78:	9343      	str	r3, [sp, #268]	; 0x10c
 8009a7a:	e7cf      	b.n	8009a1c <__ssvfiscanf_r+0xa0>
 8009a7c:	2b5b      	cmp	r3, #91	; 0x5b
 8009a7e:	d06a      	beq.n	8009b56 <__ssvfiscanf_r+0x1da>
 8009a80:	d80c      	bhi.n	8009a9c <__ssvfiscanf_r+0x120>
 8009a82:	2b58      	cmp	r3, #88	; 0x58
 8009a84:	d1f0      	bne.n	8009a68 <__ssvfiscanf_r+0xec>
 8009a86:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009a88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a8c:	9241      	str	r2, [sp, #260]	; 0x104
 8009a8e:	2210      	movs	r2, #16
 8009a90:	9242      	str	r2, [sp, #264]	; 0x108
 8009a92:	2b6e      	cmp	r3, #110	; 0x6e
 8009a94:	bf8c      	ite	hi
 8009a96:	2304      	movhi	r3, #4
 8009a98:	2303      	movls	r3, #3
 8009a9a:	e010      	b.n	8009abe <__ssvfiscanf_r+0x142>
 8009a9c:	2b63      	cmp	r3, #99	; 0x63
 8009a9e:	d065      	beq.n	8009b6c <__ssvfiscanf_r+0x1f0>
 8009aa0:	2b64      	cmp	r3, #100	; 0x64
 8009aa2:	d1e1      	bne.n	8009a68 <__ssvfiscanf_r+0xec>
 8009aa4:	9742      	str	r7, [sp, #264]	; 0x108
 8009aa6:	e7f4      	b.n	8009a92 <__ssvfiscanf_r+0x116>
 8009aa8:	2b70      	cmp	r3, #112	; 0x70
 8009aaa:	d04b      	beq.n	8009b44 <__ssvfiscanf_r+0x1c8>
 8009aac:	d826      	bhi.n	8009afc <__ssvfiscanf_r+0x180>
 8009aae:	2b6e      	cmp	r3, #110	; 0x6e
 8009ab0:	d062      	beq.n	8009b78 <__ssvfiscanf_r+0x1fc>
 8009ab2:	d84c      	bhi.n	8009b4e <__ssvfiscanf_r+0x1d2>
 8009ab4:	2b69      	cmp	r3, #105	; 0x69
 8009ab6:	d1d7      	bne.n	8009a68 <__ssvfiscanf_r+0xec>
 8009ab8:	2300      	movs	r3, #0
 8009aba:	9342      	str	r3, [sp, #264]	; 0x108
 8009abc:	2303      	movs	r3, #3
 8009abe:	9347      	str	r3, [sp, #284]	; 0x11c
 8009ac0:	6863      	ldr	r3, [r4, #4]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	dd68      	ble.n	8009b98 <__ssvfiscanf_r+0x21c>
 8009ac6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009ac8:	0659      	lsls	r1, r3, #25
 8009aca:	d407      	bmi.n	8009adc <__ssvfiscanf_r+0x160>
 8009acc:	f7ff f8b2 	bl	8008c34 <__locale_ctype_ptr>
 8009ad0:	6823      	ldr	r3, [r4, #0]
 8009ad2:	781a      	ldrb	r2, [r3, #0]
 8009ad4:	4410      	add	r0, r2
 8009ad6:	7842      	ldrb	r2, [r0, #1]
 8009ad8:	0712      	lsls	r2, r2, #28
 8009ada:	d464      	bmi.n	8009ba6 <__ssvfiscanf_r+0x22a>
 8009adc:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8009ade:	2b02      	cmp	r3, #2
 8009ae0:	dc73      	bgt.n	8009bca <__ssvfiscanf_r+0x24e>
 8009ae2:	466b      	mov	r3, sp
 8009ae4:	4622      	mov	r2, r4
 8009ae6:	a941      	add	r1, sp, #260	; 0x104
 8009ae8:	4630      	mov	r0, r6
 8009aea:	f000 f897 	bl	8009c1c <_scanf_chars>
 8009aee:	2801      	cmp	r0, #1
 8009af0:	f000 8089 	beq.w	8009c06 <__ssvfiscanf_r+0x28a>
 8009af4:	2802      	cmp	r0, #2
 8009af6:	f47f af71 	bne.w	80099dc <__ssvfiscanf_r+0x60>
 8009afa:	e01d      	b.n	8009b38 <__ssvfiscanf_r+0x1bc>
 8009afc:	2b75      	cmp	r3, #117	; 0x75
 8009afe:	d0d1      	beq.n	8009aa4 <__ssvfiscanf_r+0x128>
 8009b00:	2b78      	cmp	r3, #120	; 0x78
 8009b02:	d0c0      	beq.n	8009a86 <__ssvfiscanf_r+0x10a>
 8009b04:	2b73      	cmp	r3, #115	; 0x73
 8009b06:	d1af      	bne.n	8009a68 <__ssvfiscanf_r+0xec>
 8009b08:	2302      	movs	r3, #2
 8009b0a:	e7d8      	b.n	8009abe <__ssvfiscanf_r+0x142>
 8009b0c:	6863      	ldr	r3, [r4, #4]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	dd0c      	ble.n	8009b2c <__ssvfiscanf_r+0x1b0>
 8009b12:	6823      	ldr	r3, [r4, #0]
 8009b14:	781a      	ldrb	r2, [r3, #0]
 8009b16:	455a      	cmp	r2, fp
 8009b18:	d175      	bne.n	8009c06 <__ssvfiscanf_r+0x28a>
 8009b1a:	3301      	adds	r3, #1
 8009b1c:	6862      	ldr	r2, [r4, #4]
 8009b1e:	6023      	str	r3, [r4, #0]
 8009b20:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8009b22:	3a01      	subs	r2, #1
 8009b24:	3301      	adds	r3, #1
 8009b26:	6062      	str	r2, [r4, #4]
 8009b28:	9345      	str	r3, [sp, #276]	; 0x114
 8009b2a:	e757      	b.n	80099dc <__ssvfiscanf_r+0x60>
 8009b2c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009b2e:	4621      	mov	r1, r4
 8009b30:	4630      	mov	r0, r6
 8009b32:	4798      	blx	r3
 8009b34:	2800      	cmp	r0, #0
 8009b36:	d0ec      	beq.n	8009b12 <__ssvfiscanf_r+0x196>
 8009b38:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009b3a:	2800      	cmp	r0, #0
 8009b3c:	d159      	bne.n	8009bf2 <__ssvfiscanf_r+0x276>
 8009b3e:	f04f 30ff 	mov.w	r0, #4294967295
 8009b42:	e05c      	b.n	8009bfe <__ssvfiscanf_r+0x282>
 8009b44:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009b46:	f042 0220 	orr.w	r2, r2, #32
 8009b4a:	9241      	str	r2, [sp, #260]	; 0x104
 8009b4c:	e79b      	b.n	8009a86 <__ssvfiscanf_r+0x10a>
 8009b4e:	2308      	movs	r3, #8
 8009b50:	9342      	str	r3, [sp, #264]	; 0x108
 8009b52:	2304      	movs	r3, #4
 8009b54:	e7b3      	b.n	8009abe <__ssvfiscanf_r+0x142>
 8009b56:	4629      	mov	r1, r5
 8009b58:	4640      	mov	r0, r8
 8009b5a:	f000 f9c7 	bl	8009eec <__sccl>
 8009b5e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009b60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b64:	9341      	str	r3, [sp, #260]	; 0x104
 8009b66:	4605      	mov	r5, r0
 8009b68:	2301      	movs	r3, #1
 8009b6a:	e7a8      	b.n	8009abe <__ssvfiscanf_r+0x142>
 8009b6c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009b6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b72:	9341      	str	r3, [sp, #260]	; 0x104
 8009b74:	2300      	movs	r3, #0
 8009b76:	e7a2      	b.n	8009abe <__ssvfiscanf_r+0x142>
 8009b78:	9841      	ldr	r0, [sp, #260]	; 0x104
 8009b7a:	06c3      	lsls	r3, r0, #27
 8009b7c:	f53f af2e 	bmi.w	80099dc <__ssvfiscanf_r+0x60>
 8009b80:	9b00      	ldr	r3, [sp, #0]
 8009b82:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009b84:	1d19      	adds	r1, r3, #4
 8009b86:	9100      	str	r1, [sp, #0]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	07c0      	lsls	r0, r0, #31
 8009b8c:	bf4c      	ite	mi
 8009b8e:	801a      	strhmi	r2, [r3, #0]
 8009b90:	601a      	strpl	r2, [r3, #0]
 8009b92:	e723      	b.n	80099dc <__ssvfiscanf_r+0x60>
 8009b94:	2305      	movs	r3, #5
 8009b96:	e792      	b.n	8009abe <__ssvfiscanf_r+0x142>
 8009b98:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009b9a:	4621      	mov	r1, r4
 8009b9c:	4630      	mov	r0, r6
 8009b9e:	4798      	blx	r3
 8009ba0:	2800      	cmp	r0, #0
 8009ba2:	d090      	beq.n	8009ac6 <__ssvfiscanf_r+0x14a>
 8009ba4:	e7c8      	b.n	8009b38 <__ssvfiscanf_r+0x1bc>
 8009ba6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009ba8:	3201      	adds	r2, #1
 8009baa:	9245      	str	r2, [sp, #276]	; 0x114
 8009bac:	6862      	ldr	r2, [r4, #4]
 8009bae:	3a01      	subs	r2, #1
 8009bb0:	2a00      	cmp	r2, #0
 8009bb2:	6062      	str	r2, [r4, #4]
 8009bb4:	dd02      	ble.n	8009bbc <__ssvfiscanf_r+0x240>
 8009bb6:	3301      	adds	r3, #1
 8009bb8:	6023      	str	r3, [r4, #0]
 8009bba:	e787      	b.n	8009acc <__ssvfiscanf_r+0x150>
 8009bbc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009bbe:	4621      	mov	r1, r4
 8009bc0:	4630      	mov	r0, r6
 8009bc2:	4798      	blx	r3
 8009bc4:	2800      	cmp	r0, #0
 8009bc6:	d081      	beq.n	8009acc <__ssvfiscanf_r+0x150>
 8009bc8:	e7b6      	b.n	8009b38 <__ssvfiscanf_r+0x1bc>
 8009bca:	2b04      	cmp	r3, #4
 8009bcc:	dc06      	bgt.n	8009bdc <__ssvfiscanf_r+0x260>
 8009bce:	466b      	mov	r3, sp
 8009bd0:	4622      	mov	r2, r4
 8009bd2:	a941      	add	r1, sp, #260	; 0x104
 8009bd4:	4630      	mov	r0, r6
 8009bd6:	f000 f885 	bl	8009ce4 <_scanf_i>
 8009bda:	e788      	b.n	8009aee <__ssvfiscanf_r+0x172>
 8009bdc:	4b0e      	ldr	r3, [pc, #56]	; (8009c18 <__ssvfiscanf_r+0x29c>)
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	f43f aefc 	beq.w	80099dc <__ssvfiscanf_r+0x60>
 8009be4:	466b      	mov	r3, sp
 8009be6:	4622      	mov	r2, r4
 8009be8:	a941      	add	r1, sp, #260	; 0x104
 8009bea:	4630      	mov	r0, r6
 8009bec:	f7fc fdce 	bl	800678c <_scanf_float>
 8009bf0:	e77d      	b.n	8009aee <__ssvfiscanf_r+0x172>
 8009bf2:	89a3      	ldrh	r3, [r4, #12]
 8009bf4:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009bf8:	bf18      	it	ne
 8009bfa:	f04f 30ff 	movne.w	r0, #4294967295
 8009bfe:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8009c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c06:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009c08:	e7f9      	b.n	8009bfe <__ssvfiscanf_r+0x282>
 8009c0a:	bf00      	nop
 8009c0c:	080098c9 	.word	0x080098c9
 8009c10:	08009943 	.word	0x08009943
 8009c14:	0800a46a 	.word	0x0800a46a
 8009c18:	0800678d 	.word	0x0800678d

08009c1c <_scanf_chars>:
 8009c1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c20:	4615      	mov	r5, r2
 8009c22:	688a      	ldr	r2, [r1, #8]
 8009c24:	4680      	mov	r8, r0
 8009c26:	460c      	mov	r4, r1
 8009c28:	b932      	cbnz	r2, 8009c38 <_scanf_chars+0x1c>
 8009c2a:	698a      	ldr	r2, [r1, #24]
 8009c2c:	2a00      	cmp	r2, #0
 8009c2e:	bf14      	ite	ne
 8009c30:	f04f 32ff 	movne.w	r2, #4294967295
 8009c34:	2201      	moveq	r2, #1
 8009c36:	608a      	str	r2, [r1, #8]
 8009c38:	6822      	ldr	r2, [r4, #0]
 8009c3a:	06d1      	lsls	r1, r2, #27
 8009c3c:	bf5f      	itttt	pl
 8009c3e:	681a      	ldrpl	r2, [r3, #0]
 8009c40:	1d11      	addpl	r1, r2, #4
 8009c42:	6019      	strpl	r1, [r3, #0]
 8009c44:	6817      	ldrpl	r7, [r2, #0]
 8009c46:	2600      	movs	r6, #0
 8009c48:	69a3      	ldr	r3, [r4, #24]
 8009c4a:	b1db      	cbz	r3, 8009c84 <_scanf_chars+0x68>
 8009c4c:	2b01      	cmp	r3, #1
 8009c4e:	d107      	bne.n	8009c60 <_scanf_chars+0x44>
 8009c50:	682b      	ldr	r3, [r5, #0]
 8009c52:	6962      	ldr	r2, [r4, #20]
 8009c54:	781b      	ldrb	r3, [r3, #0]
 8009c56:	5cd3      	ldrb	r3, [r2, r3]
 8009c58:	b9a3      	cbnz	r3, 8009c84 <_scanf_chars+0x68>
 8009c5a:	2e00      	cmp	r6, #0
 8009c5c:	d132      	bne.n	8009cc4 <_scanf_chars+0xa8>
 8009c5e:	e006      	b.n	8009c6e <_scanf_chars+0x52>
 8009c60:	2b02      	cmp	r3, #2
 8009c62:	d007      	beq.n	8009c74 <_scanf_chars+0x58>
 8009c64:	2e00      	cmp	r6, #0
 8009c66:	d12d      	bne.n	8009cc4 <_scanf_chars+0xa8>
 8009c68:	69a3      	ldr	r3, [r4, #24]
 8009c6a:	2b01      	cmp	r3, #1
 8009c6c:	d12a      	bne.n	8009cc4 <_scanf_chars+0xa8>
 8009c6e:	2001      	movs	r0, #1
 8009c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c74:	f7fe ffde 	bl	8008c34 <__locale_ctype_ptr>
 8009c78:	682b      	ldr	r3, [r5, #0]
 8009c7a:	781b      	ldrb	r3, [r3, #0]
 8009c7c:	4418      	add	r0, r3
 8009c7e:	7843      	ldrb	r3, [r0, #1]
 8009c80:	071b      	lsls	r3, r3, #28
 8009c82:	d4ef      	bmi.n	8009c64 <_scanf_chars+0x48>
 8009c84:	6823      	ldr	r3, [r4, #0]
 8009c86:	06da      	lsls	r2, r3, #27
 8009c88:	bf5e      	ittt	pl
 8009c8a:	682b      	ldrpl	r3, [r5, #0]
 8009c8c:	781b      	ldrbpl	r3, [r3, #0]
 8009c8e:	703b      	strbpl	r3, [r7, #0]
 8009c90:	682a      	ldr	r2, [r5, #0]
 8009c92:	686b      	ldr	r3, [r5, #4]
 8009c94:	f102 0201 	add.w	r2, r2, #1
 8009c98:	602a      	str	r2, [r5, #0]
 8009c9a:	68a2      	ldr	r2, [r4, #8]
 8009c9c:	f103 33ff 	add.w	r3, r3, #4294967295
 8009ca0:	f102 32ff 	add.w	r2, r2, #4294967295
 8009ca4:	606b      	str	r3, [r5, #4]
 8009ca6:	f106 0601 	add.w	r6, r6, #1
 8009caa:	bf58      	it	pl
 8009cac:	3701      	addpl	r7, #1
 8009cae:	60a2      	str	r2, [r4, #8]
 8009cb0:	b142      	cbz	r2, 8009cc4 <_scanf_chars+0xa8>
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	dcc8      	bgt.n	8009c48 <_scanf_chars+0x2c>
 8009cb6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009cba:	4629      	mov	r1, r5
 8009cbc:	4640      	mov	r0, r8
 8009cbe:	4798      	blx	r3
 8009cc0:	2800      	cmp	r0, #0
 8009cc2:	d0c1      	beq.n	8009c48 <_scanf_chars+0x2c>
 8009cc4:	6823      	ldr	r3, [r4, #0]
 8009cc6:	f013 0310 	ands.w	r3, r3, #16
 8009cca:	d105      	bne.n	8009cd8 <_scanf_chars+0xbc>
 8009ccc:	68e2      	ldr	r2, [r4, #12]
 8009cce:	3201      	adds	r2, #1
 8009cd0:	60e2      	str	r2, [r4, #12]
 8009cd2:	69a2      	ldr	r2, [r4, #24]
 8009cd4:	b102      	cbz	r2, 8009cd8 <_scanf_chars+0xbc>
 8009cd6:	703b      	strb	r3, [r7, #0]
 8009cd8:	6923      	ldr	r3, [r4, #16]
 8009cda:	441e      	add	r6, r3
 8009cdc:	6126      	str	r6, [r4, #16]
 8009cde:	2000      	movs	r0, #0
 8009ce0:	e7c6      	b.n	8009c70 <_scanf_chars+0x54>
	...

08009ce4 <_scanf_i>:
 8009ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ce8:	469a      	mov	sl, r3
 8009cea:	4b74      	ldr	r3, [pc, #464]	; (8009ebc <_scanf_i+0x1d8>)
 8009cec:	460c      	mov	r4, r1
 8009cee:	4683      	mov	fp, r0
 8009cf0:	4616      	mov	r6, r2
 8009cf2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009cf6:	b087      	sub	sp, #28
 8009cf8:	ab03      	add	r3, sp, #12
 8009cfa:	68a7      	ldr	r7, [r4, #8]
 8009cfc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009d00:	4b6f      	ldr	r3, [pc, #444]	; (8009ec0 <_scanf_i+0x1dc>)
 8009d02:	69a1      	ldr	r1, [r4, #24]
 8009d04:	4a6f      	ldr	r2, [pc, #444]	; (8009ec4 <_scanf_i+0x1e0>)
 8009d06:	2903      	cmp	r1, #3
 8009d08:	bf08      	it	eq
 8009d0a:	461a      	moveq	r2, r3
 8009d0c:	1e7b      	subs	r3, r7, #1
 8009d0e:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8009d12:	bf84      	itt	hi
 8009d14:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009d18:	60a3      	strhi	r3, [r4, #8]
 8009d1a:	6823      	ldr	r3, [r4, #0]
 8009d1c:	9200      	str	r2, [sp, #0]
 8009d1e:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8009d22:	bf88      	it	hi
 8009d24:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009d28:	f104 091c 	add.w	r9, r4, #28
 8009d2c:	6023      	str	r3, [r4, #0]
 8009d2e:	bf8c      	ite	hi
 8009d30:	197f      	addhi	r7, r7, r5
 8009d32:	2700      	movls	r7, #0
 8009d34:	464b      	mov	r3, r9
 8009d36:	f04f 0800 	mov.w	r8, #0
 8009d3a:	9301      	str	r3, [sp, #4]
 8009d3c:	6831      	ldr	r1, [r6, #0]
 8009d3e:	ab03      	add	r3, sp, #12
 8009d40:	2202      	movs	r2, #2
 8009d42:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8009d46:	7809      	ldrb	r1, [r1, #0]
 8009d48:	f7f6 fa52 	bl	80001f0 <memchr>
 8009d4c:	9b01      	ldr	r3, [sp, #4]
 8009d4e:	b330      	cbz	r0, 8009d9e <_scanf_i+0xba>
 8009d50:	f1b8 0f01 	cmp.w	r8, #1
 8009d54:	d15a      	bne.n	8009e0c <_scanf_i+0x128>
 8009d56:	6862      	ldr	r2, [r4, #4]
 8009d58:	b92a      	cbnz	r2, 8009d66 <_scanf_i+0x82>
 8009d5a:	6822      	ldr	r2, [r4, #0]
 8009d5c:	2108      	movs	r1, #8
 8009d5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d62:	6061      	str	r1, [r4, #4]
 8009d64:	6022      	str	r2, [r4, #0]
 8009d66:	6822      	ldr	r2, [r4, #0]
 8009d68:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8009d6c:	6022      	str	r2, [r4, #0]
 8009d6e:	68a2      	ldr	r2, [r4, #8]
 8009d70:	1e51      	subs	r1, r2, #1
 8009d72:	60a1      	str	r1, [r4, #8]
 8009d74:	b19a      	cbz	r2, 8009d9e <_scanf_i+0xba>
 8009d76:	6832      	ldr	r2, [r6, #0]
 8009d78:	1c51      	adds	r1, r2, #1
 8009d7a:	6031      	str	r1, [r6, #0]
 8009d7c:	7812      	ldrb	r2, [r2, #0]
 8009d7e:	701a      	strb	r2, [r3, #0]
 8009d80:	1c5d      	adds	r5, r3, #1
 8009d82:	6873      	ldr	r3, [r6, #4]
 8009d84:	3b01      	subs	r3, #1
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	6073      	str	r3, [r6, #4]
 8009d8a:	dc07      	bgt.n	8009d9c <_scanf_i+0xb8>
 8009d8c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009d90:	4631      	mov	r1, r6
 8009d92:	4658      	mov	r0, fp
 8009d94:	4798      	blx	r3
 8009d96:	2800      	cmp	r0, #0
 8009d98:	f040 8086 	bne.w	8009ea8 <_scanf_i+0x1c4>
 8009d9c:	462b      	mov	r3, r5
 8009d9e:	f108 0801 	add.w	r8, r8, #1
 8009da2:	f1b8 0f03 	cmp.w	r8, #3
 8009da6:	d1c8      	bne.n	8009d3a <_scanf_i+0x56>
 8009da8:	6862      	ldr	r2, [r4, #4]
 8009daa:	b90a      	cbnz	r2, 8009db0 <_scanf_i+0xcc>
 8009dac:	220a      	movs	r2, #10
 8009dae:	6062      	str	r2, [r4, #4]
 8009db0:	6862      	ldr	r2, [r4, #4]
 8009db2:	4945      	ldr	r1, [pc, #276]	; (8009ec8 <_scanf_i+0x1e4>)
 8009db4:	6960      	ldr	r0, [r4, #20]
 8009db6:	9301      	str	r3, [sp, #4]
 8009db8:	1a89      	subs	r1, r1, r2
 8009dba:	f000 f897 	bl	8009eec <__sccl>
 8009dbe:	9b01      	ldr	r3, [sp, #4]
 8009dc0:	f04f 0800 	mov.w	r8, #0
 8009dc4:	461d      	mov	r5, r3
 8009dc6:	68a3      	ldr	r3, [r4, #8]
 8009dc8:	6822      	ldr	r2, [r4, #0]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d03a      	beq.n	8009e44 <_scanf_i+0x160>
 8009dce:	6831      	ldr	r1, [r6, #0]
 8009dd0:	6960      	ldr	r0, [r4, #20]
 8009dd2:	f891 c000 	ldrb.w	ip, [r1]
 8009dd6:	f810 000c 	ldrb.w	r0, [r0, ip]
 8009dda:	2800      	cmp	r0, #0
 8009ddc:	d032      	beq.n	8009e44 <_scanf_i+0x160>
 8009dde:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8009de2:	d121      	bne.n	8009e28 <_scanf_i+0x144>
 8009de4:	0510      	lsls	r0, r2, #20
 8009de6:	d51f      	bpl.n	8009e28 <_scanf_i+0x144>
 8009de8:	f108 0801 	add.w	r8, r8, #1
 8009dec:	b117      	cbz	r7, 8009df4 <_scanf_i+0x110>
 8009dee:	3301      	adds	r3, #1
 8009df0:	3f01      	subs	r7, #1
 8009df2:	60a3      	str	r3, [r4, #8]
 8009df4:	6873      	ldr	r3, [r6, #4]
 8009df6:	3b01      	subs	r3, #1
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	6073      	str	r3, [r6, #4]
 8009dfc:	dd1b      	ble.n	8009e36 <_scanf_i+0x152>
 8009dfe:	6833      	ldr	r3, [r6, #0]
 8009e00:	3301      	adds	r3, #1
 8009e02:	6033      	str	r3, [r6, #0]
 8009e04:	68a3      	ldr	r3, [r4, #8]
 8009e06:	3b01      	subs	r3, #1
 8009e08:	60a3      	str	r3, [r4, #8]
 8009e0a:	e7dc      	b.n	8009dc6 <_scanf_i+0xe2>
 8009e0c:	f1b8 0f02 	cmp.w	r8, #2
 8009e10:	d1ad      	bne.n	8009d6e <_scanf_i+0x8a>
 8009e12:	6822      	ldr	r2, [r4, #0]
 8009e14:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8009e18:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8009e1c:	d1bf      	bne.n	8009d9e <_scanf_i+0xba>
 8009e1e:	2110      	movs	r1, #16
 8009e20:	6061      	str	r1, [r4, #4]
 8009e22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009e26:	e7a1      	b.n	8009d6c <_scanf_i+0x88>
 8009e28:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8009e2c:	6022      	str	r2, [r4, #0]
 8009e2e:	780b      	ldrb	r3, [r1, #0]
 8009e30:	702b      	strb	r3, [r5, #0]
 8009e32:	3501      	adds	r5, #1
 8009e34:	e7de      	b.n	8009df4 <_scanf_i+0x110>
 8009e36:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009e3a:	4631      	mov	r1, r6
 8009e3c:	4658      	mov	r0, fp
 8009e3e:	4798      	blx	r3
 8009e40:	2800      	cmp	r0, #0
 8009e42:	d0df      	beq.n	8009e04 <_scanf_i+0x120>
 8009e44:	6823      	ldr	r3, [r4, #0]
 8009e46:	05d9      	lsls	r1, r3, #23
 8009e48:	d50c      	bpl.n	8009e64 <_scanf_i+0x180>
 8009e4a:	454d      	cmp	r5, r9
 8009e4c:	d908      	bls.n	8009e60 <_scanf_i+0x17c>
 8009e4e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8009e52:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009e56:	4632      	mov	r2, r6
 8009e58:	4658      	mov	r0, fp
 8009e5a:	4798      	blx	r3
 8009e5c:	1e6f      	subs	r7, r5, #1
 8009e5e:	463d      	mov	r5, r7
 8009e60:	454d      	cmp	r5, r9
 8009e62:	d029      	beq.n	8009eb8 <_scanf_i+0x1d4>
 8009e64:	6822      	ldr	r2, [r4, #0]
 8009e66:	f012 0210 	ands.w	r2, r2, #16
 8009e6a:	d113      	bne.n	8009e94 <_scanf_i+0x1b0>
 8009e6c:	702a      	strb	r2, [r5, #0]
 8009e6e:	6863      	ldr	r3, [r4, #4]
 8009e70:	9e00      	ldr	r6, [sp, #0]
 8009e72:	4649      	mov	r1, r9
 8009e74:	4658      	mov	r0, fp
 8009e76:	47b0      	blx	r6
 8009e78:	f8da 3000 	ldr.w	r3, [sl]
 8009e7c:	6821      	ldr	r1, [r4, #0]
 8009e7e:	1d1a      	adds	r2, r3, #4
 8009e80:	f8ca 2000 	str.w	r2, [sl]
 8009e84:	f011 0f20 	tst.w	r1, #32
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	d010      	beq.n	8009eae <_scanf_i+0x1ca>
 8009e8c:	6018      	str	r0, [r3, #0]
 8009e8e:	68e3      	ldr	r3, [r4, #12]
 8009e90:	3301      	adds	r3, #1
 8009e92:	60e3      	str	r3, [r4, #12]
 8009e94:	eba5 0509 	sub.w	r5, r5, r9
 8009e98:	44a8      	add	r8, r5
 8009e9a:	6925      	ldr	r5, [r4, #16]
 8009e9c:	4445      	add	r5, r8
 8009e9e:	6125      	str	r5, [r4, #16]
 8009ea0:	2000      	movs	r0, #0
 8009ea2:	b007      	add	sp, #28
 8009ea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ea8:	f04f 0800 	mov.w	r8, #0
 8009eac:	e7ca      	b.n	8009e44 <_scanf_i+0x160>
 8009eae:	07ca      	lsls	r2, r1, #31
 8009eb0:	bf4c      	ite	mi
 8009eb2:	8018      	strhmi	r0, [r3, #0]
 8009eb4:	6018      	strpl	r0, [r3, #0]
 8009eb6:	e7ea      	b.n	8009e8e <_scanf_i+0x1aa>
 8009eb8:	2001      	movs	r0, #1
 8009eba:	e7f2      	b.n	8009ea2 <_scanf_i+0x1be>
 8009ebc:	0800a290 	.word	0x0800a290
 8009ec0:	08007931 	.word	0x08007931
 8009ec4:	0800a069 	.word	0x0800a069
 8009ec8:	0800a485 	.word	0x0800a485

08009ecc <_sbrk_r>:
 8009ecc:	b538      	push	{r3, r4, r5, lr}
 8009ece:	4c06      	ldr	r4, [pc, #24]	; (8009ee8 <_sbrk_r+0x1c>)
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	4605      	mov	r5, r0
 8009ed4:	4608      	mov	r0, r1
 8009ed6:	6023      	str	r3, [r4, #0]
 8009ed8:	f7fb ff5e 	bl	8005d98 <_sbrk>
 8009edc:	1c43      	adds	r3, r0, #1
 8009ede:	d102      	bne.n	8009ee6 <_sbrk_r+0x1a>
 8009ee0:	6823      	ldr	r3, [r4, #0]
 8009ee2:	b103      	cbz	r3, 8009ee6 <_sbrk_r+0x1a>
 8009ee4:	602b      	str	r3, [r5, #0]
 8009ee6:	bd38      	pop	{r3, r4, r5, pc}
 8009ee8:	20004408 	.word	0x20004408

08009eec <__sccl>:
 8009eec:	b570      	push	{r4, r5, r6, lr}
 8009eee:	780b      	ldrb	r3, [r1, #0]
 8009ef0:	2b5e      	cmp	r3, #94	; 0x5e
 8009ef2:	bf13      	iteet	ne
 8009ef4:	1c4a      	addne	r2, r1, #1
 8009ef6:	1c8a      	addeq	r2, r1, #2
 8009ef8:	784b      	ldrbeq	r3, [r1, #1]
 8009efa:	2100      	movne	r1, #0
 8009efc:	bf08      	it	eq
 8009efe:	2101      	moveq	r1, #1
 8009f00:	1e44      	subs	r4, r0, #1
 8009f02:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8009f06:	f804 1f01 	strb.w	r1, [r4, #1]!
 8009f0a:	42ac      	cmp	r4, r5
 8009f0c:	d1fb      	bne.n	8009f06 <__sccl+0x1a>
 8009f0e:	b913      	cbnz	r3, 8009f16 <__sccl+0x2a>
 8009f10:	3a01      	subs	r2, #1
 8009f12:	4610      	mov	r0, r2
 8009f14:	bd70      	pop	{r4, r5, r6, pc}
 8009f16:	f081 0401 	eor.w	r4, r1, #1
 8009f1a:	54c4      	strb	r4, [r0, r3]
 8009f1c:	1c51      	adds	r1, r2, #1
 8009f1e:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8009f22:	2d2d      	cmp	r5, #45	; 0x2d
 8009f24:	f101 36ff 	add.w	r6, r1, #4294967295
 8009f28:	460a      	mov	r2, r1
 8009f2a:	d006      	beq.n	8009f3a <__sccl+0x4e>
 8009f2c:	2d5d      	cmp	r5, #93	; 0x5d
 8009f2e:	d0f0      	beq.n	8009f12 <__sccl+0x26>
 8009f30:	b90d      	cbnz	r5, 8009f36 <__sccl+0x4a>
 8009f32:	4632      	mov	r2, r6
 8009f34:	e7ed      	b.n	8009f12 <__sccl+0x26>
 8009f36:	462b      	mov	r3, r5
 8009f38:	e7ef      	b.n	8009f1a <__sccl+0x2e>
 8009f3a:	780e      	ldrb	r6, [r1, #0]
 8009f3c:	2e5d      	cmp	r6, #93	; 0x5d
 8009f3e:	d0fa      	beq.n	8009f36 <__sccl+0x4a>
 8009f40:	42b3      	cmp	r3, r6
 8009f42:	dcf8      	bgt.n	8009f36 <__sccl+0x4a>
 8009f44:	3301      	adds	r3, #1
 8009f46:	429e      	cmp	r6, r3
 8009f48:	54c4      	strb	r4, [r0, r3]
 8009f4a:	dcfb      	bgt.n	8009f44 <__sccl+0x58>
 8009f4c:	3102      	adds	r1, #2
 8009f4e:	e7e6      	b.n	8009f1e <__sccl+0x32>

08009f50 <strncmp>:
 8009f50:	b510      	push	{r4, lr}
 8009f52:	b16a      	cbz	r2, 8009f70 <strncmp+0x20>
 8009f54:	3901      	subs	r1, #1
 8009f56:	1884      	adds	r4, r0, r2
 8009f58:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009f5c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009f60:	4293      	cmp	r3, r2
 8009f62:	d103      	bne.n	8009f6c <strncmp+0x1c>
 8009f64:	42a0      	cmp	r0, r4
 8009f66:	d001      	beq.n	8009f6c <strncmp+0x1c>
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d1f5      	bne.n	8009f58 <strncmp+0x8>
 8009f6c:	1a98      	subs	r0, r3, r2
 8009f6e:	bd10      	pop	{r4, pc}
 8009f70:	4610      	mov	r0, r2
 8009f72:	e7fc      	b.n	8009f6e <strncmp+0x1e>

08009f74 <_strtoul_l.isra.0>:
 8009f74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f78:	4680      	mov	r8, r0
 8009f7a:	4689      	mov	r9, r1
 8009f7c:	4692      	mov	sl, r2
 8009f7e:	461e      	mov	r6, r3
 8009f80:	460f      	mov	r7, r1
 8009f82:	463d      	mov	r5, r7
 8009f84:	9808      	ldr	r0, [sp, #32]
 8009f86:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009f8a:	f7fe fe4f 	bl	8008c2c <__locale_ctype_ptr_l>
 8009f8e:	4420      	add	r0, r4
 8009f90:	7843      	ldrb	r3, [r0, #1]
 8009f92:	f013 0308 	ands.w	r3, r3, #8
 8009f96:	d130      	bne.n	8009ffa <_strtoul_l.isra.0+0x86>
 8009f98:	2c2d      	cmp	r4, #45	; 0x2d
 8009f9a:	d130      	bne.n	8009ffe <_strtoul_l.isra.0+0x8a>
 8009f9c:	787c      	ldrb	r4, [r7, #1]
 8009f9e:	1cbd      	adds	r5, r7, #2
 8009fa0:	2101      	movs	r1, #1
 8009fa2:	2e00      	cmp	r6, #0
 8009fa4:	d05c      	beq.n	800a060 <_strtoul_l.isra.0+0xec>
 8009fa6:	2e10      	cmp	r6, #16
 8009fa8:	d109      	bne.n	8009fbe <_strtoul_l.isra.0+0x4a>
 8009faa:	2c30      	cmp	r4, #48	; 0x30
 8009fac:	d107      	bne.n	8009fbe <_strtoul_l.isra.0+0x4a>
 8009fae:	782b      	ldrb	r3, [r5, #0]
 8009fb0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009fb4:	2b58      	cmp	r3, #88	; 0x58
 8009fb6:	d14e      	bne.n	800a056 <_strtoul_l.isra.0+0xe2>
 8009fb8:	786c      	ldrb	r4, [r5, #1]
 8009fba:	2610      	movs	r6, #16
 8009fbc:	3502      	adds	r5, #2
 8009fbe:	f04f 32ff 	mov.w	r2, #4294967295
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	fbb2 f2f6 	udiv	r2, r2, r6
 8009fc8:	fb06 fc02 	mul.w	ip, r6, r2
 8009fcc:	ea6f 0c0c 	mvn.w	ip, ip
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8009fd6:	2f09      	cmp	r7, #9
 8009fd8:	d817      	bhi.n	800a00a <_strtoul_l.isra.0+0x96>
 8009fda:	463c      	mov	r4, r7
 8009fdc:	42a6      	cmp	r6, r4
 8009fde:	dd23      	ble.n	800a028 <_strtoul_l.isra.0+0xb4>
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	db1e      	blt.n	800a022 <_strtoul_l.isra.0+0xae>
 8009fe4:	4282      	cmp	r2, r0
 8009fe6:	d31c      	bcc.n	800a022 <_strtoul_l.isra.0+0xae>
 8009fe8:	d101      	bne.n	8009fee <_strtoul_l.isra.0+0x7a>
 8009fea:	45a4      	cmp	ip, r4
 8009fec:	db19      	blt.n	800a022 <_strtoul_l.isra.0+0xae>
 8009fee:	fb00 4006 	mla	r0, r0, r6, r4
 8009ff2:	2301      	movs	r3, #1
 8009ff4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009ff8:	e7eb      	b.n	8009fd2 <_strtoul_l.isra.0+0x5e>
 8009ffa:	462f      	mov	r7, r5
 8009ffc:	e7c1      	b.n	8009f82 <_strtoul_l.isra.0+0xe>
 8009ffe:	2c2b      	cmp	r4, #43	; 0x2b
 800a000:	bf04      	itt	eq
 800a002:	1cbd      	addeq	r5, r7, #2
 800a004:	787c      	ldrbeq	r4, [r7, #1]
 800a006:	4619      	mov	r1, r3
 800a008:	e7cb      	b.n	8009fa2 <_strtoul_l.isra.0+0x2e>
 800a00a:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800a00e:	2f19      	cmp	r7, #25
 800a010:	d801      	bhi.n	800a016 <_strtoul_l.isra.0+0xa2>
 800a012:	3c37      	subs	r4, #55	; 0x37
 800a014:	e7e2      	b.n	8009fdc <_strtoul_l.isra.0+0x68>
 800a016:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800a01a:	2f19      	cmp	r7, #25
 800a01c:	d804      	bhi.n	800a028 <_strtoul_l.isra.0+0xb4>
 800a01e:	3c57      	subs	r4, #87	; 0x57
 800a020:	e7dc      	b.n	8009fdc <_strtoul_l.isra.0+0x68>
 800a022:	f04f 33ff 	mov.w	r3, #4294967295
 800a026:	e7e5      	b.n	8009ff4 <_strtoul_l.isra.0+0x80>
 800a028:	2b00      	cmp	r3, #0
 800a02a:	da09      	bge.n	800a040 <_strtoul_l.isra.0+0xcc>
 800a02c:	2322      	movs	r3, #34	; 0x22
 800a02e:	f8c8 3000 	str.w	r3, [r8]
 800a032:	f04f 30ff 	mov.w	r0, #4294967295
 800a036:	f1ba 0f00 	cmp.w	sl, #0
 800a03a:	d107      	bne.n	800a04c <_strtoul_l.isra.0+0xd8>
 800a03c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a040:	b101      	cbz	r1, 800a044 <_strtoul_l.isra.0+0xd0>
 800a042:	4240      	negs	r0, r0
 800a044:	f1ba 0f00 	cmp.w	sl, #0
 800a048:	d0f8      	beq.n	800a03c <_strtoul_l.isra.0+0xc8>
 800a04a:	b10b      	cbz	r3, 800a050 <_strtoul_l.isra.0+0xdc>
 800a04c:	f105 39ff 	add.w	r9, r5, #4294967295
 800a050:	f8ca 9000 	str.w	r9, [sl]
 800a054:	e7f2      	b.n	800a03c <_strtoul_l.isra.0+0xc8>
 800a056:	2430      	movs	r4, #48	; 0x30
 800a058:	2e00      	cmp	r6, #0
 800a05a:	d1b0      	bne.n	8009fbe <_strtoul_l.isra.0+0x4a>
 800a05c:	2608      	movs	r6, #8
 800a05e:	e7ae      	b.n	8009fbe <_strtoul_l.isra.0+0x4a>
 800a060:	2c30      	cmp	r4, #48	; 0x30
 800a062:	d0a4      	beq.n	8009fae <_strtoul_l.isra.0+0x3a>
 800a064:	260a      	movs	r6, #10
 800a066:	e7aa      	b.n	8009fbe <_strtoul_l.isra.0+0x4a>

0800a068 <_strtoul_r>:
 800a068:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a06a:	4c06      	ldr	r4, [pc, #24]	; (800a084 <_strtoul_r+0x1c>)
 800a06c:	4d06      	ldr	r5, [pc, #24]	; (800a088 <_strtoul_r+0x20>)
 800a06e:	6824      	ldr	r4, [r4, #0]
 800a070:	6a24      	ldr	r4, [r4, #32]
 800a072:	2c00      	cmp	r4, #0
 800a074:	bf08      	it	eq
 800a076:	462c      	moveq	r4, r5
 800a078:	9400      	str	r4, [sp, #0]
 800a07a:	f7ff ff7b 	bl	8009f74 <_strtoul_l.isra.0>
 800a07e:	b003      	add	sp, #12
 800a080:	bd30      	pop	{r4, r5, pc}
 800a082:	bf00      	nop
 800a084:	2000022c 	.word	0x2000022c
 800a088:	20000290 	.word	0x20000290

0800a08c <__submore>:
 800a08c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a090:	460c      	mov	r4, r1
 800a092:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a094:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a098:	4299      	cmp	r1, r3
 800a09a:	d11d      	bne.n	800a0d8 <__submore+0x4c>
 800a09c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a0a0:	f7ff fa66 	bl	8009570 <_malloc_r>
 800a0a4:	b918      	cbnz	r0, 800a0ae <__submore+0x22>
 800a0a6:	f04f 30ff 	mov.w	r0, #4294967295
 800a0aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a0b2:	63a3      	str	r3, [r4, #56]	; 0x38
 800a0b4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800a0b8:	6360      	str	r0, [r4, #52]	; 0x34
 800a0ba:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800a0be:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a0c2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800a0c6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a0ca:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800a0ce:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800a0d2:	6020      	str	r0, [r4, #0]
 800a0d4:	2000      	movs	r0, #0
 800a0d6:	e7e8      	b.n	800a0aa <__submore+0x1e>
 800a0d8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800a0da:	0077      	lsls	r7, r6, #1
 800a0dc:	463a      	mov	r2, r7
 800a0de:	f000 f837 	bl	800a150 <_realloc_r>
 800a0e2:	4605      	mov	r5, r0
 800a0e4:	2800      	cmp	r0, #0
 800a0e6:	d0de      	beq.n	800a0a6 <__submore+0x1a>
 800a0e8:	eb00 0806 	add.w	r8, r0, r6
 800a0ec:	4601      	mov	r1, r0
 800a0ee:	4632      	mov	r2, r6
 800a0f0:	4640      	mov	r0, r8
 800a0f2:	f7fe fdd7 	bl	8008ca4 <memcpy>
 800a0f6:	f8c4 8000 	str.w	r8, [r4]
 800a0fa:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800a0fe:	e7e9      	b.n	800a0d4 <__submore+0x48>

0800a100 <__ascii_wctomb>:
 800a100:	b149      	cbz	r1, 800a116 <__ascii_wctomb+0x16>
 800a102:	2aff      	cmp	r2, #255	; 0xff
 800a104:	bf85      	ittet	hi
 800a106:	238a      	movhi	r3, #138	; 0x8a
 800a108:	6003      	strhi	r3, [r0, #0]
 800a10a:	700a      	strbls	r2, [r1, #0]
 800a10c:	f04f 30ff 	movhi.w	r0, #4294967295
 800a110:	bf98      	it	ls
 800a112:	2001      	movls	r0, #1
 800a114:	4770      	bx	lr
 800a116:	4608      	mov	r0, r1
 800a118:	4770      	bx	lr

0800a11a <memmove>:
 800a11a:	4288      	cmp	r0, r1
 800a11c:	b510      	push	{r4, lr}
 800a11e:	eb01 0302 	add.w	r3, r1, r2
 800a122:	d807      	bhi.n	800a134 <memmove+0x1a>
 800a124:	1e42      	subs	r2, r0, #1
 800a126:	4299      	cmp	r1, r3
 800a128:	d00a      	beq.n	800a140 <memmove+0x26>
 800a12a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a12e:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a132:	e7f8      	b.n	800a126 <memmove+0xc>
 800a134:	4283      	cmp	r3, r0
 800a136:	d9f5      	bls.n	800a124 <memmove+0xa>
 800a138:	1881      	adds	r1, r0, r2
 800a13a:	1ad2      	subs	r2, r2, r3
 800a13c:	42d3      	cmn	r3, r2
 800a13e:	d100      	bne.n	800a142 <memmove+0x28>
 800a140:	bd10      	pop	{r4, pc}
 800a142:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a146:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a14a:	e7f7      	b.n	800a13c <memmove+0x22>

0800a14c <__malloc_lock>:
 800a14c:	4770      	bx	lr

0800a14e <__malloc_unlock>:
 800a14e:	4770      	bx	lr

0800a150 <_realloc_r>:
 800a150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a152:	4607      	mov	r7, r0
 800a154:	4614      	mov	r4, r2
 800a156:	460e      	mov	r6, r1
 800a158:	b921      	cbnz	r1, 800a164 <_realloc_r+0x14>
 800a15a:	4611      	mov	r1, r2
 800a15c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a160:	f7ff ba06 	b.w	8009570 <_malloc_r>
 800a164:	b922      	cbnz	r2, 800a170 <_realloc_r+0x20>
 800a166:	f7ff f9b5 	bl	80094d4 <_free_r>
 800a16a:	4625      	mov	r5, r4
 800a16c:	4628      	mov	r0, r5
 800a16e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a170:	f000 f814 	bl	800a19c <_malloc_usable_size_r>
 800a174:	42a0      	cmp	r0, r4
 800a176:	d20f      	bcs.n	800a198 <_realloc_r+0x48>
 800a178:	4621      	mov	r1, r4
 800a17a:	4638      	mov	r0, r7
 800a17c:	f7ff f9f8 	bl	8009570 <_malloc_r>
 800a180:	4605      	mov	r5, r0
 800a182:	2800      	cmp	r0, #0
 800a184:	d0f2      	beq.n	800a16c <_realloc_r+0x1c>
 800a186:	4631      	mov	r1, r6
 800a188:	4622      	mov	r2, r4
 800a18a:	f7fe fd8b 	bl	8008ca4 <memcpy>
 800a18e:	4631      	mov	r1, r6
 800a190:	4638      	mov	r0, r7
 800a192:	f7ff f99f 	bl	80094d4 <_free_r>
 800a196:	e7e9      	b.n	800a16c <_realloc_r+0x1c>
 800a198:	4635      	mov	r5, r6
 800a19a:	e7e7      	b.n	800a16c <_realloc_r+0x1c>

0800a19c <_malloc_usable_size_r>:
 800a19c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1a0:	1f18      	subs	r0, r3, #4
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	bfbc      	itt	lt
 800a1a6:	580b      	ldrlt	r3, [r1, r0]
 800a1a8:	18c0      	addlt	r0, r0, r3
 800a1aa:	4770      	bx	lr

0800a1ac <_init>:
 800a1ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1ae:	bf00      	nop
 800a1b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1b2:	bc08      	pop	{r3}
 800a1b4:	469e      	mov	lr, r3
 800a1b6:	4770      	bx	lr

0800a1b8 <_fini>:
 800a1b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1ba:	bf00      	nop
 800a1bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1be:	bc08      	pop	{r3}
 800a1c0:	469e      	mov	lr, r3
 800a1c2:	4770      	bx	lr
